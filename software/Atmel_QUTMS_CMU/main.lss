
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014e  00800100  00001166  000011fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001166  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080024e  0080024e  00001348  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001348  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000135c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  000013a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025c0  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001083  00000000  00000000  00003b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002875  00000000  00000000  00004bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000518  00000000  00000000  00007428  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a81  00000000  00000000  00007940  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017e8  00000000  00000000  000083c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  00009ba9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	3d c0       	rjmp	.+122    	; 0x7c <__ctors_end>
       2:	00 00       	nop
       4:	57 c0       	rjmp	.+174    	; 0xb4 <__bad_interrupt>
       6:	00 00       	nop
       8:	55 c0       	rjmp	.+170    	; 0xb4 <__bad_interrupt>
       a:	00 00       	nop
       c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
       e:	00 00       	nop
      10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
      12:	00 00       	nop
      14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
      16:	00 00       	nop
      18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	4b c0       	rjmp	.+150    	; 0xb4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
      22:	00 00       	nop
      24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
      26:	00 00       	nop
      28:	58 c4       	rjmp	.+2224   	; 0x8da <__vector_10>
      2a:	00 00       	nop
      2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
      32:	00 00       	nop
      34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
      36:	00 00       	nop
      38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c5       	rjmp	.+2722   	; 0xae0 <__vector_15>
      3e:	00 00       	nop
      40:	39 c0       	rjmp	.+114    	; 0xb4 <__bad_interrupt>
      42:	00 00       	nop
      44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
      46:	00 00       	nop
      48:	4d c4       	rjmp	.+2202   	; 0x8e4 <__vector_18>
      4a:	00 00       	nop
      4c:	33 c0       	rjmp	.+102    	; 0xb4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	31 c0       	rjmp	.+98     	; 0xb4 <__bad_interrupt>
      52:	00 00       	nop
      54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
      56:	00 00       	nop
      58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
      62:	00 00       	nop
      64:	27 c0       	rjmp	.+78     	; 0xb4 <__bad_interrupt>
      66:	00 00       	nop
      68:	25 c0       	rjmp	.+74     	; 0xb4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	23 c0       	rjmp	.+70     	; 0xb4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	21 c0       	rjmp	.+66     	; 0xb4 <__bad_interrupt>
      72:	00 00       	nop
      74:	1f c0       	rjmp	.+62     	; 0xb4 <__bad_interrupt>
      76:	00 00       	nop
      78:	1d c0       	rjmp	.+58     	; 0xb4 <__bad_interrupt>
      7a:	00 00       	nop

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d0 e1       	ldi	r29, 0x10	; 16
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	12 e0       	ldi	r17, 0x02	; 2
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e6 e6       	ldi	r30, 0x66	; 102
      90:	f1 e1       	ldi	r31, 0x11	; 17
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	ae 34       	cpi	r26, 0x4E	; 78
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	22 e0       	ldi	r18, 0x02	; 2
      a0:	ae e4       	ldi	r26, 0x4E	; 78
      a2:	b2 e0       	ldi	r27, 0x02	; 2
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a6 35       	cpi	r26, 0x56	; 86
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	3c d3       	rcall	.+1656   	; 0x728 <main>
      b0:	0c 94 b1 08 	jmp	0x1162	; 0x1162 <_exit>

000000b4 <__bad_interrupt>:
      b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <IO_init>:
#include "main.h"

void IO_init()
{

	DDRD = 0b10011111;		//7 for discharge cell 4; 2,3,4 for multiplex selector; 0 for wake out, 1 for discharge cells 1 and 2; 6 is ADC input; 5 is ADC input.
      b6:	8f e9       	ldi	r24, 0x9F	; 159
      b8:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0b10000110;		//7 and 1 for cell balancing; 6,5 and 4 for ADC in; 3 for CAN Rx; 2 for CAN Tx; 0 for wake in (doesn't matter).
      ba:	86 e8       	ldi	r24, 0x86	; 134
      bc:	87 b9       	out	0x07, r24	; 7
	DDRB = 0b00011011;		//7, 6, 5 and 2 for ADC in; 4, 3, 1 and 0 for cell balance.
      be:	8b e1       	ldi	r24, 0x1B	; 27
      c0:	84 b9       	out	0x04, r24	; 4
	
	EICRA = (1<<ISC31)|(1<<ISC30);	//0b11000000	//to enable rising edge of INT3 on PINC0 to cause an external interrupt
      c2:	80 ec       	ldi	r24, 0xC0	; 192
      c4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = (1<<INT3);				//this may not be legal, the data sheet said it was read only, otherwise it might be 1<<INT1 and 1<<INT0 to represent 3 (0b00000011)
      c8:	88 e0       	ldi	r24, 0x08	; 8
      ca:	8d bb       	out	0x1d, r24	; 29
	//EIFR bits INTF3..0 hold information on whether the interrupt has occurred.
	//PCICR is useful when using the level change is being used to indicate the interrupt. hi-low or low-hi maybe
	sei();
      cc:	78 94       	sei
}
      ce:	08 95       	ret

000000d0 <ADC_init>:
	EEPROMWriteComplete = 0;
}

void ADC_init()
{
	ADMUX=(1<<REFS0)|(1<<AREFEN);                      // For Aref=AVcc with external capacitor;
      d0:	ec e7       	ldi	r30, 0x7C	; 124
      d2:	f0 e0       	ldi	r31, 0x00	; 0
      d4:	80 e6       	ldi	r24, 0x60	; 96
      d6:	80 83       	st	Z, r24
	ADMUX &= ~(1<<ADLAR);								//make sure adlar is not set.
      d8:	80 81       	ld	r24, Z
      da:	8f 7d       	andi	r24, 0xDF	; 223
      dc:	80 83       	st	Z, r24
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Prescaler div factor = 128, 125kHz --> lowest we can go for best accuracy.
      de:	87 e8       	ldi	r24, 0x87	; 135
      e0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
}
      e4:	08 95       	ret

000000e6 <Cells_init>:

void Cells_init(cell * _cells)
{
      e6:	cf 93       	push	r28
      e8:	df 93       	push	r29
      ea:	cd b7       	in	r28, 0x3d	; 61
      ec:	de b7       	in	r29, 0x3e	; 62
      ee:	68 97       	sbiw	r28, 0x18	; 24
      f0:	0f b6       	in	r0, 0x3f	; 63
      f2:	f8 94       	cli
      f4:	de bf       	out	0x3e, r29	; 62
      f6:	0f be       	out	0x3f, r0	; 63
      f8:	cd bf       	out	0x3d, r28	; 61
	uint8_t cell_temp_config[] = {7,6,3,2,5,4,1,0};		//multiplexer number to use for each different cell.
      fa:	28 e0       	ldi	r18, 0x08	; 8
      fc:	eb e1       	ldi	r30, 0x1B	; 27
      fe:	f1 e0       	ldi	r31, 0x01	; 1
     100:	de 01       	movw	r26, r28
     102:	51 96       	adiw	r26, 0x11	; 17
     104:	01 90       	ld	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	2a 95       	dec	r18
     10a:	e1 f7       	brne	.-8      	; 0x104 <Cells_init+0x1e>
	uint8_t cell_discharge_config[8] = {PIND1,PINC1,PINB0,PINB1,PIND7,PINB3,PINB4,PIND0};
     10c:	28 e0       	ldi	r18, 0x08	; 8
     10e:	e3 e2       	ldi	r30, 0x23	; 35
     110:	f1 e0       	ldi	r31, 0x01	; 1
     112:	de 01       	movw	r26, r28
     114:	19 96       	adiw	r26, 0x09	; 9
     116:	01 90       	ld	r0, Z+
     118:	0d 92       	st	X+, r0
     11a:	2a 95       	dec	r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <Cells_init+0x30>
	//uint8_t cell_vLevel_config[8] = {10,9,8,7,6,5,4,2};	//ADC Channels to use	
	uint8_t cell_vLevel_config[8] = {4,7,3,5,8,9,6,10};	//ADC Channels to use
     11e:	28 e0       	ldi	r18, 0x08	; 8
     120:	eb e2       	ldi	r30, 0x2B	; 43
     122:	f1 e0       	ldi	r31, 0x01	; 1
     124:	de 01       	movw	r26, r28
     126:	11 96       	adiw	r26, 0x01	; 1
     128:	01 90       	ld	r0, Z+
     12a:	0d 92       	st	X+, r0
     12c:	2a 95       	dec	r18
     12e:	e1 f7       	brne	.-8      	; 0x128 <Cells_init+0x42>
		
	
	for(uint8_t cParse = 0; cParse <=7; cParse++)
     130:	fc 01       	movw	r30, r24
     132:	ae 01       	movw	r20, r28
     134:	4f 5e       	subi	r20, 0xEF	; 239
     136:	5f 4f       	sbci	r21, 0xFF	; 255
     138:	be 01       	movw	r22, r28
     13a:	6f 5f       	subi	r22, 0xFF	; 255
     13c:	7f 4f       	sbci	r23, 0xFF	; 255
     13e:	9e 01       	movw	r18, r28
     140:	27 5f       	subi	r18, 0xF7	; 247
     142:	3f 4f       	sbci	r19, 0xFF	; 255
     144:	80 e0       	ldi	r24, 0x00	; 0
	{
		_cells[cParse].cell_num = cParse;								//assign our cell objects a local identifier number
     146:	83 83       	std	Z+3, r24	; 0x03
		_cells[cParse].temp_channel	= cell_temp_config[cParse];			//assign cell object the multiplexer value it needs to set before reading ADC value
     148:	da 01       	movw	r26, r20
     14a:	9d 91       	ld	r25, X+
     14c:	ad 01       	movw	r20, r26
     14e:	90 83       	st	Z, r25
		_cells[cParse].voltage_channel = cell_vLevel_config[cParse];		//assign cell ADC channel to use when reading
     150:	db 01       	movw	r26, r22
     152:	9d 91       	ld	r25, X+
     154:	bd 01       	movw	r22, r26
     156:	91 83       	std	Z+1, r25	; 0x01
		_cells[cParse].discharge_pin = cell_discharge_config[cParse];	//assign which pin to use to discharge
     158:	d9 01       	movw	r26, r18
     15a:	9d 91       	ld	r25, X+
     15c:	9d 01       	movw	r18, r26
     15e:	92 83       	std	Z+2, r25	; 0x02
	for(uint8_t cParse = 0; cParse <=7; cParse++)
     160:	8f 5f       	subi	r24, 0xFF	; 255
     162:	72 96       	adiw	r30, 0x12	; 18
     164:	88 30       	cpi	r24, 0x08	; 8
     166:	79 f7       	brne	.-34     	; 0x146 <Cells_init+0x60>
	}
}
     168:	68 96       	adiw	r28, 0x18	; 24
     16a:	0f b6       	in	r0, 0x3f	; 63
     16c:	f8 94       	cli
     16e:	de bf       	out	0x3e, r29	; 62
     170:	0f be       	out	0x3f, r0	; 63
     172:	cd bf       	out	0x3d, r28	; 61
     174:	df 91       	pop	r29
     176:	cf 91       	pop	r28
     178:	08 95       	ret

0000017a <CMU_eeprom_read>:

uint16_t CMU_eeprom_read(uint16_t address)
{
	while(!eeprom_is_ready());
     17a:	f9 99       	sbic	0x1f, 1	; 31
     17c:	fe cf       	rjmp	.-4      	; 0x17a <CMU_eeprom_read>
	return eeprom_read_word((const uint16_t *)address);
     17e:	cb c7       	rjmp	.+3990   	; 0x1116 <eeprom_read_word>

00000180 <Parameters_init>:
	deviceID  = CMU_eeprom_read(EEPROM_DEVICE_ID);
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	fa df       	rcall	.-12     	; 0x17a <CMU_eeprom_read>
     186:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <deviceID+0x1>
     18a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <deviceID>
	ADC_SAMPLES  = CMU_eeprom_read(EEPROM_ADC_SAMPLES);
     18e:	82 e0       	ldi	r24, 0x02	; 2
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	f3 df       	rcall	.-26     	; 0x17a <CMU_eeprom_read>
     194:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <ADC_SAMPLES+0x1>
     198:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <ADC_SAMPLES>
	fw_version = CMU_eeprom_read(EEPROM_FW_VERSION);
     19c:	84 e0       	ldi	r24, 0x04	; 4
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	ec df       	rcall	.-40     	; 0x17a <CMU_eeprom_read>
     1a2:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <fw_version+0x1>
     1a6:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <fw_version>
	CELL_V_DIFF_MAX_THRESHOLD = CMU_eeprom_read(EEPROM_CELL_V_DIFF_MAX_THRESHOLD);
     1aa:	80 e4       	ldi	r24, 0x40	; 64
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	e5 df       	rcall	.-54     	; 0x17a <CMU_eeprom_read>
     1b0:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <CELL_V_DIFF_MAX_THRESHOLD+0x1>
     1b4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <CELL_V_DIFF_MAX_THRESHOLD>
	CELL_V_DIFF_MIN_THRESHOLD = CMU_eeprom_read(EEPROM_CELL_V_DIFF_MIN_THRESHOLD);
     1b8:	82 e4       	ldi	r24, 0x42	; 66
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	de df       	rcall	.-68     	; 0x17a <CMU_eeprom_read>
     1be:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <CELL_V_DIFF_MIN_THRESHOLD+0x1>
     1c2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <CELL_V_DIFF_MIN_THRESHOLD>
	DISCHARGE_SCALE = CMU_eeprom_read(EEPROM_DISCHARGE_SCALE);
     1c6:	88 e4       	ldi	r24, 0x48	; 72
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	d7 df       	rcall	.-82     	; 0x17a <CMU_eeprom_read>
     1cc:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <DISCHARGE_SCALE+0x1>
     1d0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <DISCHARGE_SCALE>
	EEPROMWriteComplete = 0;
     1d4:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <EEPROMWriteComplete>
}
     1d8:	08 95       	ret

000001da <CMU_eeprom_write>:
}

void CMU_eeprom_write(uint16_t address, uint16_t value)
{
	while(!eeprom_is_ready());
     1da:	f9 99       	sbic	0x1f, 1	; 31
     1dc:	fe cf       	rjmp	.-4      	; 0x1da <CMU_eeprom_write>
	eeprom_write_word((uint16_t *)address, value);
     1de:	a0 c7       	rjmp	.+3904   	; 0x1120 <eeprom_write_word>

000001e0 <ADC_read>:
}

uint16_t ADC_read(uint8_t channel)
{
	channel = (ADMUX & 0xe0)|(channel & 0x1F); //ADMUX | 0b11100000 and channel | 0b00011111 --> this keeps all bits of ADMUX the same except for the bits signalling which channel to use.
     1e0:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     1e4:	90 7e       	andi	r25, 0xE0	; 224
     1e6:	8f 71       	andi	r24, 0x1F	; 31
     1e8:	98 2b       	or	r25, r24
	ADMUX = channel;
     1ea:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA |= (1<<ADSC);							//ADSC (single conversion bit) is set to 1 to start the conversion process.
     1ee:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1f2:	80 64       	ori	r24, 0x40	; 64
     1f4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	while(!(ADCSRA & (1<<ADIF)));				//run a loop while the conversion is taking place.
     1f8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     1fc:	84 ff       	sbrs	r24, 4
     1fe:	fc cf       	rjmp	.-8      	; 0x1f8 <ADC_read+0x18>
	uint16_t result = 0;
	result = ADCL;								//read ADCL first, ADCH after --> order is important! --> also not sure if this code is correct. other ADC examples return 'ADC' instead.
     200:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	result |= ((3 & ADCH) << 8);
     204:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	ADCSRA|=(1<<ADIF);							//once read and done, clear the 'complete' status by writing 1 to the ADIF bit.
     208:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     20c:	90 61       	ori	r25, 0x10	; 16
     20e:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	result |= ((3 & ADCH) << 8);
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	98 2f       	mov	r25, r24
     216:	88 27       	eor	r24, r24
     218:	88 27       	eor	r24, r24
     21a:	93 70       	andi	r25, 0x03	; 3
	return result;								//pass the 10 bit ADC number to requesting function.
}
     21c:	82 2b       	or	r24, r18
     21e:	08 95       	ret

00000220 <LED_flash>:

void LED_flash(uint8_t duration)
{
	duration = duration/2;
     220:	86 95       	lsr	r24
	DDRC |= 1<<PINC0;
     222:	38 9a       	sbi	0x07, 0	; 7
	PORTC |= 1<<PINC0;
     224:	40 9a       	sbi	0x08, 0	; 8
	for(uint8_t i = 0; i < duration; i++)
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	98 13       	cpse	r25, r24
     22a:	06 c0       	rjmp	.+12     	; 0x238 <LED_flash+0x18>
	{
		_delay_us(995);
	}
	PORTC &= ~(1<<PINC0);
     22c:	40 98       	cbi	0x08, 0	; 8
	DDRC &= ~(1<<PINC0);
     22e:	38 98       	cbi	0x07, 0	; 7
	for(uint8_t i = 0; i < duration; i++)
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	98 13       	cpse	r25, r24
     234:	09 c0       	rjmp	.+18     	; 0x248 <LED_flash+0x28>
	{
		_delay_us(995);
	}
}
     236:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     238:	eb e8       	ldi	r30, 0x8B	; 139
     23a:	ff e0       	ldi	r31, 0x0F	; 15
     23c:	31 97       	sbiw	r30, 0x01	; 1
     23e:	f1 f7       	brne	.-4      	; 0x23c <LED_flash+0x1c>
     240:	00 c0       	rjmp	.+0      	; 0x242 <LED_flash+0x22>
     242:	00 00       	nop
	for(uint8_t i = 0; i < duration; i++)
     244:	9f 5f       	subi	r25, 0xFF	; 255
     246:	f0 cf       	rjmp	.-32     	; 0x228 <LED_flash+0x8>
     248:	eb e8       	ldi	r30, 0x8B	; 139
     24a:	ff e0       	ldi	r31, 0x0F	; 15
     24c:	31 97       	sbiw	r30, 0x01	; 1
     24e:	f1 f7       	brne	.-4      	; 0x24c <LED_flash+0x2c>
     250:	00 c0       	rjmp	.+0      	; 0x252 <LED_flash+0x32>
     252:	00 00       	nop
	for(uint8_t i = 0; i < duration; i++)
     254:	9f 5f       	subi	r25, 0xFF	; 255
     256:	ed cf       	rjmp	.-38     	; 0x232 <LED_flash+0x12>

00000258 <LED_on>:
void LED_on()
{
	DDRC |= 1<<PINC0;
     258:	38 9a       	sbi	0x07, 0	; 7
	PORTC |= 1<<PINC0;
     25a:	40 9a       	sbi	0x08, 0	; 8
}
     25c:	08 95       	ret

0000025e <LED_off>:
void LED_off()
{
	PORTC &= ~(1<<PINC0);
     25e:	40 98       	cbi	0x08, 0	; 8
	DDRC &= ~(1<<PINC0);
     260:	38 98       	cbi	0x07, 0	; 7
}
     262:	08 95       	ret

00000264 <Convert_ADCtoMilliVolts>:
uint16_t Convert_ADCtoMilliVolts(uint16_t ADCValue)
{
    //return as invalid;
	if(ADCValue >= 1023) return  65535;
    //finish the conversion with error if the value will be completely unreasonable.
	if(ADCValue <  20 ) return 65535;
     264:	9c 01       	movw	r18, r24
     266:	24 51       	subi	r18, 0x14	; 20
     268:	31 09       	sbc	r19, r1
     26a:	2b 3e       	cpi	r18, 0xEB	; 235
     26c:	33 40       	sbci	r19, 0x03	; 3
     26e:	b0 f4       	brcc	.+44     	; 0x29c <Convert_ADCtoMilliVolts+0x38>
    //xxxxx.xxxxf results in the calculated value being a float, instead of an integer
	return (uint16_t)(((double)ADCValue*0.000977517f)*RAIL_V-MV_OFFSET);
     270:	bc 01       	movw	r22, r24
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	3c d6       	rcall	.+3192   	; 0xef0 <__floatunsisf>
     278:	27 e0       	ldi	r18, 0x07	; 7
     27a:	30 e2       	ldi	r19, 0x20	; 32
     27c:	40 e8       	ldi	r20, 0x80	; 128
     27e:	5a e3       	ldi	r21, 0x3A	; 58
     280:	c5 d6       	rcall	.+3466   	; 0x100c <__mulsf3>
     282:	20 e0       	ldi	r18, 0x00	; 0
     284:	30 e4       	ldi	r19, 0x40	; 64
     286:	4c e9       	ldi	r20, 0x9C	; 156
     288:	55 e4       	ldi	r21, 0x45	; 69
     28a:	c0 d6       	rcall	.+3456   	; 0x100c <__mulsf3>
     28c:	20 e0       	ldi	r18, 0x00	; 0
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	48 e7       	ldi	r20, 0x78	; 120
     292:	52 e4       	ldi	r21, 0x42	; 66
     294:	9c d5       	rcall	.+2872   	; 0xdce <__subsf3>
     296:	00 d6       	rcall	.+3072   	; 0xe98 <__fixunssfsi>
     298:	cb 01       	movw	r24, r22
     29a:	08 95       	ret
	if(ADCValue <  20 ) return 65535;
     29c:	8f ef       	ldi	r24, 0xFF	; 255
     29e:	9f ef       	ldi	r25, 0xFF	; 255

}
     2a0:	08 95       	ret

000002a2 <Read_voltage>:

uint16_t Read_voltage(cell * _cell)
{
     2a2:	cf 92       	push	r12
     2a4:	df 92       	push	r13
     2a6:	ef 92       	push	r14
     2a8:	ff 92       	push	r15
     2aa:	0f 93       	push	r16
     2ac:	1f 93       	push	r17
     2ae:	cf 93       	push	r28
     2b0:	8c 01       	movw	r16, r24
     2b2:	c5 e0       	ldi	r28, 0x05	; 5
	uint32_t sum = 0;
     2b4:	c1 2c       	mov	r12, r1
     2b6:	d1 2c       	mov	r13, r1
     2b8:	76 01       	movw	r14, r12
	for(uint8_t c = 0; c < AVG_V_SIZE; c++)
	{
		//elementToUpdate = (rand() % AVG_V_SIZE);						//choose a random element to update
		sum += Convert_ADCtoMilliVolts(ADC_read(_cell->voltage_channel));			//read the voltage
     2ba:	f8 01       	movw	r30, r16
     2bc:	81 81       	ldd	r24, Z+1	; 0x01
     2be:	90 df       	rcall	.-224    	; 0x1e0 <ADC_read>
     2c0:	d1 df       	rcall	.-94     	; 0x264 <Convert_ADCtoMilliVolts>
     2c2:	c8 0e       	add	r12, r24
     2c4:	d9 1e       	adc	r13, r25
     2c6:	e1 1c       	adc	r14, r1
     2c8:	f1 1c       	adc	r15, r1
     2ca:	c1 50       	subi	r28, 0x01	; 1
	for(uint8_t c = 0; c < AVG_V_SIZE; c++)
     2cc:	b1 f7       	brne	.-20     	; 0x2ba <Read_voltage+0x18>
		//if(elementToUpdate < AVG_V_SIZE)_cell->voltages[elementToUpdate] = tempVoltage;	//if the random number is valid, set the chosen element to the new voltage.
	}
	return (uint16_t)(sum/AVG_V_SIZE);	//return the average.
     2ce:	c7 01       	movw	r24, r14
     2d0:	b6 01       	movw	r22, r12
     2d2:	25 e0       	ldi	r18, 0x05	; 5
     2d4:	30 e0       	ldi	r19, 0x00	; 0
     2d6:	40 e0       	ldi	r20, 0x00	; 0
     2d8:	50 e0       	ldi	r21, 0x00	; 0
     2da:	fb d6       	rcall	.+3574   	; 0x10d2 <__udivmodsi4>
}
     2dc:	c9 01       	movw	r24, r18
     2de:	cf 91       	pop	r28
     2e0:	1f 91       	pop	r17
     2e2:	0f 91       	pop	r16
     2e4:	ff 90       	pop	r15
     2e6:	ef 90       	pop	r14
     2e8:	df 90       	pop	r13
     2ea:	cf 90       	pop	r12
     2ec:	08 95       	ret

000002ee <Read_all_voltages>:

void Read_all_voltages(cell * _cells)
{
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	ec 01       	movw	r28, r24

	cell * t_cells = _cells;
	for(uint8_t cellCount = 0; cellCount <= 7; cellCount++)
     2f8:	8c 01       	movw	r16, r24
     2fa:	00 57       	subi	r16, 0x70	; 112
     2fc:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		t_cells = _cells+cellCount;
		t_cells->voltage = Read_voltage(t_cells);	//move through all cells and assign voltage levels.
     2fe:	ce 01       	movw	r24, r28
     300:	d0 df       	rcall	.-96     	; 0x2a2 <Read_voltage>
     302:	9f 83       	std	Y+7, r25	; 0x07
     304:	8e 83       	std	Y+6, r24	; 0x06
     306:	62 96       	adiw	r28, 0x12	; 18
	for(uint8_t cellCount = 0; cellCount <= 7; cellCount++)
     308:	c0 17       	cp	r28, r16
     30a:	d1 07       	cpc	r29, r17
     30c:	c1 f7       	brne	.-16     	; 0x2fe <Read_all_voltages+0x10>
	}

}
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	1f 91       	pop	r17
     314:	0f 91       	pop	r16
     316:	08 95       	ret

00000318 <TX_cellVoltage>:

uint8_t TX_cellVoltage(cell *_cells)
{
     318:	af 92       	push	r10
     31a:	bf 92       	push	r11
     31c:	df 92       	push	r13
     31e:	ef 92       	push	r14
     320:	ff 92       	push	r15
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
     32e:	28 97       	sbiw	r28, 0x08	; 8
     330:	0f b6       	in	r0, 0x3f	; 63
     332:	f8 94       	cli
     334:	de bf       	out	0x3e, r29	; 62
     336:	0f be       	out	0x3f, r0	; 63
     338:	cd bf       	out	0x3d, r28	; 61
     33a:	5c 01       	movw	r10, r24
	int8_t mob;
	uint8_t tempData[8];
	
	for(uint8_t cellCount = 0; cellCount <= 3; cellCount++)
     33c:	dc 01       	movw	r26, r24
     33e:	fe 01       	movw	r30, r28
     340:	31 96       	adiw	r30, 0x01	; 1
     342:	ce 01       	movw	r24, r28
     344:	09 96       	adiw	r24, 0x09	; 9
     346:	de 2e       	mov	r13, r30
     348:	ff 2e       	mov	r15, r31
	{
		tempData[cellCount*2]	= _cells[cellCount].voltage >> 8;
     34a:	16 96       	adiw	r26, 0x06	; 6
     34c:	2c 91       	ld	r18, X
     34e:	16 97       	sbiw	r26, 0x06	; 6
     350:	17 96       	adiw	r26, 0x07	; 7
     352:	3c 91       	ld	r19, X
     354:	17 97       	sbiw	r26, 0x07	; 7
     356:	30 83       	st	Z, r19
		tempData[cellCount*2+1] = _cells[cellCount].voltage;
     358:	21 83       	std	Z+1, r18	; 0x01
     35a:	52 96       	adiw	r26, 0x12	; 18
     35c:	32 96       	adiw	r30, 0x02	; 2
	for(uint8_t cellCount = 0; cellCount <= 3; cellCount++)
     35e:	8e 17       	cp	r24, r30
     360:	9f 07       	cpc	r25, r31
     362:	99 f7       	brne	.-26     	; 0x34a <TX_cellVoltage+0x32>
	}
	mob = CAN_findFreeTXMOB();
     364:	22 d5       	rcall	.+2628   	; 0xdaa <CAN_findFreeTXMOB>
	if(mob>=0)CAN_TXMOB(mob, 8, tempData, ((uint32_t)deviceID<<18)|((uint32_t)AMUID<<8)|VOLT1_ID, 0); //transmit first 4 cell data and do not wait for finish
     366:	87 ff       	sbrs	r24, 7
     368:	11 c0       	rjmp	.+34     	; 0x38c <TX_cellVoltage+0x74>
	else return 0;
     36a:	80 e0       	ldi	r24, 0x00	; 0
	if(mob>=0)CAN_TXMOB(mob, 8, tempData, ((uint32_t)deviceID<<18)|((uint32_t)AMUID<<8)|VOLT2_ID, 0); //transmit first 4 cell data and do not wait for finish
	else return 0;
	_delay_ms(5);
	
	return 1;
}
     36c:	28 96       	adiw	r28, 0x08	; 8
     36e:	0f b6       	in	r0, 0x3f	; 63
     370:	f8 94       	cli
     372:	de bf       	out	0x3e, r29	; 62
     374:	0f be       	out	0x3f, r0	; 63
     376:	cd bf       	out	0x3d, r28	; 61
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	1f 91       	pop	r17
     37e:	0f 91       	pop	r16
     380:	ff 90       	pop	r15
     382:	ef 90       	pop	r14
     384:	df 90       	pop	r13
     386:	bf 90       	pop	r11
     388:	af 90       	pop	r10
     38a:	08 95       	ret
	if(mob>=0)CAN_TXMOB(mob, 8, tempData, ((uint32_t)deviceID<<18)|((uint32_t)AMUID<<8)|VOLT1_ID, 0); //transmit first 4 cell data and do not wait for finish
     38c:	00 91 0c 01 	lds	r16, 0x010C	; 0x80010c <deviceID>
     390:	10 91 0d 01 	lds	r17, 0x010D	; 0x80010d <deviceID+0x1>
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	42 e1       	ldi	r20, 0x12	; 18
     39a:	00 0f       	add	r16, r16
     39c:	11 1f       	adc	r17, r17
     39e:	22 1f       	adc	r18, r18
     3a0:	33 1f       	adc	r19, r19
     3a2:	4a 95       	dec	r20
     3a4:	d1 f7       	brne	.-12     	; 0x39a <TX_cellVoltage+0x82>
     3a6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <AMUID>
     3aa:	19 2b       	or	r17, r25
     3ac:	01 60       	ori	r16, 0x01	; 1
     3ae:	e1 2c       	mov	r14, r1
     3b0:	4d 2d       	mov	r20, r13
     3b2:	5f 2d       	mov	r21, r15
     3b4:	68 e0       	ldi	r22, 0x08	; 8
     3b6:	a6 d4       	rcall	.+2380   	; 0xd04 <CAN_TXMOB>
	__builtin_avr_delay_cycles(__ticks_dc);
     3b8:	8f e1       	ldi	r24, 0x1F	; 31
     3ba:	9e e4       	ldi	r25, 0x4E	; 78
     3bc:	01 97       	sbiw	r24, 0x01	; 1
     3be:	f1 f7       	brne	.-4      	; 0x3bc <TX_cellVoltage+0xa4>
     3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <TX_cellVoltage+0xaa>
     3c2:	00 00       	nop
		tempData[(cellCount-4)*2]	= _cells[cellCount].voltage >> 8;
     3c4:	f5 01       	movw	r30, r10
     3c6:	e2 5b       	subi	r30, 0xB2	; 178
     3c8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ca:	80 81       	ld	r24, Z
     3cc:	91 81       	ldd	r25, Z+1	; 0x01
     3ce:	98 27       	eor	r25, r24
     3d0:	89 27       	eor	r24, r25
     3d2:	98 27       	eor	r25, r24
     3d4:	9a 83       	std	Y+2, r25	; 0x02
     3d6:	89 83       	std	Y+1, r24	; 0x01
     3d8:	72 96       	adiw	r30, 0x12	; 18
     3da:	80 81       	ld	r24, Z
     3dc:	91 81       	ldd	r25, Z+1	; 0x01
     3de:	98 27       	eor	r25, r24
     3e0:	89 27       	eor	r24, r25
     3e2:	98 27       	eor	r25, r24
     3e4:	9c 83       	std	Y+4, r25	; 0x04
     3e6:	8b 83       	std	Y+3, r24	; 0x03
     3e8:	72 96       	adiw	r30, 0x12	; 18
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	98 27       	eor	r25, r24
     3f0:	89 27       	eor	r24, r25
     3f2:	98 27       	eor	r25, r24
     3f4:	9e 83       	std	Y+6, r25	; 0x06
     3f6:	8d 83       	std	Y+5, r24	; 0x05
     3f8:	72 96       	adiw	r30, 0x12	; 18
     3fa:	80 81       	ld	r24, Z
     3fc:	91 81       	ldd	r25, Z+1	; 0x01
     3fe:	98 27       	eor	r25, r24
     400:	89 27       	eor	r24, r25
     402:	98 27       	eor	r25, r24
     404:	98 87       	std	Y+8, r25	; 0x08
	mob = CAN_findFreeTXMOB();
     406:	8f 83       	std	Y+7, r24	; 0x07
     408:	d0 d4       	rcall	.+2464   	; 0xdaa <CAN_findFreeTXMOB>
	if(mob>=0)CAN_TXMOB(mob, 8, tempData, ((uint32_t)deviceID<<18)|((uint32_t)AMUID<<8)|VOLT2_ID, 0); //transmit first 4 cell data and do not wait for finish
     40a:	87 fd       	sbrc	r24, 7
     40c:	ae cf       	rjmp	.-164    	; 0x36a <TX_cellVoltage+0x52>
     40e:	00 91 0c 01 	lds	r16, 0x010C	; 0x80010c <deviceID>
     412:	10 91 0d 01 	lds	r17, 0x010D	; 0x80010d <deviceID+0x1>
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	20 e0       	ldi	r18, 0x00	; 0
     41a:	92 e1       	ldi	r25, 0x12	; 18
     41c:	00 0f       	add	r16, r16
     41e:	11 1f       	adc	r17, r17
     420:	22 1f       	adc	r18, r18
     422:	33 1f       	adc	r19, r19
     424:	9a 95       	dec	r25
     426:	d1 f7       	brne	.-12     	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
     428:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <AMUID>
     42c:	19 2b       	or	r17, r25
     42e:	02 60       	ori	r16, 0x02	; 2
     430:	4d 2d       	mov	r20, r13
     432:	5f 2d       	mov	r21, r15
     434:	68 e0       	ldi	r22, 0x08	; 8
     436:	66 d4       	rcall	.+2252   	; 0xd04 <CAN_TXMOB>
     438:	8f e1       	ldi	r24, 0x1F	; 31
     43a:	9e e4       	ldi	r25, 0x4E	; 78
     43c:	01 97       	sbiw	r24, 0x01	; 1
     43e:	f1 f7       	brne	.-4      	; 0x43c <__FUSE_REGION_LENGTH__+0x3c>
     440:	00 c0       	rjmp	.+0      	; 0x442 <__FUSE_REGION_LENGTH__+0x42>
     442:	00 00       	nop
	return 1;
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	92 cf       	rjmp	.-220    	; 0x36c <TX_cellVoltage+0x54>

00000448 <Convert_ADCtoCelsius>:


uint16_t Convert_ADCtoCelsius(uint16_t ADCValue)		//will spit out a value from 0 to 140  (ADC 10 bit value 1023 will be 255, lower than 187 will be 255)
{
     448:	ac 01       	movw	r20, r24
	if(ADCValue >= 1023)return 255;				//this indicates the sensor has failed, perhaps a short somewhere?
	if(ADCValue < 187 )return 255;				//finish the conversion with error if the value will be invalid.
     44a:	8b 5b       	subi	r24, 0xBB	; 187
     44c:	91 09       	sbc	r25, r1
     44e:	84 34       	cpi	r24, 0x44	; 68
     450:	93 40       	sbci	r25, 0x03	; 3
     452:	88 f4       	brcc	.+34     	; 0x476 <Convert_ADCtoCelsius+0x2e>
	uint8_t i = 0;
     454:	90 e0       	ldi	r25, 0x00	; 0
	while(TEMP_Celsius_pos[i] > ADCValue) i++;	//move through the array until values position is found. C will be equal to elements of the array we went through.
     456:	29 2f       	mov	r18, r25
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	f9 01       	movw	r30, r18
     45c:	ee 0f       	add	r30, r30
     45e:	ff 1f       	adc	r31, r31
     460:	ed 5c       	subi	r30, 0xCD	; 205
     462:	fe 4f       	sbci	r31, 0xFE	; 254
     464:	60 81       	ld	r22, Z
     466:	71 81       	ldd	r23, Z+1	; 0x01
     468:	46 17       	cp	r20, r22
     46a:	57 07       	cpc	r21, r23
     46c:	10 f0       	brcs	.+4      	; 0x472 <Convert_ADCtoCelsius+0x2a>
	return i;
     46e:	c9 01       	movw	r24, r18
     470:	08 95       	ret
	while(TEMP_Celsius_pos[i] > ADCValue) i++;	//move through the array until values position is found. C will be equal to elements of the array we went through.
     472:	9f 5f       	subi	r25, 0xFF	; 255
     474:	f0 cf       	rjmp	.-32     	; 0x456 <Convert_ADCtoCelsius+0xe>
	if(ADCValue < 187 )return 255;				//finish the conversion with error if the value will be invalid.
     476:	8f ef       	ldi	r24, 0xFF	; 255
     478:	90 e0       	ldi	r25, 0x00	; 0
}
     47a:	08 95       	ret

0000047c <Read_temp>:

uint16_t Read_temp(cell * _cell)
{
     47c:	cf 92       	push	r12
     47e:	df 92       	push	r13
     480:	ef 92       	push	r14
     482:	ff 92       	push	r15
     484:	cf 93       	push	r28


	uint32_t sum = 0;
	PORTD = (PORTD & 0xe3)|((_cell->temp_channel<<2) & 0x1c);		//so as to not change the rest of PORTD, we 'AND' the values of PORTD and uiMX with a mask
     486:	2b b1       	in	r18, 0x0b	; 11
     488:	fc 01       	movw	r30, r24
     48a:	90 81       	ld	r25, Z
     48c:	f4 e0       	ldi	r31, 0x04	; 4
     48e:	9f 9f       	mul	r25, r31
     490:	c0 01       	movw	r24, r0
     492:	11 24       	eor	r1, r1
     494:	8c 71       	andi	r24, 0x1C	; 28
     496:	23 7e       	andi	r18, 0xE3	; 227
     498:	82 2b       	or	r24, r18
     49a:	8b b9       	out	0x0b, r24	; 11
	for(uint8_t c = 0; c < ADC_SAMPLES; c++)
     49c:	c0 e0       	ldi	r28, 0x00	; 0
	uint32_t sum = 0;
     49e:	c1 2c       	mov	r12, r1
     4a0:	d1 2c       	mov	r13, r1
     4a2:	76 01       	movw	r14, r12
	for(uint8_t c = 0; c < ADC_SAMPLES; c++)
     4a4:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <ADC_SAMPLES>
     4a8:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <ADC_SAMPLES+0x1>
     4ac:	c8 17       	cp	r28, r24
     4ae:	19 06       	cpc	r1, r25
     4b0:	70 f0       	brcs	.+28     	; 0x4ce <Read_temp+0x52>
	{
		//elementToUpdate = (rand() % AVG_V_SIZE);						//choose a random element to update
		sum += Convert_ADCtoCelsius(ADC_read(TEMP_MULTIPLEX_CH));			//read the voltage
		//if(elementToUpdate < AVG_V_SIZE)_cell->voltages[elementToUpdate] = tempVoltage;	//if the random number is valid, set the chosen element to the new voltage.
	}
	return (uint16_t)(sum/AVG_V_SIZE);	//return the average.
     4b2:	c7 01       	movw	r24, r14
     4b4:	b6 01       	movw	r22, r12
     4b6:	25 e0       	ldi	r18, 0x05	; 5
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	40 e0       	ldi	r20, 0x00	; 0
     4bc:	50 e0       	ldi	r21, 0x00	; 0
     4be:	09 d6       	rcall	.+3090   	; 0x10d2 <__udivmodsi4>
	}
	avgTemp = sum/count;
	if(!count)return 255;			//if there were no valid values, return error value;
	else return avgTemp;			//otherwise return the average of the ADC_SAMPLES taken
	*/
}
     4c0:	c9 01       	movw	r24, r18
     4c2:	cf 91       	pop	r28
     4c4:	ff 90       	pop	r15
     4c6:	ef 90       	pop	r14
     4c8:	df 90       	pop	r13
     4ca:	cf 90       	pop	r12
     4cc:	08 95       	ret
		sum += Convert_ADCtoCelsius(ADC_read(TEMP_MULTIPLEX_CH));			//read the voltage
     4ce:	82 e0       	ldi	r24, 0x02	; 2
     4d0:	87 de       	rcall	.-754    	; 0x1e0 <ADC_read>
     4d2:	ba df       	rcall	.-140    	; 0x448 <Convert_ADCtoCelsius>
     4d4:	c8 0e       	add	r12, r24
     4d6:	d9 1e       	adc	r13, r25
     4d8:	e1 1c       	adc	r14, r1
     4da:	f1 1c       	adc	r15, r1
	for(uint8_t c = 0; c < ADC_SAMPLES; c++)
     4dc:	cf 5f       	subi	r28, 0xFF	; 255
     4de:	e2 cf       	rjmp	.-60     	; 0x4a4 <Read_temp+0x28>

000004e0 <Read_all_temps>:

void Read_all_temps(cell *_cells)
{
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	ec 01       	movw	r28, r24
	cell * t_cells = _cells;
	for (uint8_t cellCount = 0; cellCount <= 7; cellCount++)
     4ea:	8c 01       	movw	r16, r24
     4ec:	00 57       	subi	r16, 0x70	; 112
     4ee:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		t_cells = _cells+cellCount;									//our address must increment to modify/use the next value in the cell array
		t_cells->temperature = Read_temp(t_cells);		//move through all the cells and assign temperatures.
     4f0:	ce 01       	movw	r24, r28
     4f2:	c4 df       	rcall	.-120    	; 0x47c <Read_temp>
     4f4:	9d 83       	std	Y+5, r25	; 0x05
     4f6:	8c 83       	std	Y+4, r24	; 0x04
     4f8:	62 96       	adiw	r28, 0x12	; 18
	for (uint8_t cellCount = 0; cellCount <= 7; cellCount++)
     4fa:	c0 17       	cp	r28, r16
     4fc:	d1 07       	cpc	r29, r17
     4fe:	c1 f7       	brne	.-16     	; 0x4f0 <Read_all_temps+0x10>
	}
}
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	1f 91       	pop	r17
     506:	0f 91       	pop	r16
     508:	08 95       	ret

0000050a <TX_cellTemps>:

uint8_t TX_cellTemps(cell *_cells)
{
     50a:	af 92       	push	r10
     50c:	bf 92       	push	r11
     50e:	df 92       	push	r13
     510:	ef 92       	push	r14
     512:	ff 92       	push	r15
     514:	0f 93       	push	r16
     516:	1f 93       	push	r17
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
     520:	28 97       	sbiw	r28, 0x08	; 8
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	de bf       	out	0x3e, r29	; 62
     528:	0f be       	out	0x3f, r0	; 63
     52a:	cd bf       	out	0x3d, r28	; 61
     52c:	5c 01       	movw	r10, r24
	int8_t mob;
	uint8_t tempData[8];
	
	for(uint8_t cellCount = 0; cellCount <= 3; cellCount++)
     52e:	dc 01       	movw	r26, r24
     530:	fe 01       	movw	r30, r28
     532:	31 96       	adiw	r30, 0x01	; 1
     534:	ce 01       	movw	r24, r28
     536:	09 96       	adiw	r24, 0x09	; 9
     538:	de 2e       	mov	r13, r30
     53a:	ff 2e       	mov	r15, r31
	{
		tempData[cellCount*2]	= _cells[cellCount].temperature >> 8;
     53c:	14 96       	adiw	r26, 0x04	; 4
     53e:	2c 91       	ld	r18, X
     540:	14 97       	sbiw	r26, 0x04	; 4
     542:	15 96       	adiw	r26, 0x05	; 5
     544:	3c 91       	ld	r19, X
     546:	15 97       	sbiw	r26, 0x05	; 5
     548:	30 83       	st	Z, r19
		tempData[cellCount*2+1] = _cells[cellCount].temperature;
     54a:	21 83       	std	Z+1, r18	; 0x01
     54c:	52 96       	adiw	r26, 0x12	; 18
     54e:	32 96       	adiw	r30, 0x02	; 2
	for(uint8_t cellCount = 0; cellCount <= 3; cellCount++)
     550:	8e 17       	cp	r24, r30
     552:	9f 07       	cpc	r25, r31
     554:	99 f7       	brne	.-26     	; 0x53c <TX_cellTemps+0x32>
	}
	mob = CAN_findFreeTXMOB();
     556:	29 d4       	rcall	.+2130   	; 0xdaa <CAN_findFreeTXMOB>
	if(mob>=0)CAN_TXMOB(mob, 8, tempData, ((uint32_t)deviceID<<18)|((uint32_t)AMUID<<8)|TEMP1_ID, 0); //transmit first 4 cell data and do not wait for finish
     558:	87 ff       	sbrs	r24, 7
     55a:	11 c0       	rjmp	.+34     	; 0x57e <TX_cellTemps+0x74>
	else return 0;
     55c:	80 e0       	ldi	r24, 0x00	; 0
	mob = CAN_findFreeTXMOB();
	if(mob>=0)CAN_TXMOB(mob, 8, tempData, ((uint32_t)deviceID<<18)|((uint32_t)AMUID<<8)|TEMP2_ID, 0); //transmit first 4 cell data and do not wait for finish
	else return 0;
	_delay_ms(5);
	return 1;
}
     55e:	28 96       	adiw	r28, 0x08	; 8
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	f8 94       	cli
     564:	de bf       	out	0x3e, r29	; 62
     566:	0f be       	out	0x3f, r0	; 63
     568:	cd bf       	out	0x3d, r28	; 61
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	1f 91       	pop	r17
     570:	0f 91       	pop	r16
     572:	ff 90       	pop	r15
     574:	ef 90       	pop	r14
     576:	df 90       	pop	r13
     578:	bf 90       	pop	r11
     57a:	af 90       	pop	r10
     57c:	08 95       	ret
	if(mob>=0)CAN_TXMOB(mob, 8, tempData, ((uint32_t)deviceID<<18)|((uint32_t)AMUID<<8)|TEMP1_ID, 0); //transmit first 4 cell data and do not wait for finish
     57e:	00 91 0c 01 	lds	r16, 0x010C	; 0x80010c <deviceID>
     582:	10 91 0d 01 	lds	r17, 0x010D	; 0x80010d <deviceID+0x1>
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	42 e1       	ldi	r20, 0x12	; 18
     58c:	00 0f       	add	r16, r16
     58e:	11 1f       	adc	r17, r17
     590:	22 1f       	adc	r18, r18
     592:	33 1f       	adc	r19, r19
     594:	4a 95       	dec	r20
     596:	d1 f7       	brne	.-12     	; 0x58c <TX_cellTemps+0x82>
     598:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <AMUID>
     59c:	19 2b       	or	r17, r25
     59e:	04 60       	ori	r16, 0x04	; 4
     5a0:	e1 2c       	mov	r14, r1
     5a2:	4d 2d       	mov	r20, r13
     5a4:	5f 2d       	mov	r21, r15
     5a6:	68 e0       	ldi	r22, 0x08	; 8
     5a8:	ad d3       	rcall	.+1882   	; 0xd04 <CAN_TXMOB>
     5aa:	8f e1       	ldi	r24, 0x1F	; 31
     5ac:	9e e4       	ldi	r25, 0x4E	; 78
     5ae:	01 97       	sbiw	r24, 0x01	; 1
     5b0:	f1 f7       	brne	.-4      	; 0x5ae <TX_cellTemps+0xa4>
     5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <TX_cellTemps+0xaa>
     5b4:	00 00       	nop
		tempData[(cellCount-4)*2]	= _cells[cellCount].temperature >> 8;
     5b6:	f5 01       	movw	r30, r10
     5b8:	e4 5b       	subi	r30, 0xB4	; 180
     5ba:	ff 4f       	sbci	r31, 0xFF	; 255
     5bc:	80 81       	ld	r24, Z
     5be:	91 81       	ldd	r25, Z+1	; 0x01
     5c0:	98 27       	eor	r25, r24
     5c2:	89 27       	eor	r24, r25
     5c4:	98 27       	eor	r25, r24
     5c6:	9a 83       	std	Y+2, r25	; 0x02
     5c8:	89 83       	std	Y+1, r24	; 0x01
     5ca:	72 96       	adiw	r30, 0x12	; 18
     5cc:	80 81       	ld	r24, Z
     5ce:	91 81       	ldd	r25, Z+1	; 0x01
     5d0:	98 27       	eor	r25, r24
     5d2:	89 27       	eor	r24, r25
     5d4:	98 27       	eor	r25, r24
     5d6:	9c 83       	std	Y+4, r25	; 0x04
     5d8:	8b 83       	std	Y+3, r24	; 0x03
     5da:	72 96       	adiw	r30, 0x12	; 18
     5dc:	80 81       	ld	r24, Z
     5de:	91 81       	ldd	r25, Z+1	; 0x01
     5e0:	98 27       	eor	r25, r24
     5e2:	89 27       	eor	r24, r25
     5e4:	98 27       	eor	r25, r24
     5e6:	9e 83       	std	Y+6, r25	; 0x06
     5e8:	8d 83       	std	Y+5, r24	; 0x05
     5ea:	72 96       	adiw	r30, 0x12	; 18
     5ec:	80 81       	ld	r24, Z
     5ee:	91 81       	ldd	r25, Z+1	; 0x01
     5f0:	98 27       	eor	r25, r24
     5f2:	89 27       	eor	r24, r25
     5f4:	98 27       	eor	r25, r24
     5f6:	98 87       	std	Y+8, r25	; 0x08
	mob = CAN_findFreeTXMOB();
     5f8:	8f 83       	std	Y+7, r24	; 0x07
     5fa:	d7 d3       	rcall	.+1966   	; 0xdaa <CAN_findFreeTXMOB>
	if(mob>=0)CAN_TXMOB(mob, 8, tempData, ((uint32_t)deviceID<<18)|((uint32_t)AMUID<<8)|TEMP2_ID, 0); //transmit first 4 cell data and do not wait for finish
     5fc:	87 fd       	sbrc	r24, 7
     5fe:	ae cf       	rjmp	.-164    	; 0x55c <TX_cellTemps+0x52>
     600:	00 91 0c 01 	lds	r16, 0x010C	; 0x80010c <deviceID>
     604:	10 91 0d 01 	lds	r17, 0x010D	; 0x80010d <deviceID+0x1>
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	92 e1       	ldi	r25, 0x12	; 18
     60e:	00 0f       	add	r16, r16
     610:	11 1f       	adc	r17, r17
     612:	22 1f       	adc	r18, r18
     614:	33 1f       	adc	r19, r19
     616:	9a 95       	dec	r25
     618:	d1 f7       	brne	.-12     	; 0x60e <TX_cellTemps+0x104>
     61a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <AMUID>
     61e:	19 2b       	or	r17, r25
     620:	05 60       	ori	r16, 0x05	; 5
     622:	4d 2d       	mov	r20, r13
     624:	5f 2d       	mov	r21, r15
     626:	68 e0       	ldi	r22, 0x08	; 8
     628:	6d d3       	rcall	.+1754   	; 0xd04 <CAN_TXMOB>
     62a:	8f e1       	ldi	r24, 0x1F	; 31
     62c:	9e e4       	ldi	r25, 0x4E	; 78
     62e:	01 97       	sbiw	r24, 0x01	; 1
     630:	f1 f7       	brne	.-4      	; 0x62e <TX_cellTemps+0x124>
     632:	00 c0       	rjmp	.+0      	; 0x634 <TX_cellTemps+0x12a>
     634:	00 00       	nop
	return 1;
     636:	81 e0       	ldi	r24, 0x01	; 1
     638:	92 cf       	rjmp	.-220    	; 0x55e <TX_cellTemps+0x54>

0000063a <Balance_on>:
	}*/
}

void Balance_on()
{
	TCCR0A = 0;
     63a:	14 bc       	out	0x24, r1	; 36
	TCCR0B = (1<<CS01);
     63c:	82 e0       	ldi	r24, 0x02	; 2
     63e:	85 bd       	out	0x25, r24	; 37
	//TCNT0 = 0;
	OCR0A = 200;
     640:	98 ec       	ldi	r25, 0xC8	; 200
     642:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<<OCIE0A);
     644:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
}
     648:	08 95       	ret

0000064a <Balance_off>:

void Balance_off()
{
	//TCCR0B = 0;
	TIMSK0 = 0;
     64a:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	PORTB &= ~((CELL2>>2)|(CELL3>>2)|(CELL5>>2)|(CELL6>>2)); //turn off discharge for cells 7..4, if they are specified in _cellsToBalance
     64e:	85 b1       	in	r24, 0x05	; 5
     650:	84 7e       	andi	r24, 0xE4	; 228
     652:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~((CELL1)|(CELL7)); //turn off discharge for cells 3 and 0, if their corresponding bits are specified in _cellsToBalance
     654:	88 b1       	in	r24, 0x08	; 8
     656:	8d 77       	andi	r24, 0x7D	; 125
     658:	88 b9       	out	0x08, r24	; 8
	PORTD &= ~((CELL0<<1)|(CELL4<<3)); //turn off discharge for cells 2 and 1, if their corresponding bits are on in _cellsToBalance
     65a:	8b b1       	in	r24, 0x0b	; 11
     65c:	8d 77       	andi	r24, 0x7D	; 125
     65e:	8b b9       	out	0x0b, r24	; 11
	LED_off();
     660:	fe cd       	rjmp	.-1028   	; 0x25e <LED_off>

00000662 <Balance_init>:
}
void Balance_init(cell * _cells)
{
     662:	0f 93       	push	r16
     664:	1f 93       	push	r17
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
	//this function finds the cells with the top 3 voltage levels, and the cell with the lowest voltage. Then discharges the highest.
	cell * t_cells = _cells;

	//Analyse cell data in this section
	cell lowest = *_cells;				//assign an arbitrary cell to the lowest, for comparison
     66a:	ec 01       	movw	r28, r24
     66c:	2e 81       	ldd	r18, Y+6	; 0x06
     66e:	3f 81       	ldd	r19, Y+7	; 0x07

	uint8_t iscan = 0;
	for(iscan = 0; iscan <= 7; iscan++ )	//Analyse cell values 1st run, checking for invalid values and assigning highest and lowest
	{
		t_cells = _cells+iscan;
		if (t_cells->voltage >= CELL_V_ERR_MAX || t_cells->voltage <= CELL_V_ERR_MIN) return;	//if any cells give voltages outside error range, we will not attempt to balance
     670:	c0 91 10 01 	lds	r28, 0x0110	; 0x800110 <CELL_V_ERR_MAX>
     674:	d0 91 11 01 	lds	r29, 0x0111	; 0x800111 <CELL_V_ERR_MAX+0x1>
     678:	00 91 12 01 	lds	r16, 0x0112	; 0x800112 <CELL_V_ERR_MIN>
     67c:	10 91 13 01 	lds	r17, 0x0113	; 0x800113 <CELL_V_ERR_MIN+0x1>
     680:	fc 01       	movw	r30, r24
     682:	ac 01       	movw	r20, r24
     684:	40 57       	subi	r20, 0x70	; 112
     686:	5f 4f       	sbci	r21, 0xFF	; 255
     688:	dc 01       	movw	r26, r24
     68a:	16 96       	adiw	r26, 0x06	; 6
     68c:	6d 91       	ld	r22, X+
     68e:	7c 91       	ld	r23, X
     690:	17 97       	sbiw	r26, 0x07	; 7
     692:	6c 17       	cp	r22, r28
     694:	7d 07       	cpc	r23, r29
     696:	b0 f5       	brcc	.+108    	; 0x704 <Balance_init+0xa2>
     698:	06 17       	cp	r16, r22
     69a:	17 07       	cpc	r17, r23
     69c:	98 f5       	brcc	.+102    	; 0x704 <Balance_init+0xa2>
		if (t_cells->voltage <= lowest.voltage)lowest	= *t_cells;				//find the cell with lowest voltage
     69e:	62 17       	cp	r22, r18
     6a0:	73 07       	cpc	r23, r19
     6a2:	08 f4       	brcc	.+2      	; 0x6a6 <Balance_init+0x44>
     6a4:	9b 01       	movw	r18, r22
		if (t_cells->voltage > high_1.voltage)high_1	= *t_cells;				//find the cell with highest voltage
     6a6:	52 96       	adiw	r26, 0x12	; 18
	for(iscan = 0; iscan <= 7; iscan++ )	//Analyse cell values 1st run, checking for invalid values and assigning highest and lowest
     6a8:	a4 17       	cp	r26, r20
     6aa:	b5 07       	cpc	r27, r21
     6ac:	71 f7       	brne	.-36     	; 0x68a <Balance_init+0x28>
	cell high_3 = lowest;			//and again assign lowest cell to the third highest.

	for(iscan = 0; iscan <= 7; iscan++)		//analyse cell values 2nd run, checking for large differences. also assign 2nd highest cell
	{
		t_cells = _cells+iscan;
		if (t_cells->voltage > lowest.voltage+CELL_V_DIFF_MAX_THRESHOLD || t_cells->voltage < lowest.voltage-CELL_V_DIFF_MAX_THRESHOLD)return;	//if any cells have difference greater than 0.5V(time of writing threshold), we can't balance, so quit
     6ae:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <CELL_V_DIFF_MAX_THRESHOLD>
     6b2:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <CELL_V_DIFF_MAX_THRESHOLD+0x1>
     6b6:	db 01       	movw	r26, r22
     6b8:	a2 0f       	add	r26, r18
     6ba:	b3 1f       	adc	r27, r19
     6bc:	26 1b       	sub	r18, r22
     6be:	37 0b       	sbc	r19, r23
     6c0:	ec 01       	movw	r28, r24
     6c2:	6e 81       	ldd	r22, Y+6	; 0x06
     6c4:	7f 81       	ldd	r23, Y+7	; 0x07
     6c6:	a6 17       	cp	r26, r22
     6c8:	b7 07       	cpc	r27, r23
     6ca:	e0 f0       	brcs	.+56     	; 0x704 <Balance_init+0xa2>
     6cc:	62 17       	cp	r22, r18
     6ce:	73 07       	cpc	r23, r19
     6d0:	c8 f0       	brcs	.+50     	; 0x704 <Balance_init+0xa2>
		if (t_cells->voltage >= high_2.voltage && t_cells->cell_num != high_1.cell_num )high_2 = *t_cells;										//high_2 starts at the lowest value, and checks each cell for the highest value, that isn't assigned to high_1.
     6d2:	42 96       	adiw	r24, 0x12	; 18
	for(iscan = 0; iscan <= 7; iscan++)		//analyse cell values 2nd run, checking for large differences. also assign 2nd highest cell
     6d4:	84 17       	cp	r24, r20
     6d6:	95 07       	cpc	r25, r21
     6d8:	99 f7       	brne	.-26     	; 0x6c0 <Balance_init+0x5e>
	//IGNORE THE PREVIOUS PART OF THIS FUNCTION
	//THIS IS THE LATEST PART OF THE algorithm... is that how you spell algorithm?
	for(iscan = 0; iscan <= 7; iscan++)
	{
		t_cells = _cells+iscan;
		if(t_cells->voltage > BALANCE_TARGET_VOLTAGE)_cellsToBalance |= CellNum[t_cells->cell_num];
     6da:	26 81       	ldd	r18, Z+6	; 0x06
     6dc:	37 81       	ldd	r19, Z+7	; 0x07
     6de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <BALANCE_TARGET_VOLTAGE>
     6e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <BALANCE_TARGET_VOLTAGE+0x1>
     6e6:	82 17       	cp	r24, r18
     6e8:	93 07       	cpc	r25, r19
     6ea:	40 f4       	brcc	.+16     	; 0x6fc <Balance_init+0x9a>
     6ec:	a3 81       	ldd	r26, Z+3	; 0x03
     6ee:	b0 e0       	ldi	r27, 0x00	; 0
     6f0:	ad 5f       	subi	r26, 0xFD	; 253
     6f2:	be 4f       	sbci	r27, 0xFE	; 254
     6f4:	8c 91       	ld	r24, X
     6f6:	9e b3       	in	r25, 0x1e	; 30
     6f8:	89 2b       	or	r24, r25
     6fa:	8e bb       	out	0x1e, r24	; 30
     6fc:	72 96       	adiw	r30, 0x12	; 18
	for(iscan = 0; iscan <= 7; iscan++)
     6fe:	e4 17       	cp	r30, r20
     700:	f5 07       	cpc	r31, r21
     702:	59 f7       	brne	.-42     	; 0x6da <Balance_init+0x78>
	//OLD DEBUGGING_cellsToBalance = 0xff;
	//OLDint8_t mob = CAN_findFreeTXMOB();
	//OLD CAUSING POTENTIAL BROADCAST STORMS... CAN_TXMOB(mob, 1, &_cellsToBalance, ((uint32_t)deviceID<<18)|((uint32_t)AMUID<<8)|15, 0); //transmit cells to be discharged and do not wait for finish


}
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	1f 91       	pop	r17
     70a:	0f 91       	pop	r16
     70c:	08 95       	ret

0000070e <Wake_Set>:
	PORTD &= ~(1<<PIND0);

}
void Wake_Set()
{
	PORTD |= (1<<PIND0);		//turn wake pin on, to wake up the next CMU
     70e:	58 9a       	sbi	0x0b, 0	; 11
}
     710:	08 95       	ret

00000712 <Wake_Unset>:
void Wake_Unset()
{
	PORTD &= ~(1<<PIND0);		//turn wake off. our job is done.
     712:	58 98       	cbi	0x0b, 0	; 11
}
     714:	08 95       	ret

00000716 <PowerDown>:

void PowerDown()
{

	//SMCR = (1<<SM1)|(1<<SE);	//0b00000101	//power down mode //also known as SLEEP_MODE_PWR_DOWN. This also enables the mode with 1<<SE.
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);		//power down shuts the main clock down.
     716:	83 b7       	in	r24, 0x33	; 51
     718:	81 7f       	andi	r24, 0xF1	; 241
     71a:	84 60       	ori	r24, 0x04	; 4
     71c:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
     71e:	83 b7       	in	r24, 0x33	; 51
     720:	81 60       	ori	r24, 0x01	; 1
     722:	83 bf       	out	0x33, r24	; 51
	sleep_cpu();				//enter the sleep state.
     724:	88 95       	sleep

}
     726:	08 95       	ret

00000728 <main>:

int main(void)
{
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
     72c:	c0 59       	subi	r28, 0x90	; 144
     72e:	d1 09       	sbc	r29, r1
     730:	0f b6       	in	r0, 0x3f	; 63
     732:	f8 94       	cli
     734:	de bf       	out	0x3e, r29	; 62
     736:	0f be       	out	0x3f, r0	; 63
     738:	cd bf       	out	0x3d, r28	; 61
     73a:	8f e3       	ldi	r24, 0x3F	; 63
     73c:	9c e9       	ldi	r25, 0x9C	; 156
     73e:	01 97       	sbiw	r24, 0x01	; 1
     740:	f1 f7       	brne	.-4      	; 0x73e <main+0x16>
     742:	00 c0       	rjmp	.+0      	; 0x744 <main+0x1c>
     744:	00 00       	nop
	_delay_ms(10);
	
	
	CMU_eeprom_write(EEPROM_DEVICE_ID, 6);
     746:	66 e0       	ldi	r22, 0x06	; 6
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	45 dd       	rcall	.-1398   	; 0x1da <CMU_eeprom_write>
	CMU_eeprom_write(EEPROM_ADC_SAMPLES, 3);
     750:	63 e0       	ldi	r22, 0x03	; 3
     752:	70 e0       	ldi	r23, 0x00	; 0
     754:	82 e0       	ldi	r24, 0x02	; 2
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	40 dd       	rcall	.-1408   	; 0x1da <CMU_eeprom_write>
	CMU_eeprom_write(EEPROM_FW_VERSION, 1003);
     75a:	6b ee       	ldi	r22, 0xEB	; 235
     75c:	73 e0       	ldi	r23, 0x03	; 3
     75e:	84 e0       	ldi	r24, 0x04	; 4
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	3b dd       	rcall	.-1418   	; 0x1da <CMU_eeprom_write>
	CMU_eeprom_write(EEPROM_CELL_V_DIFF_MAX_THRESHOLD, 500);
     764:	64 ef       	ldi	r22, 0xF4	; 244
     766:	71 e0       	ldi	r23, 0x01	; 1
     768:	80 e4       	ldi	r24, 0x40	; 64
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	36 dd       	rcall	.-1428   	; 0x1da <CMU_eeprom_write>
	CMU_eeprom_write(EEPROM_CELL_V_DIFF_MIN_THRESHOLD, 500);
     76e:	64 ef       	ldi	r22, 0xF4	; 244
     770:	71 e0       	ldi	r23, 0x01	; 1
     772:	82 e4       	ldi	r24, 0x42	; 66
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	31 dd       	rcall	.-1438   	; 0x1da <CMU_eeprom_write>
	CMU_eeprom_write(EEPROM_DISCHARGE_SCALE, 200);
     778:	68 ec       	ldi	r22, 0xC8	; 200
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	88 e4       	ldi	r24, 0x48	; 72
     77e:	90 e0       	ldi	r25, 0x00	; 0
	
	EEPROMWriteComplete = 0;
     780:	2c dd       	rcall	.-1448   	; 0x1da <CMU_eeprom_write>
     782:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <EEPROMWriteComplete>
	
	IO_init();		//initialise IO and INT3 for waking up from power down mode
     786:	97 dc       	rcall	.-1746   	; 0xb6 <IO_init>
	//Wake_Set();
	ADC_init();		//initialises ADC
     788:	a3 dc       	rcall	.-1722   	; 0xd0 <ADC_init>
     78a:	2a d2       	rcall	.+1108   	; 0xbe0 <CAN_init>
	CAN_init();		//initialises CAN, without enabling any receive MOBs
     78c:	e1 2c       	mov	r14, r1
	CAN_RXInit(4, 0, 0, 0);	//set mob up for listening to audit requests
     78e:	f1 2c       	mov	r15, r1
     790:	87 01       	movw	r16, r14
     792:	20 e0       	ldi	r18, 0x00	; 0
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	a9 01       	movw	r20, r18
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	84 e0       	ldi	r24, 0x04	; 4
     79c:	59 d2       	rcall	.+1202   	; 0xc50 <CAN_RXInit>
	
	//srand(ADC_read(0));
	Parameters_init();	//disable this until we have the parameters on the eeprom
     79e:	f0 dc       	rcall	.-1568   	; 0x180 <Parameters_init>
     7a0:	ba df       	rcall	.-140    	; 0x716 <PowerDown>
	PowerDown();		//shutdown until woken for the first time
     7a2:	9f ef       	ldi	r25, 0xFF	; 255
     7a4:	23 ec       	ldi	r18, 0xC3	; 195
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	91 50       	subi	r25, 0x01	; 1
     7aa:	20 40       	sbci	r18, 0x00	; 0
     7ac:	80 40       	sbci	r24, 0x00	; 0
     7ae:	e1 f7       	brne	.-8      	; 0x7a8 <main+0x80>
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <main+0x8a>
     7b2:	00 00       	nop
     7b4:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <registered>
	_delay_ms(200);	//await registration messages which will be automatically handled in interrupts
	
	if(!registered)_delay_ms(800);
     7b8:	81 11       	cpse	r24, r1
     7ba:	09 c0       	rjmp	.+18     	; 0x7ce <main+0xa6>
     7bc:	9f ef       	ldi	r25, 0xFF	; 255
     7be:	2f e0       	ldi	r18, 0x0F	; 15
     7c0:	87 e2       	ldi	r24, 0x27	; 39
     7c2:	91 50       	subi	r25, 0x01	; 1
     7c4:	20 40       	sbci	r18, 0x00	; 0
     7c6:	80 40       	sbci	r24, 0x00	; 0
     7c8:	e1 f7       	brne	.-8      	; 0x7c2 <main+0x9a>
     7ca:	00 c0       	rjmp	.+0      	; 0x7cc <main+0xa4>
     7cc:	00 00       	nop
	if (WAKE_IN_PIN && !registered) //if the wake in pin is still high and we aren't registered, there is a problem
     7ce:	30 9b       	sbis	0x06, 0	; 6
     7d0:	14 c0       	rjmp	.+40     	; 0x7fa <main+0xd2>
     7d2:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <registered>
     7d6:	81 11       	cpse	r24, r1
     7d8:	10 c0       	rjmp	.+32     	; 0x7fa <main+0xd2>
	{
		while(1)					//loop endlessly
		{
			LED_flash(50);			//flashing LED 3 times
     7da:	82 e3       	ldi	r24, 0x32	; 50
     7dc:	21 dd       	rcall	.-1470   	; 0x220 <LED_flash>
     7de:	82 e3       	ldi	r24, 0x32	; 50
			LED_flash(50);
     7e0:	1f dd       	rcall	.-1474   	; 0x220 <LED_flash>
     7e2:	82 e3       	ldi	r24, 0x32	; 50
     7e4:	1d dd       	rcall	.-1478   	; 0x220 <LED_flash>
			LED_flash(50);
     7e6:	9f ef       	ldi	r25, 0xFF	; 255
     7e8:	27 ea       	ldi	r18, 0xA7	; 167
     7ea:	81 e6       	ldi	r24, 0x61	; 97
     7ec:	91 50       	subi	r25, 0x01	; 1
     7ee:	20 40       	sbci	r18, 0x00	; 0
     7f0:	80 40       	sbci	r24, 0x00	; 0
     7f2:	e1 f7       	brne	.-8      	; 0x7ec <main+0xc4>
     7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <main+0xce>
     7f6:	00 00       	nop
     7f8:	f0 cf       	rjmp	.-32     	; 0x7da <main+0xb2>
     7fa:	e1 2c       	mov	r14, r1
			_delay_ms(2000);		//every two seconds.
			
		}	
	}
	
	CAN_RXInit(5, 0, ADMINmsk, ADMIN );				//set mob up for listening to admin messages
     7fc:	f1 2c       	mov	r15, r1
     7fe:	00 e0       	ldi	r16, 0x00	; 0
     800:	10 e1       	ldi	r17, 0x10	; 16
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	40 e0       	ldi	r20, 0x00	; 0
     808:	50 e1       	ldi	r21, 0x10	; 16
     80a:	60 e0       	ldi	r22, 0x00	; 0
	cell cells[8];					//create primary cell array. this will hold all configuration and collected data on the cells.
    Cells_init(cells);
     80c:	85 e0       	ldi	r24, 0x05	; 5
     80e:	20 d2       	rcall	.+1088   	; 0xc50 <CAN_RXInit>
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
	CellBalanceMode = 0;
     814:	68 dc       	rcall	.-1840   	; 0xe6 <Cells_init>
	//uint16_t x = 0;
	//double temp = 0.00;
	Wake_Set();
     816:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <CellBalanceMode>
	while(WAKE_IN_PIN);
     81a:	79 df       	rcall	.-270    	; 0x70e <Wake_Set>
	Wake_Unset();
     81c:	30 99       	sbic	0x06, 0	; 6
	PowerDown();
     81e:	fe cf       	rjmp	.-4      	; 0x81c <main+0xf4>
     820:	78 df       	rcall	.-272    	; 0x712 <Wake_Unset>
			//LED_on();
		}
		else
		{
			_delay_ms(200);
			CANPAGE = (4 << 4);
     822:	79 df       	rcall	.-270    	; 0x716 <PowerDown>
		LED_on();
     824:	90 e4       	ldi	r25, 0x40	; 64
     826:	d9 2e       	mov	r13, r25
     828:	17 dd       	rcall	.-1490   	; 0x258 <LED_on>
     82a:	8f e1       	ldi	r24, 0x1F	; 31
     82c:	9e e4       	ldi	r25, 0x4E	; 78
     82e:	01 97       	sbiw	r24, 0x01	; 1
		CellBalanceMode = 0;		//after one balance process, ensure that balancing is turned off. this is to ensure that if no contact is received from the AMU, things won't blow up
     830:	f1 f7       	brne	.-4      	; 0x82e <main+0x106>
		Balance_off();
     832:	00 c0       	rjmp	.+0      	; 0x834 <main+0x10c>
		Read_all_voltages(cells);	//Reads all voltages, 3.7ms
     834:	00 00       	nop
     836:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <CellBalanceMode>
		if(!(TX_cellVoltage(cells)))LED_flash(20); 
     83a:	07 df       	rcall	.-498    	; 0x64a <Balance_off>
     83c:	ce 01       	movw	r24, r28
     83e:	01 96       	adiw	r24, 0x01	; 1
     840:	56 dd       	rcall	.-1364   	; 0x2ee <Read_all_voltages>
     842:	ce 01       	movw	r24, r28
     844:	01 96       	adiw	r24, 0x01	; 1
		Read_all_temps(cells);
     846:	68 dd       	rcall	.-1328   	; 0x318 <TX_cellVoltage>
     848:	81 11       	cpse	r24, r1
     84a:	02 c0       	rjmp	.+4      	; 0x850 <main+0x128>
     84c:	84 e1       	ldi	r24, 0x14	; 20
		if(!(TX_cellTemps(cells)))LED_flash(20);
     84e:	e8 dc       	rcall	.-1584   	; 0x220 <LED_flash>
     850:	ce 01       	movw	r24, r28
     852:	01 96       	adiw	r24, 0x01	; 1
     854:	45 de       	rcall	.-886    	; 0x4e0 <Read_all_temps>
     856:	ce 01       	movw	r24, r28
     858:	01 96       	adiw	r24, 0x01	; 1
     85a:	57 de       	rcall	.-850    	; 0x50a <TX_cellTemps>
     85c:	81 11       	cpse	r24, r1
		Wake_Set();
     85e:	02 c0       	rjmp	.+4      	; 0x864 <main+0x13c>
     860:	84 e1       	ldi	r24, 0x14	; 20
		if(CellBalanceMode)
     862:	de dc       	rcall	.-1604   	; 0x220 <LED_flash>
     864:	54 df       	rcall	.-344    	; 0x70e <Wake_Set>
     866:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <CellBalanceMode>
			LED_off();
     86a:	88 23       	and	r24, r24
     86c:	39 f0       	breq	.+14     	; 0x87c <main+0x154>
			Balance_init(cells);
     86e:	f7 dc       	rcall	.-1554   	; 0x25e <LED_off>
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	f6 de       	rcall	.-532    	; 0x662 <Balance_init>
			Balance_on();
     876:	e1 de       	rcall	.-574    	; 0x63a <Balance_on>
			LED_flash(50);
     878:	82 e3       	ldi	r24, 0x32	; 50
     87a:	d2 dc       	rcall	.-1628   	; 0x220 <LED_flash>
     87c:	30 99       	sbic	0x06, 0	; 6
		if(!(WAKE_IN_PIN))
     87e:	1c c0       	rjmp	.+56     	; 0x8b8 <main+0x190>
     880:	ee dc       	rcall	.-1572   	; 0x25e <LED_off>
			LED_off();
     882:	8f e9       	ldi	r24, 0x9F	; 159
     884:	9f e0       	ldi	r25, 0x0F	; 15
     886:	01 97       	sbiw	r24, 0x01	; 1
     888:	f1 f7       	brne	.-4      	; 0x886 <main+0x15e>
     88a:	00 c0       	rjmp	.+0      	; 0x88c <main+0x164>
     88c:	00 00       	nop
     88e:	41 df       	rcall	.-382    	; 0x712 <Wake_Unset>
     890:	42 df       	rcall	.-380    	; 0x716 <PowerDown>
			Wake_Unset();
     892:	d0 92 ed 00 	sts	0x00ED, r13	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			PowerDown();
     896:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
			CANSTMOB &= ~(1 << RXOK);	//unset the RXOK bit to clear the interrupt.
		}
		CANPAGE = (4 << 4);
     89a:	8f 7d       	andi	r24, 0xDF	; 223
     89c:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		CANSTMOB &= ~(1 << RXOK);	//unset the RXOK bit to clear the interrupt.
     8a0:	e1 2c       	mov	r14, r1
     8a2:	f1 2c       	mov	r15, r1
     8a4:	00 e0       	ldi	r16, 0x00	; 0
     8a6:	18 e0       	ldi	r17, 0x08	; 8
		CAN_RXInit(4,0,AMUmsk, AMU);	//set mob up for listening to the AMU
     8a8:	20 e0       	ldi	r18, 0x00	; 0
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	40 e0       	ldi	r20, 0x00	; 0
     8ae:	58 e0       	ldi	r21, 0x08	; 8
     8b0:	60 e0       	ldi	r22, 0x00	; 0
     8b2:	84 e0       	ldi	r24, 0x04	; 4
     8b4:	cd d1       	rcall	.+922    	; 0xc50 <CAN_RXInit>
     8b6:	b8 cf       	rjmp	.-144    	; 0x828 <main+0x100>
     8b8:	9f ef       	ldi	r25, 0xFF	; 255
     8ba:	23 ec       	ldi	r18, 0xC3	; 195
     8bc:	89 e0       	ldi	r24, 0x09	; 9
     8be:	91 50       	subi	r25, 0x01	; 1
		LED_on();
     8c0:	20 40       	sbci	r18, 0x00	; 0
     8c2:	80 40       	sbci	r24, 0x00	; 0
     8c4:	e1 f7       	brne	.-8      	; 0x8be <main+0x196>
     8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <main+0x1a0>
     8c8:	00 00       	nop
     8ca:	d0 92 ed 00 	sts	0x00ED, r13	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     8ce:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     8d2:	8f 7d       	andi	r24, 0xDF	; 223
			CANPAGE = (4 << 4);
     8d4:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
			CANSTMOB &= ~(1 << RXOK);	//unset the RXOK bit to clear the interrupt.
     8d8:	dc cf       	rjmp	.-72     	; 0x892 <main+0x16a>

000008da <__vector_10>:
     8da:	8f 93       	push	r24
     8dc:	82 e0       	ldi	r24, 0x02	; 2
     8de:	83 bf       	out	0x33, r24	; 51
     8e0:	8f 91       	pop	r24
     8e2:	18 95       	reti

000008e4 <__vector_18>:
{
	SMCR = (0<<SM2)|(0<<SM1)|(1<<SM0)|(0<<SE);		//disable the mode, and disable the enable bit.
}

ISR(CAN_INT_vect)
{
     8e4:	1f 92       	push	r1
     8e6:	0f 92       	push	r0
     8e8:	0f b6       	in	r0, 0x3f	; 63
     8ea:	0f 92       	push	r0
     8ec:	11 24       	eor	r1, r1
     8ee:	ef 92       	push	r14
     8f0:	ff 92       	push	r15
     8f2:	0f 93       	push	r16
     8f4:	1f 93       	push	r17
     8f6:	2f 93       	push	r18
     8f8:	3f 93       	push	r19
     8fa:	4f 93       	push	r20
     8fc:	5f 93       	push	r21
     8fe:	6f 93       	push	r22
     900:	7f 93       	push	r23
     902:	8f 93       	push	r24
     904:	9f 93       	push	r25
     906:	af 93       	push	r26
     908:	bf 93       	push	r27
     90a:	ef 93       	push	r30
     90c:	ff 93       	push	r31
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	00 d0       	rcall	.+0      	; 0x914 <__vector_18+0x30>
     914:	cd b7       	in	r28, 0x3d	; 61
     916:	de b7       	in	r29, 0x3e	; 62
	//uint8_t authority;
	int8_t mob;	
	
	if((CANSIT2 & (1 << SIT4)))	//we received a CAN message on mob 5, which is set up to receive exclusively from the AMU.
     918:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     91c:	84 ff       	sbrs	r24, 4
     91e:	54 c0       	rjmp	.+168    	; 0x9c8 <__vector_18+0xe4>
	{
		
		CANPAGE = (4 << 4);			//set the canpage to the receiver MOB
     920:	80 e4       	ldi	r24, 0x40	; 64
     922:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if((CANIDT4 >> 3) == AUDIT_REQUEST && !registered )	//if the received ID has packet type audit request, and we are not already registered, we will send a registration request.
     926:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     92a:	86 95       	lsr	r24
     92c:	86 95       	lsr	r24
     92e:	86 95       	lsr	r24
     930:	81 31       	cpi	r24, 0x11	; 17
     932:	09 f0       	breq	.+2      	; 0x936 <__vector_18+0x52>
     934:	6b c0       	rjmp	.+214    	; 0xa0c <__vector_18+0x128>
     936:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <registered>
     93a:	81 11       	cpse	r24, r1
     93c:	67 c0       	rjmp	.+206    	; 0xa0c <__vector_18+0x128>
		{
			mob = CAN_findFreeTXMOB();
     93e:	35 d2       	rcall	.+1130   	; 0xdaa <CAN_findFreeTXMOB>
			AMUID =  ((CANIDT2 >> 5) & 0b00000111);	//last 5 bits of CANIDT3 contain the lower 5 bits of the sender ID
     940:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     944:	92 95       	swap	r25
     946:	96 95       	lsr	r25
     948:	97 70       	andi	r25, 0x07	; 7
     94a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <AMUID>
			AMUID |= ((CANIDT1 << 3) & 0b11111000);	//first 3 bits of CANIDT2 contain the last 3 bits of the sender ID
     94e:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     952:	48 e0       	ldi	r20, 0x08	; 8
     954:	24 9f       	mul	r18, r20
     956:	90 01       	movw	r18, r0
     958:	11 24       	eor	r1, r1
     95a:	92 2b       	or	r25, r18
     95c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <AMUID>
			uint8_t data[2] = {(fw_version>>8) & 0xFF, fw_version & 0xFF};
     960:	20 91 51 02 	lds	r18, 0x0251	; 0x800251 <fw_version>
     964:	30 91 52 02 	lds	r19, 0x0252	; 0x800252 <fw_version+0x1>
     968:	32 27       	eor	r19, r18
     96a:	23 27       	eor	r18, r19
     96c:	32 27       	eor	r19, r18
     96e:	3a 83       	std	Y+2, r19	; 0x02
     970:	29 83       	std	Y+1, r18	; 0x01
			if(mob>=0)CAN_TXMOB(mob, 2, data, ((uint32_t)deviceID<<18)|((uint32_t)AMUID<<8)|AUDIT_RESPONSE, 0); //transmit registration and do not wait for finish	
     972:	87 fd       	sbrc	r24, 7
     974:	1e c0       	rjmp	.+60     	; 0x9b2 <__vector_18+0xce>
     976:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <deviceID>
     97a:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <deviceID+0x1>
     97e:	8a 01       	movw	r16, r20
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	62 e1       	ldi	r22, 0x12	; 18
     986:	00 0f       	add	r16, r16
     988:	11 1f       	adc	r17, r17
     98a:	22 1f       	adc	r18, r18
     98c:	33 1f       	adc	r19, r19
     98e:	6a 95       	dec	r22
     990:	d1 f7       	brne	.-12     	; 0x986 <__vector_18+0xa2>
     992:	54 2f       	mov	r21, r20
     994:	44 27       	eor	r20, r20
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	60 e0       	ldi	r22, 0x00	; 0
     99a:	04 2b       	or	r16, r20
     99c:	15 2b       	or	r17, r21
     99e:	26 2b       	or	r18, r22
     9a0:	37 2b       	or	r19, r23
     9a2:	19 2b       	or	r17, r25
     9a4:	03 61       	ori	r16, 0x13	; 19
     9a6:	e1 2c       	mov	r14, r1
     9a8:	ae 01       	movw	r20, r28
     9aa:	4f 5f       	subi	r20, 0xFF	; 255
     9ac:	5f 4f       	sbci	r21, 0xFF	; 255
     9ae:	62 e0       	ldi	r22, 0x02	; 2
     9b0:	a9 d1       	rcall	.+850    	; 0xd04 <CAN_TXMOB>
		}
		else if((CANIDT4 >> 3)== BALANCE_OFF )
		{
			CellBalanceMode = 0;
		}
		CAN_RXInit(4,0,AMUmsk, AMU);	//set mob up for listening to the AMU
     9b2:	e1 2c       	mov	r14, r1
     9b4:	f1 2c       	mov	r15, r1
     9b6:	00 e0       	ldi	r16, 0x00	; 0
     9b8:	18 e0       	ldi	r17, 0x08	; 8
     9ba:	20 e0       	ldi	r18, 0x00	; 0
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	40 e0       	ldi	r20, 0x00	; 0
     9c0:	58 e0       	ldi	r21, 0x08	; 8
     9c2:	60 e0       	ldi	r22, 0x00	; 0
     9c4:	84 e0       	ldi	r24, 0x04	; 4
     9c6:	44 d1       	rcall	.+648    	; 0xc50 <CAN_RXInit>
	}
	CANPAGE = (4 << 4);
     9c8:	80 e4       	ldi	r24, 0x40	; 64
     9ca:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	CANSTMOB &= ~(1 << RXOK);	//unset the RXOK bit to clear the interrupt.
     9ce:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     9d2:	8f 7d       	andi	r24, 0xDF	; 223
     9d4:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	LED_off();
     9d8:	42 dc       	rcall	.-1916   	; 0x25e <LED_off>
}
     9da:	0f 90       	pop	r0
     9dc:	0f 90       	pop	r0
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	ff 91       	pop	r31
     9e4:	ef 91       	pop	r30
     9e6:	bf 91       	pop	r27
     9e8:	af 91       	pop	r26
     9ea:	9f 91       	pop	r25
     9ec:	8f 91       	pop	r24
     9ee:	7f 91       	pop	r23
     9f0:	6f 91       	pop	r22
     9f2:	5f 91       	pop	r21
     9f4:	4f 91       	pop	r20
     9f6:	3f 91       	pop	r19
     9f8:	2f 91       	pop	r18
     9fa:	1f 91       	pop	r17
     9fc:	0f 91       	pop	r16
     9fe:	ff 90       	pop	r15
     a00:	ef 90       	pop	r14
     a02:	0f 90       	pop	r0
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	0f 90       	pop	r0
     a08:	1f 90       	pop	r1
     a0a:	18 95       	reti
		else if((CANIDT4 >> 3)== READ_RECEIPT && !registered )
     a0c:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     a10:	86 95       	lsr	r24
     a12:	86 95       	lsr	r24
     a14:	86 95       	lsr	r24
     a16:	82 31       	cpi	r24, 0x12	; 18
     a18:	49 f4       	brne	.+18     	; 0xa2c <__vector_18+0x148>
     a1a:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <registered>
     a1e:	81 11       	cpse	r24, r1
			Wake_Set();
     a20:	05 c0       	rjmp	.+10     	; 0xa2c <__vector_18+0x148>
     a22:	75 de       	rcall	.-790    	; 0x70e <Wake_Set>
			registered = 1;
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <registered>
     a2a:	c3 cf       	rjmp	.-122    	; 0x9b2 <__vector_18+0xce>
		else if((CANIDT4 >> 3)== BALANCE_ON && (CANCDMOB & 0b1111) == BALANCE_NPACKETS)
     a2c:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     a30:	86 95       	lsr	r24
     a32:	86 95       	lsr	r24
     a34:	86 95       	lsr	r24
     a36:	84 31       	cpi	r24, 0x14	; 20
     a38:	09 f0       	breq	.+2      	; 0xa3c <__vector_18+0x158>
     a3a:	47 c0       	rjmp	.+142    	; 0xaca <__vector_18+0x1e6>
     a3c:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     a40:	8f 70       	andi	r24, 0x0F	; 15
     a42:	85 30       	cpi	r24, 0x05	; 5
     a44:	09 f0       	breq	.+2      	; 0xa48 <__vector_18+0x164>
     a46:	41 c0       	rjmp	.+130    	; 0xaca <__vector_18+0x1e6>
			for(uint8_t i = 0; i < BALANCE_NPACKETS; i++)
     a48:	80 e0       	ldi	r24, 0x00	; 0
				switch(i)
     a4a:	82 30       	cpi	r24, 0x02	; 2
     a4c:	a1 f1       	breq	.+104    	; 0xab6 <__vector_18+0x1d2>
     a4e:	f0 f4       	brcc	.+60     	; 0xa8c <__vector_18+0x1a8>
     a50:	81 30       	cpi	r24, 0x01	; 1
     a52:	29 f1       	breq	.+74     	; 0xa9e <__vector_18+0x1ba>
						BALANCE_TARGET_VOLTAGE = (uint16_t)(CANMSG<<8);		//CAN byte 1
     a54:	90 91 fa 00 	lds	r25, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     a58:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <BALANCE_TARGET_VOLTAGE>
     a5c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <BALANCE_TARGET_VOLTAGE+0x1>
			for(uint8_t i = 0; i < BALANCE_NPACKETS; i++)
     a60:	8f 5f       	subi	r24, 0xFF	; 255
     a62:	85 30       	cpi	r24, 0x05	; 5
     a64:	91 f7       	brne	.-28     	; 0xa4a <__vector_18+0x166>
			if(BALANCE_TARGET_VOLTAGE > 3200 && BALANCE_TARGET_VOLTAGE < 4200 && BALANCE_DUTY_CYCLE < 50) CellBalanceMode = 1;		//only if the packets we have received are valid, will we turn balancing on
     a66:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <BALANCE_TARGET_VOLTAGE>
     a6a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <BALANCE_TARGET_VOLTAGE+0x1>
     a6e:	81 58       	subi	r24, 0x81	; 129
     a70:	9c 40       	sbci	r25, 0x0C	; 12
     a72:	87 3e       	cpi	r24, 0xE7	; 231
     a74:	93 40       	sbci	r25, 0x03	; 3
     a76:	08 f0       	brcs	.+2      	; 0xa7a <__vector_18+0x196>
     a78:	9c cf       	rjmp	.-200    	; 0x9b2 <__vector_18+0xce>
     a7a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <BALANCE_DUTY_CYCLE>
     a7e:	82 33       	cpi	r24, 0x32	; 50
     a80:	08 f0       	brcs	.+2      	; 0xa84 <__vector_18+0x1a0>
     a82:	97 cf       	rjmp	.-210    	; 0x9b2 <__vector_18+0xce>
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <CellBalanceMode>
     a8a:	93 cf       	rjmp	.-218    	; 0x9b2 <__vector_18+0xce>
     a8c:	83 30       	cpi	r24, 0x03	; 3
     a8e:	c1 f0       	breq	.+48     	; 0xac0 <__vector_18+0x1dc>
     a90:	84 30       	cpi	r24, 0x04	; 4
     a92:	01 f7       	brne	.-64     	; 0xa54 <__vector_18+0x170>
						BALANCE_RESERVED2 = CANMSG;							//CAN byte 5
     a94:	90 91 fa 00 	lds	r25, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     a98:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <__data_end>
						break;
     a9c:	e1 cf       	rjmp	.-62     	; 0xa60 <__vector_18+0x17c>
						BALANCE_TARGET_VOLTAGE |= CANMSG;					//CAN byte 2
     a9e:	90 91 fa 00 	lds	r25, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     aa2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <BALANCE_TARGET_VOLTAGE>
     aa6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <BALANCE_TARGET_VOLTAGE+0x1>
     aaa:	29 2b       	or	r18, r25
     aac:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <BALANCE_TARGET_VOLTAGE+0x1>
     ab0:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <BALANCE_TARGET_VOLTAGE>
						break;
     ab4:	d5 cf       	rjmp	.-86     	; 0xa60 <__vector_18+0x17c>
						BALANCE_DUTY_CYCLE = CANMSG;						//CAN byte 3
     ab6:	90 91 fa 00 	lds	r25, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     aba:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <BALANCE_DUTY_CYCLE>
						break;
     abe:	d0 cf       	rjmp	.-96     	; 0xa60 <__vector_18+0x17c>
						BALANCE_RESERVED1 = CANMSG;							//CAN byte 4
     ac0:	90 91 fa 00 	lds	r25, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     ac4:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <BALANCE_RESERVED1>
						break;
     ac8:	cb cf       	rjmp	.-106    	; 0xa60 <__vector_18+0x17c>
		else if((CANIDT4 >> 3)== BALANCE_OFF )
     aca:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     ace:	86 95       	lsr	r24
     ad0:	86 95       	lsr	r24
     ad2:	86 95       	lsr	r24
     ad4:	85 31       	cpi	r24, 0x15	; 21
     ad6:	09 f0       	breq	.+2      	; 0xada <__vector_18+0x1f6>
     ad8:	6c cf       	rjmp	.-296    	; 0x9b2 <__vector_18+0xce>
			CellBalanceMode = 0;
     ada:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <CellBalanceMode>
     ade:	69 cf       	rjmp	.-302    	; 0x9b2 <__vector_18+0xce>

00000ae0 <__vector_15>:

ISR(TIMER0_COMPA_vect)
{
     ae0:	1f 92       	push	r1
     ae2:	0f 92       	push	r0
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	0f 92       	push	r0
     ae8:	11 24       	eor	r1, r1
     aea:	2f 93       	push	r18
     aec:	3f 93       	push	r19
     aee:	4f 93       	push	r20
     af0:	5f 93       	push	r21
     af2:	6f 93       	push	r22
     af4:	7f 93       	push	r23
     af6:	8f 93       	push	r24
     af8:	9f 93       	push	r25
     afa:	af 93       	push	r26
     afc:	bf 93       	push	r27
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	ef 93       	push	r30
     b04:	ff 93       	push	r31
	CellBalanceCounter++;
     b06:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <CellBalanceCounter>
     b0a:	8f 5f       	subi	r24, 0xFF	; 255
     b0c:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <CellBalanceCounter>
	if(CellBalanceCounter<BALANCE_DUTY_CYCLE)	//for the beginning of the duty cycle, turn cell balancing on.
     b10:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <CellBalanceCounter>
     b14:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <BALANCE_DUTY_CYCLE>
     b18:	98 17       	cp	r25, r24
     b1a:	08 f0       	brcs	.+2      	; 0xb1e <__vector_15+0x3e>
     b1c:	56 c0       	rjmp	.+172    	; 0xbca <__vector_15+0xea>
	{
		LED_on();
     b1e:	9c db       	rcall	.-2248   	; 0x258 <LED_on>
		PORTB |= (((_cellsToBalance&CELL2)>>2)|((_cellsToBalance&CELL3)>>2)|((_cellsToBalance&CELL5)>>2)|((_cellsToBalance&CELL6)>>2));					//turn on discharge for cells 7..4, if they are specified in _cellsToBalance
     b20:	9e b3       	in	r25, 0x1e	; 30
     b22:	4e b3       	in	r20, 0x1e	; 30
     b24:	2e b3       	in	r18, 0x1e	; 30
     b26:	8e b3       	in	r24, 0x1e	; 30
     b28:	65 b1       	in	r22, 0x05	; 5
     b2a:	92 fb       	bst	r25, 2
     b2c:	99 27       	eor	r25, r25
     b2e:	90 f9       	bld	r25, 0
     b30:	c9 2f       	mov	r28, r25
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	55 95       	asr	r21
     b36:	47 95       	ror	r20
     b38:	55 95       	asr	r21
     b3a:	47 95       	ror	r20
     b3c:	42 70       	andi	r20, 0x02	; 2
     b3e:	55 27       	eor	r21, r21
     b40:	c4 2b       	or	r28, r20
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	35 95       	asr	r19
     b46:	27 95       	ror	r18
     b48:	35 95       	asr	r19
     b4a:	27 95       	ror	r18
     b4c:	28 70       	andi	r18, 0x08	; 8
     b4e:	33 27       	eor	r19, r19
     b50:	c2 2b       	or	r28, r18
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	95 95       	asr	r25
     b56:	87 95       	ror	r24
     b58:	95 95       	asr	r25
     b5a:	87 95       	ror	r24
     b5c:	80 71       	andi	r24, 0x10	; 16
     b5e:	99 27       	eor	r25, r25
     b60:	c8 2b       	or	r28, r24
     b62:	c6 2b       	or	r28, r22
     b64:	c5 b9       	out	0x05, r28	; 5
		PORTC |= (_cellsToBalance&CELL1)|(_cellsToBalance&CELL7);														//turn on discharge for cells 3 and 0, if their corresponding bits are specified in _cellsToBalance
     b66:	8e b3       	in	r24, 0x1e	; 30
     b68:	9e b3       	in	r25, 0x1e	; 30
     b6a:	28 b1       	in	r18, 0x08	; 8
     b6c:	82 70       	andi	r24, 0x02	; 2
     b6e:	90 78       	andi	r25, 0x80	; 128
     b70:	89 2b       	or	r24, r25
     b72:	82 2b       	or	r24, r18
     b74:	88 b9       	out	0x08, r24	; 8
		PORTD |= ((_cellsToBalance&CELL0)<<1)|((_cellsToBalance&CELL4)<<3);									//turn on discharge for cells 2 and 1, if their corresponding bits are on in _cellsToBalance
     b76:	8e b3       	in	r24, 0x1e	; 30
     b78:	2e b3       	in	r18, 0x1e	; 30
     b7a:	4b b1       	in	r20, 0x0b	; 11
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	88 0f       	add	r24, r24
     b80:	99 1f       	adc	r25, r25
     b82:	82 70       	andi	r24, 0x02	; 2
     b84:	99 27       	eor	r25, r25
     b86:	58 e0       	ldi	r21, 0x08	; 8
     b88:	25 9f       	mul	r18, r21
     b8a:	90 01       	movw	r18, r0
     b8c:	11 24       	eor	r1, r1
     b8e:	20 78       	andi	r18, 0x80	; 128
     b90:	33 27       	eor	r19, r19
     b92:	82 2b       	or	r24, r18
     b94:	84 2b       	or	r24, r20
     b96:	8b b9       	out	0x0b, r24	; 11
		PORTB &= ~((CELL2>>2)|(CELL3>>2)|(CELL5>>2)|(CELL6>>2));					//turn off discharge for cells 7..4, if they are specified in _cellsToBalance
		PORTC &= ~((CELL1)|(CELL7));														//turn off discharge for cells 3 and 0, if their corresponding bits are specified in _cellsToBalance
		PORTD &= ~((CELL0<<1)|(CELL4<<3));									//turn off discharge for cells 2 and 1, if their corresponding bits are on in _cellsToBalance
		LED_off();
	}
	if(CellBalanceCounter >= 100)CellBalanceCounter = 0;
     b98:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <CellBalanceCounter>
     b9c:	84 36       	cpi	r24, 0x64	; 100
     b9e:	10 f0       	brcs	.+4      	; 0xba4 <__vector_15+0xc4>
     ba0:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <CellBalanceCounter>
     ba4:	ff 91       	pop	r31
     ba6:	ef 91       	pop	r30
     ba8:	df 91       	pop	r29
     baa:	cf 91       	pop	r28
     bac:	bf 91       	pop	r27
     bae:	af 91       	pop	r26
     bb0:	9f 91       	pop	r25
     bb2:	8f 91       	pop	r24
     bb4:	7f 91       	pop	r23
     bb6:	6f 91       	pop	r22
     bb8:	5f 91       	pop	r21
     bba:	4f 91       	pop	r20
     bbc:	3f 91       	pop	r19
     bbe:	2f 91       	pop	r18
     bc0:	0f 90       	pop	r0
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	0f 90       	pop	r0
     bc6:	1f 90       	pop	r1
     bc8:	18 95       	reti
		PORTB &= ~((CELL2>>2)|(CELL3>>2)|(CELL5>>2)|(CELL6>>2));					//turn off discharge for cells 7..4, if they are specified in _cellsToBalance
     bca:	85 b1       	in	r24, 0x05	; 5
     bcc:	84 7e       	andi	r24, 0xE4	; 228
     bce:	85 b9       	out	0x05, r24	; 5
		PORTC &= ~((CELL1)|(CELL7));														//turn off discharge for cells 3 and 0, if their corresponding bits are specified in _cellsToBalance
     bd0:	88 b1       	in	r24, 0x08	; 8
     bd2:	8d 77       	andi	r24, 0x7D	; 125
     bd4:	88 b9       	out	0x08, r24	; 8
		PORTD &= ~((CELL0<<1)|(CELL4<<3));									//turn off discharge for cells 2 and 1, if their corresponding bits are on in _cellsToBalance
     bd6:	8b b1       	in	r24, 0x0b	; 11
     bd8:	8d 77       	andi	r24, 0x7D	; 125
		LED_off();
     bda:	8b b9       	out	0x0b, r24	; 11
     bdc:	40 db       	rcall	.-2432   	; 0x25e <LED_off>
     bde:	dc cf       	rjmp	.-72     	; 0xb98 <__vector_15+0xb8>

00000be0 <CAN_init>:
}

uint8_t CAN_init()
{
	
	CANGCON = (1 << SWRES);     // Reset the CAN controller hardware and general registers.
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     be6:	80 e0       	ldi	r24, 0x00	; 0
	for(uint8_t mobCount = 0; mobCount <= 5; mobCount++)
	{
		CANPAGE = (mobCount << 4);		//select the message object to modify
     be8:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		CANCDMOB = 0;					//make sure we do not do any actions on this mob.
     bec:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		CANSTMOB = 0;					//make sure no interrupts are set.
     bf0:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		CANIDM1 = 0;
     bf4:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
		CANIDM2 = 0;
     bf8:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
		CANIDM3 = 0;
     bfc:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
		CANIDM4 = 0;					//these registers are used to control the mask which filters incoming messages
     c00:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
     c04:	80 5f       	subi	r24, 0xF0	; 240
	for(uint8_t mobCount = 0; mobCount <= 5; mobCount++)
     c06:	80 36       	cpi	r24, 0x60	; 96
     c08:	79 f7       	brne	.-34     	; 0xbe8 <CAN_init+0x8>
	}
	CANBT1 = 0x0E;		//these registers control speed of communication
     c0a:	8e e0       	ldi	r24, 0x0E	; 14
     c0c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = 0x04;		//currently with these values, it is 250kbps
     c10:	84 e0       	ldi	r24, 0x04	; 4
     c12:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = 0x13;		//with 8 TQ per bit.
     c16:	83 e1       	ldi	r24, 0x13	; 19
     c18:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANIE2 = (1 << IEMOB4)|(1 << IEMOB5);		//enable interrupts on MOB 4 and 5 for receiving
     c1c:	80 e3       	ldi	r24, 0x30	; 48
     c1e:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	CANGIE = (1 << ENRX)|(1 << ENIT);		//enable receive interrupt; enable global CAN interrupt (all interrupts)
     c22:	80 ea       	ldi	r24, 0xA0	; 160
     c24:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	//put other initialisation functions here.

	CANGCON = (1 << ENASTB);    // Enable the CAN.
     c28:	82 e0       	ldi	r24, 0x02	; 2
     c2a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     c2e:	2f ef       	ldi	r18, 0xFF	; 255
     c30:	80 e7       	ldi	r24, 0x70	; 112
     c32:	92 e0       	ldi	r25, 0x02	; 2
     c34:	21 50       	subi	r18, 0x01	; 1
     c36:	80 40       	sbci	r24, 0x00	; 0
     c38:	90 40       	sbci	r25, 0x00	; 0
     c3a:	e1 f7       	brne	.-8      	; 0xc34 <CAN_init+0x54>
     c3c:	00 c0       	rjmp	.+0      	; 0xc3e <CAN_init+0x5e>
     c3e:	00 00       	nop
	_delay_ms(50);
	if(!(CANGSTA & (1<<ENFG)))return 1;
     c40:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     c44:	82 fb       	bst	r24, 2
     c46:	88 27       	eor	r24, r24
     c48:	80 f9       	bld	r24, 0
	return 0;
}
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	89 27       	eor	r24, r25
     c4e:	08 95       	ret

00000c50 <CAN_RXInit>:

void CAN_RXInit(int8_t mob, uint8_t numBytes, uint32_t IDmsk, uint32_t ID)
{
     c50:	ef 92       	push	r14
     c52:	ff 92       	push	r15
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
	CANPAGE = ( mob << 4);		//use the mobth mob for receiving.
     c58:	82 95       	swap	r24
     c5a:	80 7f       	andi	r24, 0xF0	; 240
     c5c:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	//IDEMSK is sent with the CAN packet, we choose to not require that it be set, and instead focus on ID match
	CANIDM4 = (IDmsk<<03) & 0xF8;	//shifts the value sets RTRMSK to zero and IDEMSK to 0
     c60:	82 2f       	mov	r24, r18
     c62:	88 0f       	add	r24, r24
     c64:	88 0f       	add	r24, r24
     c66:	88 0f       	add	r24, r24
     c68:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM3 = (IDmsk>>05) & 0xFF;
     c6c:	da 01       	movw	r26, r20
     c6e:	c9 01       	movw	r24, r18
     c70:	75 e0       	ldi	r23, 0x05	; 5
     c72:	b6 95       	lsr	r27
     c74:	a7 95       	ror	r26
     c76:	97 95       	ror	r25
     c78:	87 95       	ror	r24
     c7a:	7a 95       	dec	r23
     c7c:	d1 f7       	brne	.-12     	; 0xc72 <CAN_RXInit+0x22>
     c7e:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
	CANIDM2 = (IDmsk>>13) & 0xFF;	
     c82:	da 01       	movw	r26, r20
     c84:	c9 01       	movw	r24, r18
     c86:	ed e0       	ldi	r30, 0x0D	; 13
     c88:	b6 95       	lsr	r27
     c8a:	a7 95       	ror	r26
     c8c:	97 95       	ror	r25
     c8e:	87 95       	ror	r24
     c90:	ea 95       	dec	r30
     c92:	d1 f7       	brne	.-12     	; 0xc88 <CAN_RXInit+0x38>
     c94:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = (IDmsk>>21) & 0xFF;
     c98:	f5 e1       	ldi	r31, 0x15	; 21
     c9a:	56 95       	lsr	r21
     c9c:	47 95       	ror	r20
     c9e:	37 95       	ror	r19
     ca0:	27 95       	ror	r18
     ca2:	fa 95       	dec	r31
     ca4:	d1 f7       	brne	.-12     	; 0xc9a <CAN_RXInit+0x4a>
     ca6:	20 93 f7 00 	sts	0x00F7, r18	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	
	CANIDT4 = (ID<<03) & 0xF8;	//shifts the value sets RTRTAG, RB1TAG and RB0TAG to 0
     caa:	8e 2d       	mov	r24, r14
     cac:	88 0f       	add	r24, r24
     cae:	88 0f       	add	r24, r24
     cb0:	88 0f       	add	r24, r24
     cb2:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT3 = (ID>>05) & 0xFF;
     cb6:	d8 01       	movw	r26, r16
     cb8:	c7 01       	movw	r24, r14
     cba:	25 e0       	ldi	r18, 0x05	; 5
     cbc:	b6 95       	lsr	r27
     cbe:	a7 95       	ror	r26
     cc0:	97 95       	ror	r25
     cc2:	87 95       	ror	r24
     cc4:	2a 95       	dec	r18
     cc6:	d1 f7       	brne	.-12     	; 0xcbc <CAN_RXInit+0x6c>
     cc8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	CANIDT2 = (ID>>13) & 0xFF;
     ccc:	d8 01       	movw	r26, r16
     cce:	c7 01       	movw	r24, r14
     cd0:	3d e0       	ldi	r19, 0x0D	; 13
     cd2:	b6 95       	lsr	r27
     cd4:	a7 95       	ror	r26
     cd6:	97 95       	ror	r25
     cd8:	87 95       	ror	r24
     cda:	3a 95       	dec	r19
     cdc:	d1 f7       	brne	.-12     	; 0xcd2 <CAN_RXInit+0x82>
     cde:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (ID>>21) & 0xFF;
     ce2:	45 e1       	ldi	r20, 0x15	; 21
     ce4:	16 95       	lsr	r17
     ce6:	07 95       	ror	r16
     ce8:	f7 94       	ror	r15
     cea:	e7 94       	ror	r14
     cec:	4a 95       	dec	r20
     cee:	d1 f7       	brne	.-12     	; 0xce4 <CAN_RXInit+0x94>
     cf0:	e0 92 f3 00 	sts	0x00F3, r14	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	
	CANCDMOB = (numBytes << DLC0)|(2<<CONMOB0)|(1 << IDE);		//we are expecting only numBytes bytes; also set the mob to receive mode.
     cf4:	60 69       	ori	r22, 0x90	; 144
     cf6:	60 93 ef 00 	sts	0x00EF, r22	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
}
     cfa:	1f 91       	pop	r17
     cfc:	0f 91       	pop	r16
     cfe:	ff 90       	pop	r15
     d00:	ef 90       	pop	r14
     d02:	08 95       	ret

00000d04 <CAN_TXMOB>:

void CAN_TXMOB(int8_t mob, uint8_t numBytes, uint8_t * data, uint32_t ID, uint8_t ms_loop_until_TXOK)
{
     d04:	ef 92       	push	r14
     d06:	0f 93       	push	r16
     d08:	1f 93       	push	r17
	CANPAGE = ( mob << 4);		//use the mobth mob
     d0a:	82 95       	swap	r24
     d0c:	80 7f       	andi	r24, 0xF0	; 240
     d0e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	//IDEMSK is sent with the CAN packet, we choose to not set it, and instead the receiver will focus on ID match
	CANSTMOB &= ~(1<<TXOK);
     d12:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     d16:	8f 7b       	andi	r24, 0xBF	; 191
     d18:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	CANIDM4 = 0;
     d1c:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	
	CANIDT4 = (ID<<03) & 0xF8;	//shifts the value sets RTRTAG, RB1TAG and RB0TAG
     d20:	80 2f       	mov	r24, r16
     d22:	88 0f       	add	r24, r24
     d24:	88 0f       	add	r24, r24
     d26:	88 0f       	add	r24, r24
     d28:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT3 = (ID>>05) & 0xFF;
     d2c:	d9 01       	movw	r26, r18
     d2e:	c8 01       	movw	r24, r16
     d30:	75 e0       	ldi	r23, 0x05	; 5
     d32:	b6 95       	lsr	r27
     d34:	a7 95       	ror	r26
     d36:	97 95       	ror	r25
     d38:	87 95       	ror	r24
     d3a:	7a 95       	dec	r23
     d3c:	d1 f7       	brne	.-12     	; 0xd32 <CAN_TXMOB+0x2e>
     d3e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	CANIDT2 = (ID>>13) & 0xFF;
     d42:	d9 01       	movw	r26, r18
     d44:	c8 01       	movw	r24, r16
     d46:	ed e0       	ldi	r30, 0x0D	; 13
     d48:	b6 95       	lsr	r27
     d4a:	a7 95       	ror	r26
     d4c:	97 95       	ror	r25
     d4e:	87 95       	ror	r24
     d50:	ea 95       	dec	r30
     d52:	d1 f7       	brne	.-12     	; 0xd48 <CAN_TXMOB+0x44>
     d54:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (ID>>21) & 0xFF;
     d58:	f5 e1       	ldi	r31, 0x15	; 21
     d5a:	36 95       	lsr	r19
     d5c:	27 95       	ror	r18
     d5e:	17 95       	ror	r17
     d60:	07 95       	ror	r16
     d62:	fa 95       	dec	r31
     d64:	d1 f7       	brne	.-12     	; 0xd5a <CAN_TXMOB+0x56>
     d66:	00 93 f3 00 	sts	0x00F3, r16	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	for(uint8_t i = 0; i < numBytes; i++)
     d6a:	94 2f       	mov	r25, r20
	CANIDT1 = (ID>>21) & 0xFF;
     d6c:	fa 01       	movw	r30, r20
	for(uint8_t i = 0; i < numBytes; i++)
     d6e:	8e 2f       	mov	r24, r30
     d70:	89 1b       	sub	r24, r25
     d72:	86 17       	cp	r24, r22
     d74:	50 f0       	brcs	.+20     	; 0xd8a <CAN_TXMOB+0x86>
	{
		CANMSG = data[i];
	}
	CANCDMOB = (numBytes << DLC0)|(1<<CONMOB0)|(1 << IDE);		//we are expecting only numBytes bytes; also set the mob to receive mode.
     d76:	60 65       	ori	r22, 0x50	; 80
     d78:	60 93 ef 00 	sts	0x00EF, r22	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	for(uint8_t i = 0; i < ms_loop_until_TXOK; i++)	//loop until specified wait time is up
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	e8 12       	cpse	r14, r24
     d80:	08 c0       	rjmp	.+16     	; 0xd92 <CAN_TXMOB+0x8e>
	{
		if((CANSTMOB & (1 << TXOK)))break;		//check for transmission complete
		_delay_ms(1);								//do nothing for 1 ms
	}
}
     d82:	1f 91       	pop	r17
     d84:	0f 91       	pop	r16
     d86:	ef 90       	pop	r14
     d88:	08 95       	ret
		CANMSG = data[i];
     d8a:	81 91       	ld	r24, Z+
     d8c:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     d90:	ee cf       	rjmp	.-36     	; 0xd6e <CAN_TXMOB+0x6a>
		if((CANSTMOB & (1 << TXOK)))break;		//check for transmission complete
     d92:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     d96:	96 fd       	sbrc	r25, 6
     d98:	f4 cf       	rjmp	.-24     	; 0xd82 <CAN_TXMOB+0x7e>
     d9a:	ef e9       	ldi	r30, 0x9F	; 159
     d9c:	ff e0       	ldi	r31, 0x0F	; 15
     d9e:	31 97       	sbiw	r30, 0x01	; 1
     da0:	f1 f7       	brne	.-4      	; 0xd9e <CAN_TXMOB+0x9a>
     da2:	00 c0       	rjmp	.+0      	; 0xda4 <CAN_TXMOB+0xa0>
     da4:	00 00       	nop
	for(uint8_t i = 0; i < ms_loop_until_TXOK; i++)	//loop until specified wait time is up
     da6:	8f 5f       	subi	r24, 0xFF	; 255
     da8:	ea cf       	rjmp	.-44     	; 0xd7e <CAN_TXMOB+0x7a>

00000daa <CAN_findFreeTXMOB>:

int8_t CAN_findFreeTXMOB()
{
     daa:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i = 0; i < 4; i++) //tx mobs are 0 to 3 (<4)
     dac:	80 e0       	ldi	r24, 0x00	; 0
	{
		CANPAGE = ( i << 4);		//use the mobth mob
     dae:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if((CANSTMOB & ((1<<TXOK)|(1<<BERR)|(1<<SERR)|(1<<FERR)|(1<<CERR)) || !(CANCDMOB & (1<<CONMOB0)))) //if the transmission is complete or the mob has not been setup yet
     db2:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     db6:	2e 75       	andi	r18, 0x5E	; 94
     db8:	49 f4       	brne	.+18     	; 0xdcc <CAN_findFreeTXMOB+0x22>
     dba:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     dbe:	26 ff       	sbrs	r18, 6
     dc0:	05 c0       	rjmp	.+10     	; 0xdcc <CAN_findFreeTXMOB+0x22>
	for(uint8_t i = 0; i < 4; i++) //tx mobs are 0 to 3 (<4)
     dc2:	8f 5f       	subi	r24, 0xFF	; 255
     dc4:	90 5f       	subi	r25, 0xF0	; 240
     dc6:	84 30       	cpi	r24, 0x04	; 4
     dc8:	91 f7       	brne	.-28     	; 0xdae <CAN_findFreeTXMOB+0x4>
		{
			return i;			//send back the free mob
		}
	}
	return -1;		//otherwise, none are free
     dca:	8f ef       	ldi	r24, 0xFF	; 255
     dcc:	08 95       	ret

00000dce <__subsf3>:
     dce:	50 58       	subi	r21, 0x80	; 128

00000dd0 <__addsf3>:
     dd0:	bb 27       	eor	r27, r27
     dd2:	aa 27       	eor	r26, r26
     dd4:	0e d0       	rcall	.+28     	; 0xdf2 <__addsf3x>
     dd6:	e0 c0       	rjmp	.+448    	; 0xf98 <__fp_round>
     dd8:	d1 d0       	rcall	.+418    	; 0xf7c <__fp_pscA>
     dda:	30 f0       	brcs	.+12     	; 0xde8 <__addsf3+0x18>
     ddc:	d6 d0       	rcall	.+428    	; 0xf8a <__fp_pscB>
     dde:	20 f0       	brcs	.+8      	; 0xde8 <__addsf3+0x18>
     de0:	31 f4       	brne	.+12     	; 0xdee <__addsf3+0x1e>
     de2:	9f 3f       	cpi	r25, 0xFF	; 255
     de4:	11 f4       	brne	.+4      	; 0xdea <__addsf3+0x1a>
     de6:	1e f4       	brtc	.+6      	; 0xdee <__addsf3+0x1e>
     de8:	c6 c0       	rjmp	.+396    	; 0xf76 <__fp_nan>
     dea:	0e f4       	brtc	.+2      	; 0xdee <__addsf3+0x1e>
     dec:	e0 95       	com	r30
     dee:	e7 fb       	bst	r30, 7
     df0:	bc c0       	rjmp	.+376    	; 0xf6a <__fp_inf>

00000df2 <__addsf3x>:
     df2:	e9 2f       	mov	r30, r25
     df4:	e2 d0       	rcall	.+452    	; 0xfba <__fp_split3>
     df6:	80 f3       	brcs	.-32     	; 0xdd8 <__addsf3+0x8>
     df8:	ba 17       	cp	r27, r26
     dfa:	62 07       	cpc	r22, r18
     dfc:	73 07       	cpc	r23, r19
     dfe:	84 07       	cpc	r24, r20
     e00:	95 07       	cpc	r25, r21
     e02:	18 f0       	brcs	.+6      	; 0xe0a <__addsf3x+0x18>
     e04:	71 f4       	brne	.+28     	; 0xe22 <__addsf3x+0x30>
     e06:	9e f5       	brtc	.+102    	; 0xe6e <__addsf3x+0x7c>
     e08:	fa c0       	rjmp	.+500    	; 0xffe <__fp_zero>
     e0a:	0e f4       	brtc	.+2      	; 0xe0e <__addsf3x+0x1c>
     e0c:	e0 95       	com	r30
     e0e:	0b 2e       	mov	r0, r27
     e10:	ba 2f       	mov	r27, r26
     e12:	a0 2d       	mov	r26, r0
     e14:	0b 01       	movw	r0, r22
     e16:	b9 01       	movw	r22, r18
     e18:	90 01       	movw	r18, r0
     e1a:	0c 01       	movw	r0, r24
     e1c:	ca 01       	movw	r24, r20
     e1e:	a0 01       	movw	r20, r0
     e20:	11 24       	eor	r1, r1
     e22:	ff 27       	eor	r31, r31
     e24:	59 1b       	sub	r21, r25
     e26:	99 f0       	breq	.+38     	; 0xe4e <__addsf3x+0x5c>
     e28:	59 3f       	cpi	r21, 0xF9	; 249
     e2a:	50 f4       	brcc	.+20     	; 0xe40 <__addsf3x+0x4e>
     e2c:	50 3e       	cpi	r21, 0xE0	; 224
     e2e:	68 f1       	brcs	.+90     	; 0xe8a <__addsf3x+0x98>
     e30:	1a 16       	cp	r1, r26
     e32:	f0 40       	sbci	r31, 0x00	; 0
     e34:	a2 2f       	mov	r26, r18
     e36:	23 2f       	mov	r18, r19
     e38:	34 2f       	mov	r19, r20
     e3a:	44 27       	eor	r20, r20
     e3c:	58 5f       	subi	r21, 0xF8	; 248
     e3e:	f3 cf       	rjmp	.-26     	; 0xe26 <__addsf3x+0x34>
     e40:	46 95       	lsr	r20
     e42:	37 95       	ror	r19
     e44:	27 95       	ror	r18
     e46:	a7 95       	ror	r26
     e48:	f0 40       	sbci	r31, 0x00	; 0
     e4a:	53 95       	inc	r21
     e4c:	c9 f7       	brne	.-14     	; 0xe40 <__addsf3x+0x4e>
     e4e:	7e f4       	brtc	.+30     	; 0xe6e <__addsf3x+0x7c>
     e50:	1f 16       	cp	r1, r31
     e52:	ba 0b       	sbc	r27, r26
     e54:	62 0b       	sbc	r22, r18
     e56:	73 0b       	sbc	r23, r19
     e58:	84 0b       	sbc	r24, r20
     e5a:	ba f0       	brmi	.+46     	; 0xe8a <__addsf3x+0x98>
     e5c:	91 50       	subi	r25, 0x01	; 1
     e5e:	a1 f0       	breq	.+40     	; 0xe88 <__addsf3x+0x96>
     e60:	ff 0f       	add	r31, r31
     e62:	bb 1f       	adc	r27, r27
     e64:	66 1f       	adc	r22, r22
     e66:	77 1f       	adc	r23, r23
     e68:	88 1f       	adc	r24, r24
     e6a:	c2 f7       	brpl	.-16     	; 0xe5c <__addsf3x+0x6a>
     e6c:	0e c0       	rjmp	.+28     	; 0xe8a <__addsf3x+0x98>
     e6e:	ba 0f       	add	r27, r26
     e70:	62 1f       	adc	r22, r18
     e72:	73 1f       	adc	r23, r19
     e74:	84 1f       	adc	r24, r20
     e76:	48 f4       	brcc	.+18     	; 0xe8a <__addsf3x+0x98>
     e78:	87 95       	ror	r24
     e7a:	77 95       	ror	r23
     e7c:	67 95       	ror	r22
     e7e:	b7 95       	ror	r27
     e80:	f7 95       	ror	r31
     e82:	9e 3f       	cpi	r25, 0xFE	; 254
     e84:	08 f0       	brcs	.+2      	; 0xe88 <__addsf3x+0x96>
     e86:	b3 cf       	rjmp	.-154    	; 0xdee <__addsf3+0x1e>
     e88:	93 95       	inc	r25
     e8a:	88 0f       	add	r24, r24
     e8c:	08 f0       	brcs	.+2      	; 0xe90 <__addsf3x+0x9e>
     e8e:	99 27       	eor	r25, r25
     e90:	ee 0f       	add	r30, r30
     e92:	97 95       	ror	r25
     e94:	87 95       	ror	r24
     e96:	08 95       	ret

00000e98 <__fixunssfsi>:
     e98:	98 d0       	rcall	.+304    	; 0xfca <__fp_splitA>
     e9a:	88 f0       	brcs	.+34     	; 0xebe <__fixunssfsi+0x26>
     e9c:	9f 57       	subi	r25, 0x7F	; 127
     e9e:	90 f0       	brcs	.+36     	; 0xec4 <__fixunssfsi+0x2c>
     ea0:	b9 2f       	mov	r27, r25
     ea2:	99 27       	eor	r25, r25
     ea4:	b7 51       	subi	r27, 0x17	; 23
     ea6:	a0 f0       	brcs	.+40     	; 0xed0 <__fixunssfsi+0x38>
     ea8:	d1 f0       	breq	.+52     	; 0xede <__fixunssfsi+0x46>
     eaa:	66 0f       	add	r22, r22
     eac:	77 1f       	adc	r23, r23
     eae:	88 1f       	adc	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	1a f0       	brmi	.+6      	; 0xeba <__fixunssfsi+0x22>
     eb4:	ba 95       	dec	r27
     eb6:	c9 f7       	brne	.-14     	; 0xeaa <__fixunssfsi+0x12>
     eb8:	12 c0       	rjmp	.+36     	; 0xede <__fixunssfsi+0x46>
     eba:	b1 30       	cpi	r27, 0x01	; 1
     ebc:	81 f0       	breq	.+32     	; 0xede <__fixunssfsi+0x46>
     ebe:	9f d0       	rcall	.+318    	; 0xffe <__fp_zero>
     ec0:	b1 e0       	ldi	r27, 0x01	; 1
     ec2:	08 95       	ret
     ec4:	9c c0       	rjmp	.+312    	; 0xffe <__fp_zero>
     ec6:	67 2f       	mov	r22, r23
     ec8:	78 2f       	mov	r23, r24
     eca:	88 27       	eor	r24, r24
     ecc:	b8 5f       	subi	r27, 0xF8	; 248
     ece:	39 f0       	breq	.+14     	; 0xede <__fixunssfsi+0x46>
     ed0:	b9 3f       	cpi	r27, 0xF9	; 249
     ed2:	cc f3       	brlt	.-14     	; 0xec6 <__fixunssfsi+0x2e>
     ed4:	86 95       	lsr	r24
     ed6:	77 95       	ror	r23
     ed8:	67 95       	ror	r22
     eda:	b3 95       	inc	r27
     edc:	d9 f7       	brne	.-10     	; 0xed4 <__fixunssfsi+0x3c>
     ede:	3e f4       	brtc	.+14     	; 0xeee <__fixunssfsi+0x56>
     ee0:	90 95       	com	r25
     ee2:	80 95       	com	r24
     ee4:	70 95       	com	r23
     ee6:	61 95       	neg	r22
     ee8:	7f 4f       	sbci	r23, 0xFF	; 255
     eea:	8f 4f       	sbci	r24, 0xFF	; 255
     eec:	9f 4f       	sbci	r25, 0xFF	; 255
     eee:	08 95       	ret

00000ef0 <__floatunsisf>:
     ef0:	e8 94       	clt
     ef2:	09 c0       	rjmp	.+18     	; 0xf06 <__floatsisf+0x12>

00000ef4 <__floatsisf>:
     ef4:	97 fb       	bst	r25, 7
     ef6:	3e f4       	brtc	.+14     	; 0xf06 <__floatsisf+0x12>
     ef8:	90 95       	com	r25
     efa:	80 95       	com	r24
     efc:	70 95       	com	r23
     efe:	61 95       	neg	r22
     f00:	7f 4f       	sbci	r23, 0xFF	; 255
     f02:	8f 4f       	sbci	r24, 0xFF	; 255
     f04:	9f 4f       	sbci	r25, 0xFF	; 255
     f06:	99 23       	and	r25, r25
     f08:	a9 f0       	breq	.+42     	; 0xf34 <__floatsisf+0x40>
     f0a:	f9 2f       	mov	r31, r25
     f0c:	96 e9       	ldi	r25, 0x96	; 150
     f0e:	bb 27       	eor	r27, r27
     f10:	93 95       	inc	r25
     f12:	f6 95       	lsr	r31
     f14:	87 95       	ror	r24
     f16:	77 95       	ror	r23
     f18:	67 95       	ror	r22
     f1a:	b7 95       	ror	r27
     f1c:	f1 11       	cpse	r31, r1
     f1e:	f8 cf       	rjmp	.-16     	; 0xf10 <__floatsisf+0x1c>
     f20:	fa f4       	brpl	.+62     	; 0xf60 <__floatsisf+0x6c>
     f22:	bb 0f       	add	r27, r27
     f24:	11 f4       	brne	.+4      	; 0xf2a <__floatsisf+0x36>
     f26:	60 ff       	sbrs	r22, 0
     f28:	1b c0       	rjmp	.+54     	; 0xf60 <__floatsisf+0x6c>
     f2a:	6f 5f       	subi	r22, 0xFF	; 255
     f2c:	7f 4f       	sbci	r23, 0xFF	; 255
     f2e:	8f 4f       	sbci	r24, 0xFF	; 255
     f30:	9f 4f       	sbci	r25, 0xFF	; 255
     f32:	16 c0       	rjmp	.+44     	; 0xf60 <__floatsisf+0x6c>
     f34:	88 23       	and	r24, r24
     f36:	11 f0       	breq	.+4      	; 0xf3c <__floatsisf+0x48>
     f38:	96 e9       	ldi	r25, 0x96	; 150
     f3a:	11 c0       	rjmp	.+34     	; 0xf5e <__floatsisf+0x6a>
     f3c:	77 23       	and	r23, r23
     f3e:	21 f0       	breq	.+8      	; 0xf48 <__floatsisf+0x54>
     f40:	9e e8       	ldi	r25, 0x8E	; 142
     f42:	87 2f       	mov	r24, r23
     f44:	76 2f       	mov	r23, r22
     f46:	05 c0       	rjmp	.+10     	; 0xf52 <__floatsisf+0x5e>
     f48:	66 23       	and	r22, r22
     f4a:	71 f0       	breq	.+28     	; 0xf68 <__floatsisf+0x74>
     f4c:	96 e8       	ldi	r25, 0x86	; 134
     f4e:	86 2f       	mov	r24, r22
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	2a f0       	brmi	.+10     	; 0xf60 <__floatsisf+0x6c>
     f56:	9a 95       	dec	r25
     f58:	66 0f       	add	r22, r22
     f5a:	77 1f       	adc	r23, r23
     f5c:	88 1f       	adc	r24, r24
     f5e:	da f7       	brpl	.-10     	; 0xf56 <__floatsisf+0x62>
     f60:	88 0f       	add	r24, r24
     f62:	96 95       	lsr	r25
     f64:	87 95       	ror	r24
     f66:	97 f9       	bld	r25, 7
     f68:	08 95       	ret

00000f6a <__fp_inf>:
     f6a:	97 f9       	bld	r25, 7
     f6c:	9f 67       	ori	r25, 0x7F	; 127
     f6e:	80 e8       	ldi	r24, 0x80	; 128
     f70:	70 e0       	ldi	r23, 0x00	; 0
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	08 95       	ret

00000f76 <__fp_nan>:
     f76:	9f ef       	ldi	r25, 0xFF	; 255
     f78:	80 ec       	ldi	r24, 0xC0	; 192
     f7a:	08 95       	ret

00000f7c <__fp_pscA>:
     f7c:	00 24       	eor	r0, r0
     f7e:	0a 94       	dec	r0
     f80:	16 16       	cp	r1, r22
     f82:	17 06       	cpc	r1, r23
     f84:	18 06       	cpc	r1, r24
     f86:	09 06       	cpc	r0, r25
     f88:	08 95       	ret

00000f8a <__fp_pscB>:
     f8a:	00 24       	eor	r0, r0
     f8c:	0a 94       	dec	r0
     f8e:	12 16       	cp	r1, r18
     f90:	13 06       	cpc	r1, r19
     f92:	14 06       	cpc	r1, r20
     f94:	05 06       	cpc	r0, r21
     f96:	08 95       	ret

00000f98 <__fp_round>:
     f98:	09 2e       	mov	r0, r25
     f9a:	03 94       	inc	r0
     f9c:	00 0c       	add	r0, r0
     f9e:	11 f4       	brne	.+4      	; 0xfa4 <__fp_round+0xc>
     fa0:	88 23       	and	r24, r24
     fa2:	52 f0       	brmi	.+20     	; 0xfb8 <__fp_round+0x20>
     fa4:	bb 0f       	add	r27, r27
     fa6:	40 f4       	brcc	.+16     	; 0xfb8 <__fp_round+0x20>
     fa8:	bf 2b       	or	r27, r31
     faa:	11 f4       	brne	.+4      	; 0xfb0 <__fp_round+0x18>
     fac:	60 ff       	sbrs	r22, 0
     fae:	04 c0       	rjmp	.+8      	; 0xfb8 <__fp_round+0x20>
     fb0:	6f 5f       	subi	r22, 0xFF	; 255
     fb2:	7f 4f       	sbci	r23, 0xFF	; 255
     fb4:	8f 4f       	sbci	r24, 0xFF	; 255
     fb6:	9f 4f       	sbci	r25, 0xFF	; 255
     fb8:	08 95       	ret

00000fba <__fp_split3>:
     fba:	57 fd       	sbrc	r21, 7
     fbc:	90 58       	subi	r25, 0x80	; 128
     fbe:	44 0f       	add	r20, r20
     fc0:	55 1f       	adc	r21, r21
     fc2:	59 f0       	breq	.+22     	; 0xfda <__fp_splitA+0x10>
     fc4:	5f 3f       	cpi	r21, 0xFF	; 255
     fc6:	71 f0       	breq	.+28     	; 0xfe4 <__fp_splitA+0x1a>
     fc8:	47 95       	ror	r20

00000fca <__fp_splitA>:
     fca:	88 0f       	add	r24, r24
     fcc:	97 fb       	bst	r25, 7
     fce:	99 1f       	adc	r25, r25
     fd0:	61 f0       	breq	.+24     	; 0xfea <__fp_splitA+0x20>
     fd2:	9f 3f       	cpi	r25, 0xFF	; 255
     fd4:	79 f0       	breq	.+30     	; 0xff4 <__fp_splitA+0x2a>
     fd6:	87 95       	ror	r24
     fd8:	08 95       	ret
     fda:	12 16       	cp	r1, r18
     fdc:	13 06       	cpc	r1, r19
     fde:	14 06       	cpc	r1, r20
     fe0:	55 1f       	adc	r21, r21
     fe2:	f2 cf       	rjmp	.-28     	; 0xfc8 <__fp_split3+0xe>
     fe4:	46 95       	lsr	r20
     fe6:	f1 df       	rcall	.-30     	; 0xfca <__fp_splitA>
     fe8:	08 c0       	rjmp	.+16     	; 0xffa <__fp_splitA+0x30>
     fea:	16 16       	cp	r1, r22
     fec:	17 06       	cpc	r1, r23
     fee:	18 06       	cpc	r1, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	f1 cf       	rjmp	.-30     	; 0xfd6 <__fp_splitA+0xc>
     ff4:	86 95       	lsr	r24
     ff6:	71 05       	cpc	r23, r1
     ff8:	61 05       	cpc	r22, r1
     ffa:	08 94       	sec
     ffc:	08 95       	ret

00000ffe <__fp_zero>:
     ffe:	e8 94       	clt

00001000 <__fp_szero>:
    1000:	bb 27       	eor	r27, r27
    1002:	66 27       	eor	r22, r22
    1004:	77 27       	eor	r23, r23
    1006:	cb 01       	movw	r24, r22
    1008:	97 f9       	bld	r25, 7
    100a:	08 95       	ret

0000100c <__mulsf3>:
    100c:	0b d0       	rcall	.+22     	; 0x1024 <__mulsf3x>
    100e:	c4 cf       	rjmp	.-120    	; 0xf98 <__fp_round>
    1010:	b5 df       	rcall	.-150    	; 0xf7c <__fp_pscA>
    1012:	28 f0       	brcs	.+10     	; 0x101e <__mulsf3+0x12>
    1014:	ba df       	rcall	.-140    	; 0xf8a <__fp_pscB>
    1016:	18 f0       	brcs	.+6      	; 0x101e <__mulsf3+0x12>
    1018:	95 23       	and	r25, r21
    101a:	09 f0       	breq	.+2      	; 0x101e <__mulsf3+0x12>
    101c:	a6 cf       	rjmp	.-180    	; 0xf6a <__fp_inf>
    101e:	ab cf       	rjmp	.-170    	; 0xf76 <__fp_nan>
    1020:	11 24       	eor	r1, r1
    1022:	ee cf       	rjmp	.-36     	; 0x1000 <__fp_szero>

00001024 <__mulsf3x>:
    1024:	ca df       	rcall	.-108    	; 0xfba <__fp_split3>
    1026:	a0 f3       	brcs	.-24     	; 0x1010 <__mulsf3+0x4>

00001028 <__mulsf3_pse>:
    1028:	95 9f       	mul	r25, r21
    102a:	d1 f3       	breq	.-12     	; 0x1020 <__mulsf3+0x14>
    102c:	95 0f       	add	r25, r21
    102e:	50 e0       	ldi	r21, 0x00	; 0
    1030:	55 1f       	adc	r21, r21
    1032:	62 9f       	mul	r22, r18
    1034:	f0 01       	movw	r30, r0
    1036:	72 9f       	mul	r23, r18
    1038:	bb 27       	eor	r27, r27
    103a:	f0 0d       	add	r31, r0
    103c:	b1 1d       	adc	r27, r1
    103e:	63 9f       	mul	r22, r19
    1040:	aa 27       	eor	r26, r26
    1042:	f0 0d       	add	r31, r0
    1044:	b1 1d       	adc	r27, r1
    1046:	aa 1f       	adc	r26, r26
    1048:	64 9f       	mul	r22, r20
    104a:	66 27       	eor	r22, r22
    104c:	b0 0d       	add	r27, r0
    104e:	a1 1d       	adc	r26, r1
    1050:	66 1f       	adc	r22, r22
    1052:	82 9f       	mul	r24, r18
    1054:	22 27       	eor	r18, r18
    1056:	b0 0d       	add	r27, r0
    1058:	a1 1d       	adc	r26, r1
    105a:	62 1f       	adc	r22, r18
    105c:	73 9f       	mul	r23, r19
    105e:	b0 0d       	add	r27, r0
    1060:	a1 1d       	adc	r26, r1
    1062:	62 1f       	adc	r22, r18
    1064:	83 9f       	mul	r24, r19
    1066:	a0 0d       	add	r26, r0
    1068:	61 1d       	adc	r22, r1
    106a:	22 1f       	adc	r18, r18
    106c:	74 9f       	mul	r23, r20
    106e:	33 27       	eor	r19, r19
    1070:	a0 0d       	add	r26, r0
    1072:	61 1d       	adc	r22, r1
    1074:	23 1f       	adc	r18, r19
    1076:	84 9f       	mul	r24, r20
    1078:	60 0d       	add	r22, r0
    107a:	21 1d       	adc	r18, r1
    107c:	82 2f       	mov	r24, r18
    107e:	76 2f       	mov	r23, r22
    1080:	6a 2f       	mov	r22, r26
    1082:	11 24       	eor	r1, r1
    1084:	9f 57       	subi	r25, 0x7F	; 127
    1086:	50 40       	sbci	r21, 0x00	; 0
    1088:	8a f0       	brmi	.+34     	; 0x10ac <__mulsf3_pse+0x84>
    108a:	e1 f0       	breq	.+56     	; 0x10c4 <__mulsf3_pse+0x9c>
    108c:	88 23       	and	r24, r24
    108e:	4a f0       	brmi	.+18     	; 0x10a2 <__mulsf3_pse+0x7a>
    1090:	ee 0f       	add	r30, r30
    1092:	ff 1f       	adc	r31, r31
    1094:	bb 1f       	adc	r27, r27
    1096:	66 1f       	adc	r22, r22
    1098:	77 1f       	adc	r23, r23
    109a:	88 1f       	adc	r24, r24
    109c:	91 50       	subi	r25, 0x01	; 1
    109e:	50 40       	sbci	r21, 0x00	; 0
    10a0:	a9 f7       	brne	.-22     	; 0x108c <__mulsf3_pse+0x64>
    10a2:	9e 3f       	cpi	r25, 0xFE	; 254
    10a4:	51 05       	cpc	r21, r1
    10a6:	70 f0       	brcs	.+28     	; 0x10c4 <__mulsf3_pse+0x9c>
    10a8:	60 cf       	rjmp	.-320    	; 0xf6a <__fp_inf>
    10aa:	aa cf       	rjmp	.-172    	; 0x1000 <__fp_szero>
    10ac:	5f 3f       	cpi	r21, 0xFF	; 255
    10ae:	ec f3       	brlt	.-6      	; 0x10aa <__mulsf3_pse+0x82>
    10b0:	98 3e       	cpi	r25, 0xE8	; 232
    10b2:	dc f3       	brlt	.-10     	; 0x10aa <__mulsf3_pse+0x82>
    10b4:	86 95       	lsr	r24
    10b6:	77 95       	ror	r23
    10b8:	67 95       	ror	r22
    10ba:	b7 95       	ror	r27
    10bc:	f7 95       	ror	r31
    10be:	e7 95       	ror	r30
    10c0:	9f 5f       	subi	r25, 0xFF	; 255
    10c2:	c1 f7       	brne	.-16     	; 0x10b4 <__mulsf3_pse+0x8c>
    10c4:	fe 2b       	or	r31, r30
    10c6:	88 0f       	add	r24, r24
    10c8:	91 1d       	adc	r25, r1
    10ca:	96 95       	lsr	r25
    10cc:	87 95       	ror	r24
    10ce:	97 f9       	bld	r25, 7
    10d0:	08 95       	ret

000010d2 <__udivmodsi4>:
    10d2:	a1 e2       	ldi	r26, 0x21	; 33
    10d4:	1a 2e       	mov	r1, r26
    10d6:	aa 1b       	sub	r26, r26
    10d8:	bb 1b       	sub	r27, r27
    10da:	fd 01       	movw	r30, r26
    10dc:	0d c0       	rjmp	.+26     	; 0x10f8 <__udivmodsi4_ep>

000010de <__udivmodsi4_loop>:
    10de:	aa 1f       	adc	r26, r26
    10e0:	bb 1f       	adc	r27, r27
    10e2:	ee 1f       	adc	r30, r30
    10e4:	ff 1f       	adc	r31, r31
    10e6:	a2 17       	cp	r26, r18
    10e8:	b3 07       	cpc	r27, r19
    10ea:	e4 07       	cpc	r30, r20
    10ec:	f5 07       	cpc	r31, r21
    10ee:	20 f0       	brcs	.+8      	; 0x10f8 <__udivmodsi4_ep>
    10f0:	a2 1b       	sub	r26, r18
    10f2:	b3 0b       	sbc	r27, r19
    10f4:	e4 0b       	sbc	r30, r20
    10f6:	f5 0b       	sbc	r31, r21

000010f8 <__udivmodsi4_ep>:
    10f8:	66 1f       	adc	r22, r22
    10fa:	77 1f       	adc	r23, r23
    10fc:	88 1f       	adc	r24, r24
    10fe:	99 1f       	adc	r25, r25
    1100:	1a 94       	dec	r1
    1102:	69 f7       	brne	.-38     	; 0x10de <__udivmodsi4_loop>
    1104:	60 95       	com	r22
    1106:	70 95       	com	r23
    1108:	80 95       	com	r24
    110a:	90 95       	com	r25
    110c:	9b 01       	movw	r18, r22
    110e:	ac 01       	movw	r20, r24
    1110:	bd 01       	movw	r22, r26
    1112:	cf 01       	movw	r24, r30
    1114:	08 95       	ret

00001116 <eeprom_read_word>:
    1116:	a8 e1       	ldi	r26, 0x18	; 24
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	42 e0       	ldi	r20, 0x02	; 2
    111c:	50 e0       	ldi	r21, 0x00	; 0
    111e:	05 c0       	rjmp	.+10     	; 0x112a <eeprom_read_blraw>

00001120 <eeprom_write_word>:
    1120:	12 d0       	rcall	.+36     	; 0x1146 <eeprom_write_byte>
    1122:	27 2f       	mov	r18, r23
    1124:	11 c0       	rjmp	.+34     	; 0x1148 <eeprom_write_r18>

00001126 <eeprom_read_block>:
    1126:	dc 01       	movw	r26, r24
    1128:	cb 01       	movw	r24, r22

0000112a <eeprom_read_blraw>:
    112a:	fc 01       	movw	r30, r24
    112c:	f9 99       	sbic	0x1f, 1	; 31
    112e:	fe cf       	rjmp	.-4      	; 0x112c <eeprom_read_blraw+0x2>
    1130:	06 c0       	rjmp	.+12     	; 0x113e <eeprom_read_blraw+0x14>
    1132:	f2 bd       	out	0x22, r31	; 34
    1134:	e1 bd       	out	0x21, r30	; 33
    1136:	f8 9a       	sbi	0x1f, 0	; 31
    1138:	31 96       	adiw	r30, 0x01	; 1
    113a:	00 b4       	in	r0, 0x20	; 32
    113c:	0d 92       	st	X+, r0
    113e:	41 50       	subi	r20, 0x01	; 1
    1140:	50 40       	sbci	r21, 0x00	; 0
    1142:	b8 f7       	brcc	.-18     	; 0x1132 <eeprom_read_blraw+0x8>
    1144:	08 95       	ret

00001146 <eeprom_write_byte>:
    1146:	26 2f       	mov	r18, r22

00001148 <eeprom_write_r18>:
    1148:	f9 99       	sbic	0x1f, 1	; 31
    114a:	fe cf       	rjmp	.-4      	; 0x1148 <eeprom_write_r18>
    114c:	1f ba       	out	0x1f, r1	; 31
    114e:	92 bd       	out	0x22, r25	; 34
    1150:	81 bd       	out	0x21, r24	; 33
    1152:	20 bd       	out	0x20, r18	; 32
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	fa 9a       	sbi	0x1f, 2	; 31
    115a:	f9 9a       	sbi	0x1f, 1	; 31
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	01 96       	adiw	r24, 0x01	; 1
    1160:	08 95       	ret

00001162 <_exit>:
    1162:	f8 94       	cli

00001164 <__stop_program>:
    1164:	ff cf       	rjmp	.-2      	; 0x1164 <__stop_program>
