
QUTMS_AMU_V2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000019a6  00001a3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007a  00800108  00800108  00001a42  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a42  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00001ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000348e  00000000  00000000  00001ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011ca  00000000  00000000  0000515a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017f3  00000000  00000000  00006324  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000798  00000000  00000000  00007b18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c4d  00000000  00000000  000082b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002044  00000000  00000000  00008efd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  0000af41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <__vector_17>
      48:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__vector_18>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__vector_22>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d0 e1       	ldi	r29, 0x10	; 16
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e6 ea       	ldi	r30, 0xA6	; 166
      90:	f9 e1       	ldi	r31, 0x19	; 25
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a8 30       	cpi	r26, 0x08	; 8
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	a8 e0       	ldi	r26, 0x08	; 8
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a2 38       	cpi	r26, 0x82	; 130
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 8b 06 	call	0xd16	; 0xd16 <main>
      b2:	0c 94 d1 0c 	jmp	0x19a2	; 0x19a2 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <CAN_init>:
	if(mob>=0)CAN_TXMOB(mob, 2, tData, 0, 20); //transmit registration and do not wait for finish
	return mob;
}

uint8_t CAN_init()
{
      ba:	ef 92       	push	r14
      bc:	ff 92       	push	r15
      be:	0f 93       	push	r16
      c0:	1f 93       	push	r17
      c2:	cf 93       	push	r28
      c4:	df 93       	push	r29
	
	CANGCON = (1 << SWRES);     // Reset the CAN controller hardware and general registers.
      c6:	81 e0       	ldi	r24, 0x01	; 1
      c8:	80 93 d8 00 	sts	0x00D8, r24
	for(uint8_t mobCount = 0; mobCount <= 5; mobCount++)
      cc:	80 e0       	ldi	r24, 0x00	; 0
	{
		CANPAGE = (mobCount << 4);		//select the message object to modify
      ce:	0d ee       	ldi	r16, 0xED	; 237
      d0:	10 e0       	ldi	r17, 0x00	; 0
		CANCDMOB = 0;					//make sure we do not do any actions on this mob.
      d2:	6f ee       	ldi	r22, 0xEF	; 239
      d4:	70 e0       	ldi	r23, 0x00	; 0
		CANSTMOB = 0;					//make sure no interrupts are set.
      d6:	4e ee       	ldi	r20, 0xEE	; 238
      d8:	50 e0       	ldi	r21, 0x00	; 0
		CANIDM1 = 0;
      da:	27 ef       	ldi	r18, 0xF7	; 247
      dc:	30 e0       	ldi	r19, 0x00	; 0
		CANIDM2 = 0;
      de:	c6 ef       	ldi	r28, 0xF6	; 246
      e0:	d0 e0       	ldi	r29, 0x00	; 0
		CANIDM3 = 0;
      e2:	a5 ef       	ldi	r26, 0xF5	; 245
      e4:	b0 e0       	ldi	r27, 0x00	; 0
		CANIDM4 = 0;					//these registers are used to control the mask which filters incoming messages
      e6:	0f 2e       	mov	r0, r31
      e8:	f4 ef       	ldi	r31, 0xF4	; 244
      ea:	ef 2e       	mov	r14, r31
      ec:	f1 2c       	mov	r15, r1
      ee:	f0 2d       	mov	r31, r0
{
	
	CANGCON = (1 << SWRES);     // Reset the CAN controller hardware and general registers.
	for(uint8_t mobCount = 0; mobCount <= 5; mobCount++)
	{
		CANPAGE = (mobCount << 4);		//select the message object to modify
      f0:	98 2f       	mov	r25, r24
      f2:	92 95       	swap	r25
      f4:	90 7f       	andi	r25, 0xF0	; 240
      f6:	f8 01       	movw	r30, r16
      f8:	90 83       	st	Z, r25
		CANCDMOB = 0;					//make sure we do not do any actions on this mob.
      fa:	fb 01       	movw	r30, r22
      fc:	10 82       	st	Z, r1
		CANSTMOB = 0;					//make sure no interrupts are set.
      fe:	fa 01       	movw	r30, r20
     100:	10 82       	st	Z, r1
		CANIDM1 = 0;
     102:	f9 01       	movw	r30, r18
     104:	10 82       	st	Z, r1
		CANIDM2 = 0;
     106:	18 82       	st	Y, r1
		CANIDM3 = 0;
     108:	1c 92       	st	X, r1
		CANIDM4 = 0;					//these registers are used to control the mask which filters incoming messages
     10a:	f7 01       	movw	r30, r14
     10c:	10 82       	st	Z, r1

uint8_t CAN_init()
{
	
	CANGCON = (1 << SWRES);     // Reset the CAN controller hardware and general registers.
	for(uint8_t mobCount = 0; mobCount <= 5; mobCount++)
     10e:	8f 5f       	subi	r24, 0xFF	; 255
     110:	86 30       	cpi	r24, 0x06	; 6
     112:	71 f7       	brne	.-36     	; 0xf0 <CAN_init+0x36>
		CANIDM1 = 0;
		CANIDM2 = 0;
		CANIDM3 = 0;
		CANIDM4 = 0;					//these registers are used to control the mask which filters incoming messages
	}
	CANBT1 = 0x0E;		//these registers control speed of communication
     114:	8e e0       	ldi	r24, 0x0E	; 14
     116:	80 93 e2 00 	sts	0x00E2, r24
	CANBT2 = 0x04;		//currently with these values, it is 250kbps
     11a:	84 e0       	ldi	r24, 0x04	; 4
     11c:	80 93 e3 00 	sts	0x00E3, r24
	CANBT3 = 0x13;		//with 8 TQ per bit.
     120:	83 e1       	ldi	r24, 0x13	; 19
     122:	80 93 e4 00 	sts	0x00E4, r24

	CANIE2 = (1 << IEMOB4)|(1 << IEMOB5);		//enable interrupts on MOB 4 and 5 for receiving
     126:	80 e3       	ldi	r24, 0x30	; 48
     128:	80 93 de 00 	sts	0x00DE, r24
	CANGIE = (1 << ENRX)|(1 << ENIT);		//enable receive interrupt; enable global CAN interrupt (all interrupts)
     12c:	80 ea       	ldi	r24, 0xA0	; 160
     12e:	80 93 db 00 	sts	0x00DB, r24
	//put other initialisation functions here.

	CANGCON = (1 << ENASTB);    // Enable the CAN.
     132:	82 e0       	ldi	r24, 0x02	; 2
     134:	80 93 d8 00 	sts	0x00D8, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     138:	ff ef       	ldi	r31, 0xFF	; 255
     13a:	20 e7       	ldi	r18, 0x70	; 112
     13c:	82 e0       	ldi	r24, 0x02	; 2
     13e:	f1 50       	subi	r31, 0x01	; 1
     140:	20 40       	sbci	r18, 0x00	; 0
     142:	80 40       	sbci	r24, 0x00	; 0
     144:	e1 f7       	brne	.-8      	; 0x13e <CAN_init+0x84>
     146:	00 c0       	rjmp	.+0      	; 0x148 <CAN_init+0x8e>
     148:	00 00       	nop
	_delay_ms(50);
	if(!(CANGSTA & (1<<ENFG)))return 1;
     14a:	80 91 d9 00 	lds	r24, 0x00D9
     14e:	82 fb       	bst	r24, 2
     150:	88 27       	eor	r24, r24
     152:	80 f9       	bld	r24, 0
	return 0;
}
     154:	91 e0       	ldi	r25, 0x01	; 1
     156:	89 27       	eor	r24, r25
     158:	df 91       	pop	r29
     15a:	cf 91       	pop	r28
     15c:	1f 91       	pop	r17
     15e:	0f 91       	pop	r16
     160:	ff 90       	pop	r15
     162:	ef 90       	pop	r14
     164:	08 95       	ret

00000166 <CAN_RXInit>:

void CAN_RXInit(int8_t mob, uint8_t numBytes, uint32_t IDmsk, uint32_t ID)
{
     166:	ef 92       	push	r14
     168:	ff 92       	push	r15
     16a:	0f 93       	push	r16
     16c:	1f 93       	push	r17
	CANPAGE = ( mob << 4);		//use the mobth mob for receiving.
     16e:	82 95       	swap	r24
     170:	80 7f       	andi	r24, 0xF0	; 240
     172:	80 93 ed 00 	sts	0x00ED, r24
	//IDEMSK is sent with the CAN packet, we choose to not require that it be set, and instead focus on ID match
	CANIDM4 = (IDmsk<<03) & 0xF8;	//shifts the value sets RTRMSK to zero and IDEMSK to 0
     176:	82 2f       	mov	r24, r18
     178:	88 0f       	add	r24, r24
     17a:	88 0f       	add	r24, r24
     17c:	88 0f       	add	r24, r24
     17e:	80 93 f4 00 	sts	0x00F4, r24
	CANIDM3 = (IDmsk>>05) & 0xFF;
     182:	da 01       	movw	r26, r20
     184:	c9 01       	movw	r24, r18
     186:	68 94       	set
     188:	14 f8       	bld	r1, 4
     18a:	b6 95       	lsr	r27
     18c:	a7 95       	ror	r26
     18e:	97 95       	ror	r25
     190:	87 95       	ror	r24
     192:	16 94       	lsr	r1
     194:	d1 f7       	brne	.-12     	; 0x18a <CAN_RXInit+0x24>
     196:	80 93 f5 00 	sts	0x00F5, r24
	CANIDM2 = (IDmsk>>13) & 0xFF;	
     19a:	da 01       	movw	r26, r20
     19c:	c9 01       	movw	r24, r18
     19e:	07 2e       	mov	r0, r23
     1a0:	7d e0       	ldi	r23, 0x0D	; 13
     1a2:	b6 95       	lsr	r27
     1a4:	a7 95       	ror	r26
     1a6:	97 95       	ror	r25
     1a8:	87 95       	ror	r24
     1aa:	7a 95       	dec	r23
     1ac:	d1 f7       	brne	.-12     	; 0x1a2 <CAN_RXInit+0x3c>
     1ae:	70 2d       	mov	r23, r0
     1b0:	80 93 f6 00 	sts	0x00F6, r24
	CANIDM1 = (IDmsk>>21) & 0xFF;
     1b4:	da 01       	movw	r26, r20
     1b6:	c9 01       	movw	r24, r18
     1b8:	07 2e       	mov	r0, r23
     1ba:	75 e1       	ldi	r23, 0x15	; 21
     1bc:	b6 95       	lsr	r27
     1be:	a7 95       	ror	r26
     1c0:	97 95       	ror	r25
     1c2:	87 95       	ror	r24
     1c4:	7a 95       	dec	r23
     1c6:	d1 f7       	brne	.-12     	; 0x1bc <CAN_RXInit+0x56>
     1c8:	70 2d       	mov	r23, r0
     1ca:	80 93 f7 00 	sts	0x00F7, r24
	
	CANIDT4 = (ID<<03) & 0xF8;	//shifts the value sets RTRTAG, RB1TAG and RB0TAG to 0
     1ce:	8e 2d       	mov	r24, r14
     1d0:	88 0f       	add	r24, r24
     1d2:	88 0f       	add	r24, r24
     1d4:	88 0f       	add	r24, r24
     1d6:	80 93 f0 00 	sts	0x00F0, r24
	CANIDT3 = (ID>>05) & 0xFF;
     1da:	d8 01       	movw	r26, r16
     1dc:	c7 01       	movw	r24, r14
     1de:	68 94       	set
     1e0:	14 f8       	bld	r1, 4
     1e2:	b6 95       	lsr	r27
     1e4:	a7 95       	ror	r26
     1e6:	97 95       	ror	r25
     1e8:	87 95       	ror	r24
     1ea:	16 94       	lsr	r1
     1ec:	d1 f7       	brne	.-12     	; 0x1e2 <CAN_RXInit+0x7c>
     1ee:	80 93 f1 00 	sts	0x00F1, r24
	CANIDT2 = (ID>>13) & 0xFF;
     1f2:	d8 01       	movw	r26, r16
     1f4:	c7 01       	movw	r24, r14
     1f6:	07 2e       	mov	r0, r23
     1f8:	7d e0       	ldi	r23, 0x0D	; 13
     1fa:	b6 95       	lsr	r27
     1fc:	a7 95       	ror	r26
     1fe:	97 95       	ror	r25
     200:	87 95       	ror	r24
     202:	7a 95       	dec	r23
     204:	d1 f7       	brne	.-12     	; 0x1fa <CAN_RXInit+0x94>
     206:	70 2d       	mov	r23, r0
     208:	80 93 f2 00 	sts	0x00F2, r24
	CANIDT1 = (ID>>21) & 0xFF;
     20c:	d8 01       	movw	r26, r16
     20e:	c7 01       	movw	r24, r14
     210:	07 2e       	mov	r0, r23
     212:	75 e1       	ldi	r23, 0x15	; 21
     214:	b6 95       	lsr	r27
     216:	a7 95       	ror	r26
     218:	97 95       	ror	r25
     21a:	87 95       	ror	r24
     21c:	7a 95       	dec	r23
     21e:	d1 f7       	brne	.-12     	; 0x214 <CAN_RXInit+0xae>
     220:	70 2d       	mov	r23, r0
     222:	80 93 f3 00 	sts	0x00F3, r24
	
	CANCDMOB = (numBytes << DLC0)|(2<<CONMOB0)|(1 << IDE);		//we are expecting only numBytes bytes; also set the mob to receive mode.
     226:	60 69       	ori	r22, 0x90	; 144
     228:	60 93 ef 00 	sts	0x00EF, r22
}
     22c:	1f 91       	pop	r17
     22e:	0f 91       	pop	r16
     230:	ff 90       	pop	r15
     232:	ef 90       	pop	r14
     234:	08 95       	ret

00000236 <CAN_TXMOB>:

void CAN_TXMOB(int8_t mob, uint8_t numBytes, uint8_t * data, uint32_t ID, uint8_t ms_loop_until_TXOK)
{
     236:	ef 92       	push	r14
     238:	0f 93       	push	r16
     23a:	1f 93       	push	r17
	CANPAGE = ( mob << 4);		//use the mobth mob
     23c:	82 95       	swap	r24
     23e:	80 7f       	andi	r24, 0xF0	; 240
     240:	80 93 ed 00 	sts	0x00ED, r24
	//IDEMSK is sent with the CAN packet, we choose to not set it, and instead the receiver will focus on ID match
	CANSTMOB &= ~(1<<TXOK);
     244:	ee ee       	ldi	r30, 0xEE	; 238
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	8f 7b       	andi	r24, 0xBF	; 191
     24c:	80 83       	st	Z, r24
	CANIDM4 = 0;
     24e:	10 92 f4 00 	sts	0x00F4, r1
	
	CANIDT4 = (ID<<03) & 0xF8;	//shifts the value sets RTRTAG, RB1TAG and RB0TAG
     252:	80 2f       	mov	r24, r16
     254:	88 0f       	add	r24, r24
     256:	88 0f       	add	r24, r24
     258:	88 0f       	add	r24, r24
     25a:	80 93 f0 00 	sts	0x00F0, r24
	CANIDT3 = (ID>>05) & 0xFF;
     25e:	d9 01       	movw	r26, r18
     260:	c8 01       	movw	r24, r16
     262:	68 94       	set
     264:	14 f8       	bld	r1, 4
     266:	b6 95       	lsr	r27
     268:	a7 95       	ror	r26
     26a:	97 95       	ror	r25
     26c:	87 95       	ror	r24
     26e:	16 94       	lsr	r1
     270:	d1 f7       	brne	.-12     	; 0x266 <CAN_TXMOB+0x30>
     272:	80 93 f1 00 	sts	0x00F1, r24
	CANIDT2 = (ID>>13) & 0xFF;
     276:	d9 01       	movw	r26, r18
     278:	c8 01       	movw	r24, r16
     27a:	07 2e       	mov	r0, r23
     27c:	7d e0       	ldi	r23, 0x0D	; 13
     27e:	b6 95       	lsr	r27
     280:	a7 95       	ror	r26
     282:	97 95       	ror	r25
     284:	87 95       	ror	r24
     286:	7a 95       	dec	r23
     288:	d1 f7       	brne	.-12     	; 0x27e <CAN_TXMOB+0x48>
     28a:	70 2d       	mov	r23, r0
     28c:	80 93 f2 00 	sts	0x00F2, r24
	CANIDT1 = (ID>>21) & 0xFF;
     290:	0f 2e       	mov	r0, r31
     292:	f5 e1       	ldi	r31, 0x15	; 21
     294:	36 95       	lsr	r19
     296:	27 95       	ror	r18
     298:	17 95       	ror	r17
     29a:	07 95       	ror	r16
     29c:	fa 95       	dec	r31
     29e:	d1 f7       	brne	.-12     	; 0x294 <CAN_TXMOB+0x5e>
     2a0:	f0 2d       	mov	r31, r0
     2a2:	00 93 f3 00 	sts	0x00F3, r16
	for(uint8_t i = 0; i < numBytes; i++)
     2a6:	66 23       	and	r22, r22
     2a8:	71 f0       	breq	.+28     	; 0x2c6 <CAN_TXMOB+0x90>
     2aa:	fa 01       	movw	r30, r20
     2ac:	8f ef       	ldi	r24, 0xFF	; 255
     2ae:	86 0f       	add	r24, r22
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	01 96       	adiw	r24, 0x01	; 1
     2b4:	48 0f       	add	r20, r24
     2b6:	59 1f       	adc	r21, r25
	{
		CANMSG = data[i];
     2b8:	aa ef       	ldi	r26, 0xFA	; 250
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	81 91       	ld	r24, Z+
     2be:	8c 93       	st	X, r24
	
	CANIDT4 = (ID<<03) & 0xF8;	//shifts the value sets RTRTAG, RB1TAG and RB0TAG
	CANIDT3 = (ID>>05) & 0xFF;
	CANIDT2 = (ID>>13) & 0xFF;
	CANIDT1 = (ID>>21) & 0xFF;
	for(uint8_t i = 0; i < numBytes; i++)
     2c0:	e4 17       	cp	r30, r20
     2c2:	f5 07       	cpc	r31, r21
     2c4:	d9 f7       	brne	.-10     	; 0x2bc <CAN_TXMOB+0x86>
	{
		CANMSG = data[i];
	}
	CANCDMOB = (numBytes << DLC0)|(1<<CONMOB0)|(1 << IDE);		//we are expecting only numBytes bytes; also set the mob to receive mode.
     2c6:	60 65       	ori	r22, 0x50	; 80
     2c8:	60 93 ef 00 	sts	0x00EF, r22

	for(uint8_t i = 0; i < ms_loop_until_TXOK; i++)	//loop until specified wait time is up
     2cc:	ee 20       	and	r14, r14
     2ce:	a1 f0       	breq	.+40     	; 0x2f8 <CAN_TXMOB+0xc2>
	{
		if((CANSTMOB & (1 << TXOK)))break;		//check for transmission complete
     2d0:	80 91 ee 00 	lds	r24, 0x00EE
     2d4:	86 fd       	sbrc	r24, 6
     2d6:	10 c0       	rjmp	.+32     	; 0x2f8 <CAN_TXMOB+0xc2>
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	ee ee       	ldi	r30, 0xEE	; 238
     2dc:	f0 e0       	ldi	r31, 0x00	; 0
     2de:	03 c0       	rjmp	.+6      	; 0x2e6 <CAN_TXMOB+0xb0>
     2e0:	90 81       	ld	r25, Z
     2e2:	96 fd       	sbrc	r25, 6
     2e4:	09 c0       	rjmp	.+18     	; 0x2f8 <CAN_TXMOB+0xc2>
     2e6:	af e9       	ldi	r26, 0x9F	; 159
     2e8:	bf e0       	ldi	r27, 0x0F	; 15
     2ea:	11 97       	sbiw	r26, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <CAN_TXMOB+0xb4>
     2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <CAN_TXMOB+0xba>
     2f0:	00 00       	nop
	{
		CANMSG = data[i];
	}
	CANCDMOB = (numBytes << DLC0)|(1<<CONMOB0)|(1 << IDE);		//we are expecting only numBytes bytes; also set the mob to receive mode.

	for(uint8_t i = 0; i < ms_loop_until_TXOK; i++)	//loop until specified wait time is up
     2f2:	8f 5f       	subi	r24, 0xFF	; 255
     2f4:	8e 11       	cpse	r24, r14
     2f6:	f4 cf       	rjmp	.-24     	; 0x2e0 <CAN_TXMOB+0xaa>
	{
		if((CANSTMOB & (1 << TXOK)))break;		//check for transmission complete
		_delay_ms(1);								//do nothing for 1 ms
	}
}
     2f8:	1f 91       	pop	r17
     2fa:	0f 91       	pop	r16
     2fc:	ef 90       	pop	r14
     2fe:	08 95       	ret

00000300 <CAN_findFreeTXMOB>:

int8_t CAN_findFreeTXMOB()
{
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
	for(uint8_t i = 0; i < 4; i++) //tx mobs are 0 to 3 (<4)
	{
		CANPAGE = ( i << 4);		//use the mobth mob
     304:	10 92 ed 00 	sts	0x00ED, r1
		if((CANSTMOB & ((1<<TXOK)|(1<<BERR)|(1<<SERR)|(1<<FERR)|(1<<CERR))) || !(CANCDMOB & (1<<CONMOB0))) //if the transmission is complete or the mob has not been setup yet
     308:	80 91 ee 00 	lds	r24, 0x00EE
     30c:	8e 75       	andi	r24, 0x5E	; 94
     30e:	b1 f4       	brne	.+44     	; 0x33c <CAN_findFreeTXMOB+0x3c>
     310:	80 91 ef 00 	lds	r24, 0x00EF
     314:	86 ff       	sbrs	r24, 6
     316:	14 c0       	rjmp	.+40     	; 0x340 <CAN_findFreeTXMOB+0x40>
     318:	81 e0       	ldi	r24, 0x01	; 1

int8_t CAN_findFreeTXMOB()
{
	for(uint8_t i = 0; i < 4; i++) //tx mobs are 0 to 3 (<4)
	{
		CANPAGE = ( i << 4);		//use the mobth mob
     31a:	ad ee       	ldi	r26, 0xED	; 237
     31c:	b0 e0       	ldi	r27, 0x00	; 0
		if((CANSTMOB & ((1<<TXOK)|(1<<BERR)|(1<<SERR)|(1<<FERR)|(1<<CERR))) || !(CANCDMOB & (1<<CONMOB0))) //if the transmission is complete or the mob has not been setup yet
     31e:	ee ee       	ldi	r30, 0xEE	; 238
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	cf ee       	ldi	r28, 0xEF	; 239
     324:	d0 e0       	ldi	r29, 0x00	; 0

int8_t CAN_findFreeTXMOB()
{
	for(uint8_t i = 0; i < 4; i++) //tx mobs are 0 to 3 (<4)
	{
		CANPAGE = ( i << 4);		//use the mobth mob
     326:	98 2f       	mov	r25, r24
     328:	92 95       	swap	r25
     32a:	90 7f       	andi	r25, 0xF0	; 240
     32c:	9c 93       	st	X, r25
		if((CANSTMOB & ((1<<TXOK)|(1<<BERR)|(1<<SERR)|(1<<FERR)|(1<<CERR))) || !(CANCDMOB & (1<<CONMOB0))) //if the transmission is complete or the mob has not been setup yet
     32e:	90 81       	ld	r25, Z
     330:	9e 75       	andi	r25, 0x5E	; 94
     332:	61 f4       	brne	.+24     	; 0x34c <CAN_findFreeTXMOB+0x4c>
     334:	98 81       	ld	r25, Y
     336:	96 fd       	sbrc	r25, 6
     338:	05 c0       	rjmp	.+10     	; 0x344 <CAN_findFreeTXMOB+0x44>
     33a:	08 c0       	rjmp	.+16     	; 0x34c <CAN_findFreeTXMOB+0x4c>
	}
}

int8_t CAN_findFreeTXMOB()
{
	for(uint8_t i = 0; i < 4; i++) //tx mobs are 0 to 3 (<4)
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	06 c0       	rjmp	.+12     	; 0x34c <CAN_findFreeTXMOB+0x4c>
     340:	80 e0       	ldi	r24, 0x00	; 0
	{
		CANPAGE = ( i << 4);		//use the mobth mob
		if((CANSTMOB & ((1<<TXOK)|(1<<BERR)|(1<<SERR)|(1<<FERR)|(1<<CERR))) || !(CANCDMOB & (1<<CONMOB0))) //if the transmission is complete or the mob has not been setup yet
		{
			return i;			//send back the free mob
     342:	04 c0       	rjmp	.+8      	; 0x34c <CAN_findFreeTXMOB+0x4c>
	}
}

int8_t CAN_findFreeTXMOB()
{
	for(uint8_t i = 0; i < 4; i++) //tx mobs are 0 to 3 (<4)
     344:	8f 5f       	subi	r24, 0xFF	; 255
     346:	84 30       	cpi	r24, 0x04	; 4
     348:	71 f7       	brne	.-36     	; 0x326 <CAN_findFreeTXMOB+0x26>
		if((CANSTMOB & ((1<<TXOK)|(1<<BERR)|(1<<SERR)|(1<<FERR)|(1<<CERR))) || !(CANCDMOB & (1<<CONMOB0))) //if the transmission is complete or the mob has not been setup yet
		{
			return i;			//send back the free mob
		}
	}
	return -1;		//otherwise, none are free
     34a:	8f ef       	ldi	r24, 0xFF	; 255
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	08 95       	ret

00000352 <AMU_eeprom_read>:
{
	CMURxPacketCount= 0;
	PORTC &= ~(1<<PINC1);

	_delay_ms(1);
	PORTC |= (1<<PINC1);
     352:	f9 99       	sbic	0x1f, 1	; 31
     354:	fe cf       	rjmp	.-4      	; 0x352 <AMU_eeprom_read>
     356:	0e 94 a8 0c 	call	0x1950	; 0x1950 <eeprom_read_word>
     35a:	08 95       	ret

0000035c <AMU_eeprom_write>:
     35c:	f9 99       	sbic	0x1f, 1	; 31
     35e:	fe cf       	rjmp	.-4      	; 0x35c <AMU_eeprom_write>
     360:	0e 94 ae 0c 	call	0x195c	; 0x195c <eeprom_write_word>
     364:	08 95       	ret

00000366 <Parameters_init>:
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	0e 94 a9 01 	call	0x352	; 0x352 <AMU_eeprom_read>
     36e:	90 93 76 01 	sts	0x0176, r25
     372:	80 93 75 01 	sts	0x0175, r24
     376:	82 e0       	ldi	r24, 0x02	; 2
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	0e 94 a9 01 	call	0x352	; 0x352 <AMU_eeprom_read>
     37e:	90 93 78 01 	sts	0x0178, r25
     382:	80 93 77 01 	sts	0x0177, r24
     386:	08 95       	ret

00000388 <PCINT_init>:
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	80 93 68 00 	sts	0x0068, r24
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	8c e2       	ldi	r24, 0x2C	; 44
     392:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
     396:	88 e1       	ldi	r24, 0x18	; 24
     398:	80 93 6a 00 	sts	0x006A, r24
     39c:	08 95       	ret

0000039e <init_cmuData>:
     39e:	ac 01       	movw	r20, r24
     3a0:	4e 5f       	subi	r20, 0xFE	; 254
     3a2:	5f 4f       	sbci	r21, 0xFF	; 255
     3a4:	88 59       	subi	r24, 0x98	; 152
     3a6:	9f 4f       	sbci	r25, 0xFF	; 255
     3a8:	fa 01       	movw	r30, r20
     3aa:	32 97       	sbiw	r30, 0x02	; 2
     3ac:	10 82       	st	Z, r1
     3ae:	31 96       	adiw	r30, 0x01	; 1
     3b0:	10 82       	st	Z, r1
     3b2:	9a 01       	movw	r18, r20
     3b4:	20 5f       	subi	r18, 0xF0	; 240
     3b6:	3f 4f       	sbci	r19, 0xFF	; 255
     3b8:	fa 01       	movw	r30, r20
     3ba:	11 8a       	std	Z+17, r1	; 0x11
     3bc:	10 8a       	std	Z+16, r1	; 0x10
     3be:	11 92       	st	Z+, r1
     3c0:	11 92       	st	Z+, r1
     3c2:	e2 17       	cp	r30, r18
     3c4:	f3 07       	cpc	r31, r19
     3c6:	c9 f7       	brne	.-14     	; 0x3ba <init_cmuData+0x1c>
     3c8:	4e 5d       	subi	r20, 0xDE	; 222
     3ca:	5f 4f       	sbci	r21, 0xFF	; 255
     3cc:	48 17       	cp	r20, r24
     3ce:	59 07       	cpc	r21, r25
     3d0:	59 f7       	brne	.-42     	; 0x3a8 <init_cmuData+0xa>
     3d2:	08 95       	ret

000003d4 <IO_init>:
     3d4:	86 ec       	ldi	r24, 0xC6	; 198
     3d6:	84 b9       	out	0x04, r24	; 4
     3d8:	8b e8       	ldi	r24, 0x8B	; 139
     3da:	8a b9       	out	0x0a, r24	; 10
     3dc:	87 ea       	ldi	r24, 0xA7	; 167
     3de:	87 b9       	out	0x07, r24	; 7
     3e0:	15 b8       	out	0x05, r1	; 5
     3e2:	8b b1       	in	r24, 0x0b	; 11
     3e4:	8a 68       	ori	r24, 0x8A	; 138
     3e6:	8b b9       	out	0x0b, r24	; 11
     3e8:	47 9a       	sbi	0x08, 7	; 8
     3ea:	45 9a       	sbi	0x08, 5	; 8
     3ec:	2f 98       	cbi	0x05, 7	; 5
     3ee:	40 9a       	sbi	0x08, 0	; 8
     3f0:	08 95       	ret

000003f2 <timer_init>:
     3f2:	14 bc       	out	0x24, r1	; 36
     3f4:	85 e0       	ldi	r24, 0x05	; 5
     3f6:	85 bd       	out	0x25, r24	; 37
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	80 93 6e 00 	sts	0x006E, r24
     3fe:	08 95       	ret

00000400 <CMU_send_read_receipt>:
     400:	0f 93       	push	r16
     402:	1f 93       	push	r17
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	1f 92       	push	r1
     40a:	cd b7       	in	r28, 0x3d	; 61
     40c:	de b7       	in	r29, 0x3e	; 62
     40e:	8c 01       	movw	r16, r24
     410:	19 82       	std	Y+1, r1	; 0x01
     412:	0e 94 2b 0a 	call	0x1456	; 0x1456 <MCP2515_findFreeTxBuffer>
     416:	f8 01       	movw	r30, r16
     418:	01 81       	ldd	r16, Z+1	; 0x01
     41a:	10 e0       	ldi	r17, 0x00	; 0
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	32 2f       	mov	r19, r18
     422:	21 2f       	mov	r18, r17
     424:	10 2f       	mov	r17, r16
     426:	00 27       	eor	r16, r16
     428:	02 61       	ori	r16, 0x12	; 18
     42a:	24 60       	ori	r18, 0x04	; 4
     42c:	38 60       	ori	r19, 0x08	; 8
     42e:	ae 01       	movw	r20, r28
     430:	4f 5f       	subi	r20, 0xFF	; 255
     432:	5f 4f       	sbci	r21, 0xFF	; 255
     434:	60 e0       	ldi	r22, 0x00	; 0
     436:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <MCP2515_TX>
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	0f 90       	pop	r0
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	1f 91       	pop	r17
     444:	0f 91       	pop	r16
     446:	08 95       	ret

00000448 <CMU_Wake_set>:
}
void CMU_Wake_set()
{
	CMURxPacketCount= 0;
     448:	10 92 0e 01 	sts	0x010E, r1
	PORTC &= ~(1<<PINC1);
     44c:	41 98       	cbi	0x08, 1	; 8
     44e:	08 95       	ret

00000450 <CMU_Wake_reset>:
}
void CMU_Wake_reset()
{

	PORTC |= (1<<PINC1);
     450:	41 9a       	sbi	0x08, 1	; 8
     452:	08 95       	ret

00000454 <CMU_Register>:
}


uint8_t CMU_Register(CMU * cmu, uint16_t CMU_ID)
{
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
     458:	ec 01       	movw	r28, r24
	for(uint8_t count = 0; count < CMU_COUNT; count++)			//parsing through our cmu array, looking for a free spot, or if we are already registered.
	{

		if(cmu->CMU_ID == 0)			//if the cmu element of the array has not been allocated, or if the cmu is already registered,
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	88 23       	and	r24, r24
     45e:	91 f0       	breq	.+36     	; 0x484 <CMU_Register+0x30>
			cmu->CMU_ID = CMU_ID;								//assign this element to the CMU that sent the reg request.

			while (!CMU_send_read_receipt(cmu));			//keep trying to send, until a tx buffer is free.
			break;
		}
		else if(cmu->CMU_ID == CMU_ID)		//if this function encounters its own ID, it means there is a duplicate ID. 
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	86 17       	cp	r24, r22
     464:	97 07       	cpc	r25, r23
     466:	29 f1       	breq	.+74     	; 0x4b2 <CMU_Register+0x5e>
		{
			return 1;			//return error.
		}
		cmu++;
     468:	fe 01       	movw	r30, r28
     46a:	b2 96       	adiw	r30, 0x22	; 34
uint8_t CMU_Register(CMU * cmu, uint16_t CMU_ID)
{
	for(uint8_t count = 0; count < CMU_COUNT; count++)			//parsing through our cmu array, looking for a free spot, or if we are already registered.
	{

		if(cmu->CMU_ID == 0)			//if the cmu element of the array has not been allocated, or if the cmu is already registered,
     46c:	8b a1       	ldd	r24, Y+35	; 0x23
     46e:	88 23       	and	r24, r24
     470:	41 f0       	breq	.+16     	; 0x482 <CMU_Register+0x2e>
			cmu->CMU_ID = CMU_ID;								//assign this element to the CMU that sent the reg request.

			while (!CMU_send_read_receipt(cmu));			//keep trying to send, until a tx buffer is free.
			break;
		}
		else if(cmu->CMU_ID == CMU_ID)		//if this function encounters its own ID, it means there is a duplicate ID. 
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	86 17       	cp	r24, r22
     476:	97 07       	cpc	r25, r23
     478:	f1 f0       	breq	.+60     	; 0x4b6 <CMU_Register+0x62>
		{
			return 1;			//return error.
		}
		cmu++;
     47a:	b2 96       	adiw	r30, 0x22	; 34
uint8_t CMU_Register(CMU * cmu, uint16_t CMU_ID)
{
	for(uint8_t count = 0; count < CMU_COUNT; count++)			//parsing through our cmu array, looking for a free spot, or if we are already registered.
	{

		if(cmu->CMU_ID == 0)			//if the cmu element of the array has not been allocated, or if the cmu is already registered,
     47c:	81 81       	ldd	r24, Z+1	; 0x01
     47e:	81 11       	cpse	r24, r1
     480:	12 c0       	rjmp	.+36     	; 0x4a6 <CMU_Register+0x52>
	PORTC |= (1<<PINC1);
}


uint8_t CMU_Register(CMU * cmu, uint16_t CMU_ID)
{
     482:	ef 01       	movw	r28, r30
	for(uint8_t count = 0; count < CMU_COUNT; count++)			//parsing through our cmu array, looking for a free spot, or if we are already registered.
	{

		if(cmu->CMU_ID == 0)			//if the cmu element of the array has not been allocated, or if the cmu is already registered,
		{
			if(!CMUAllRegistered)CMUAudit++;		//while it is in it's registration phase, increment the registration counter;
     484:	80 91 0a 01 	lds	r24, 0x010A
     488:	81 11       	cpse	r24, r1
     48a:	05 c0       	rjmp	.+10     	; 0x496 <CMU_Register+0x42>
     48c:	80 91 08 01 	lds	r24, 0x0108
     490:	8f 5f       	subi	r24, 0xFF	; 255
     492:	80 93 08 01 	sts	0x0108, r24
			cmu->CMU_ID = CMU_ID;								//assign this element to the CMU that sent the reg request.
     496:	69 83       	std	Y+1, r22	; 0x01

			while (!CMU_send_read_receipt(cmu));			//keep trying to send, until a tx buffer is free.
     498:	ce 01       	movw	r24, r28
     49a:	0e 94 00 02 	call	0x400	; 0x400 <CMU_send_read_receipt>
     49e:	88 23       	and	r24, r24
     4a0:	d9 f3       	breq	.-10     	; 0x498 <CMU_Register+0x44>
		if(count == (CMU_COUNT-1))		//otherwise if all of the elements have already been allocated, we have an extra CMU.
		{
			return 2;		//return error
		}
	}
	return 0;
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	0b c0       	rjmp	.+22     	; 0x4bc <CMU_Register+0x68>
			cmu->CMU_ID = CMU_ID;								//assign this element to the CMU that sent the reg request.

			while (!CMU_send_read_receipt(cmu));			//keep trying to send, until a tx buffer is free.
			break;
		}
		else if(cmu->CMU_ID == CMU_ID)		//if this function encounters its own ID, it means there is a duplicate ID. 
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	86 17       	cp	r24, r22
     4aa:	97 07       	cpc	r25, r23
     4ac:	31 f4       	brne	.+12     	; 0x4ba <CMU_Register+0x66>
		{
			return 1;			//return error.
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	05 c0       	rjmp	.+10     	; 0x4bc <CMU_Register+0x68>
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	03 c0       	rjmp	.+6      	; 0x4bc <CMU_Register+0x68>
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	01 c0       	rjmp	.+2      	; 0x4bc <CMU_Register+0x68>
		}
		cmu++;
		if(count == (CMU_COUNT-1))		//otherwise if all of the elements have already been allocated, we have an extra CMU.
		{
			return 2;		//return error
     4ba:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	return 0;
	
}
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	08 95       	ret

000004c2 <CMU_Store_Data>:

uint8_t CMU_Store_Data(CMU * cmu, uint8_t CMU_ID, uint8_t message_type2, uint8_t address)
{
     4c2:	8f 92       	push	r8
     4c4:	9f 92       	push	r9
     4c6:	bf 92       	push	r11
     4c8:	cf 92       	push	r12
     4ca:	df 92       	push	r13
     4cc:	ef 92       	push	r14
     4ce:	ff 92       	push	r15
     4d0:	0f 93       	push	r16
     4d2:	1f 93       	push	r17
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	cd b7       	in	r28, 0x3d	; 61
     4da:	de b7       	in	r29, 0x3e	; 62
     4dc:	28 97       	sbiw	r28, 0x08	; 8
     4de:	0f b6       	in	r0, 0x3f	; 63
     4e0:	f8 94       	cli
     4e2:	de bf       	out	0x3e, r29	; 62
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	cd bf       	out	0x3d, r28	; 61
     4e8:	8c 01       	movw	r16, r24
     4ea:	f6 2e       	mov	r15, r22
     4ec:	e4 2e       	mov	r14, r20
	uint8_t data[8];											//make a bucket for our data.
	CMU * cmu2 = cmu;
	cmu2++;
	
	//this function takes a pointer of a suitably sized array for the first address of the data we will acquire.
	MCP2515_RxBufferRead(data, address+6);						//collect our data, using the rx read buffer instruction.
     4ee:	66 e0       	ldi	r22, 0x06	; 6
     4f0:	62 0f       	add	r22, r18
     4f2:	ce 01       	movw	r24, r28
     4f4:	01 96       	adiw	r24, 0x01	; 1
     4f6:	0e 94 d7 09 	call	0x13ae	; 0x13ae <MCP2515_RxBufferRead>
			found = 1;
			switch(message_type2)				//depending on the message type
			{
				case TEMP1_ID:							//if it was the first TEMPERATURE packet,
					
					cmu->temperatures[0]=data[0]<<8;	//data 0 will hold the 8 MSBs of temp cell 0
     4fa:	49 81       	ldd	r20, Y+1	; 0x01
     4fc:	50 e0       	ldi	r21, 0x00	; 0
     4fe:	54 2f       	mov	r21, r20
     500:	44 27       	eor	r20, r20
					cmu->temperatures[0]|=data[1];		//data 1 will hold the 8 LSBs of temp cell 0
     502:	8a 81       	ldd	r24, Y+2	; 0x02
     504:	48 2b       	or	r20, r24
					cmu->temperatures[1]=data[2]<<8;	//data 2 will hold the 8 MSBs of temp cell 1
     506:	ab 81       	ldd	r26, Y+3	; 0x03
     508:	b0 e0       	ldi	r27, 0x00	; 0
     50a:	ba 2f       	mov	r27, r26
     50c:	aa 27       	eor	r26, r26
					cmu->temperatures[1]|=data[3];		//and so on...
     50e:	8c 81       	ldd	r24, Y+4	; 0x04
     510:	4d 01       	movw	r8, r26
     512:	88 2a       	or	r8, r24
					cmu->temperatures[2]=data[4]<<8;
     514:	8d 81       	ldd	r24, Y+5	; 0x05
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	98 2f       	mov	r25, r24
     51a:	88 27       	eor	r24, r24
					cmu->temperatures[2]|=data[5];
     51c:	2e 81       	ldd	r18, Y+6	; 0x06
     51e:	82 2b       	or	r24, r18
					cmu->temperatures[3]=data[6]<<8;
     520:	2f 81       	ldd	r18, Y+7	; 0x07
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	32 2f       	mov	r19, r18
     526:	22 27       	eor	r18, r18
					cmu->temperatures[3]|=data[7];
     528:	68 85       	ldd	r22, Y+8	; 0x08
     52a:	26 2b       	or	r18, r22
     52c:	f8 01       	movw	r30, r16
     52e:	31 96       	adiw	r30, 0x01	; 1
     530:	09 59       	subi	r16, 0x99	; 153
     532:	1f 4f       	sbci	r17, 0xFF	; 255
	
}

uint8_t CMU_Store_Data(CMU * cmu, uint8_t CMU_ID, uint8_t message_type2, uint8_t address)
{
	uint8_t found = 0;
     534:	70 e0       	ldi	r23, 0x00	; 0
		//_delay_ms(2);

		
		if(cmu->CMU_ID == CMU_ID)				//if cmu is the one we are looking for,
		{
			found = 1;
     536:	bb 24       	eor	r11, r11
     538:	b3 94       	inc	r11
	for(uint8_t counter = 0; counter < CMU_COUNT; counter++)	//move through the cells, looking for a matching one to the ID we have.
	{
		//_delay_ms(2);

		
		if(cmu->CMU_ID == CMU_ID)				//if cmu is the one we are looking for,
     53a:	60 81       	ld	r22, Z
     53c:	6f 11       	cpse	r22, r15
     53e:	4d c0       	rjmp	.+154    	; 0x5da <CMU_Store_Data+0x118>
		{
			found = 1;
			switch(message_type2)				//depending on the message type
     540:	62 e0       	ldi	r22, 0x02	; 2
     542:	e6 16       	cp	r14, r22
     544:	d1 f1       	breq	.+116    	; 0x5ba <CMU_Store_Data+0xf8>
     546:	6e 15       	cp	r22, r14
     548:	20 f0       	brcs	.+8      	; 0x552 <CMU_Store_Data+0x90>
     54a:	a1 e0       	ldi	r26, 0x01	; 1
     54c:	ea 16       	cp	r14, r26
     54e:	b9 f0       	breq	.+46     	; 0x57e <CMU_Store_Data+0xbc>
     550:	43 c0       	rjmp	.+134    	; 0x5d8 <CMU_Store_Data+0x116>
     552:	b4 e0       	ldi	r27, 0x04	; 4
     554:	eb 16       	cp	r14, r27
     556:	21 f0       	breq	.+8      	; 0x560 <CMU_Store_Data+0x9e>
     558:	65 e0       	ldi	r22, 0x05	; 5
     55a:	e6 16       	cp	r14, r22
     55c:	f9 f0       	breq	.+62     	; 0x59c <CMU_Store_Data+0xda>
     55e:	3c c0       	rjmp	.+120    	; 0x5d8 <CMU_Store_Data+0x116>
			{
				case TEMP1_ID:							//if it was the first TEMPERATURE packet,
					
					cmu->temperatures[0]=data[0]<<8;	//data 0 will hold the 8 MSBs of temp cell 0
					cmu->temperatures[0]|=data[1];		//data 1 will hold the 8 LSBs of temp cell 0
     560:	52 8b       	std	Z+18, r21	; 0x12
     562:	41 8b       	std	Z+17, r20	; 0x11
					cmu->temperatures[1]=data[2]<<8;	//data 2 will hold the 8 MSBs of temp cell 1
					cmu->temperatures[1]|=data[3];		//and so on...
     564:	94 8a       	std	Z+20, r9	; 0x14
     566:	83 8a       	std	Z+19, r8	; 0x13
					cmu->temperatures[2]=data[4]<<8;
					cmu->temperatures[2]|=data[5];
     568:	96 8b       	std	Z+22, r25	; 0x16
     56a:	85 8b       	std	Z+21, r24	; 0x15
					cmu->temperatures[3]=data[6]<<8;
					cmu->temperatures[3]|=data[7];
     56c:	30 8f       	std	Z+24, r19	; 0x18
     56e:	27 8b       	std	Z+23, r18	; 0x17
					CMU_data_count++;
     570:	60 91 09 01 	lds	r22, 0x0109
     574:	6f 5f       	subi	r22, 0xFF	; 255
     576:	60 93 09 01 	sts	0x0109, r22
		//_delay_ms(2);

		
		if(cmu->CMU_ID == CMU_ID)				//if cmu is the one we are looking for,
		{
			found = 1;
     57a:	7b 2d       	mov	r23, r11
					cmu->temperatures[2]|=data[5];
					cmu->temperatures[3]=data[6]<<8;
					cmu->temperatures[3]|=data[7];
					CMU_data_count++;
					
					break;
     57c:	2e c0       	rjmp	.+92     	; 0x5da <CMU_Store_Data+0x118>
				case VOLT1_ID:							//if it was the first VOLTAGE packet,
					
					cmu->voltages[0]=data[0]<<8;		//data 0 will hold the 8 MSBs of voltages cell 0
					cmu->voltages[0]|=data[1];			//data 1 will hold the 8 LSBs of voltages cell 0
     57e:	52 83       	std	Z+2, r21	; 0x02
     580:	41 83       	std	Z+1, r20	; 0x01
					cmu->voltages[1]=data[2]<<8;		//data 2 will hold the 8 MSBs of voltages cell 1
					cmu->voltages[1]|=data[3];			//and so on...
     582:	94 82       	std	Z+4, r9	; 0x04
     584:	83 82       	std	Z+3, r8	; 0x03
					cmu->voltages[2]=data[4]<<8;
					cmu->voltages[2]|=data[5];
     586:	96 83       	std	Z+6, r25	; 0x06
     588:	85 83       	std	Z+5, r24	; 0x05
					cmu->voltages[3]=data[6]<<8;
					cmu->voltages[3]|=data[7];
     58a:	30 87       	std	Z+8, r19	; 0x08
     58c:	27 83       	std	Z+7, r18	; 0x07
					
					CMU_data_count++;
     58e:	60 91 09 01 	lds	r22, 0x0109
     592:	6f 5f       	subi	r22, 0xFF	; 255
     594:	60 93 09 01 	sts	0x0109, r22
		//_delay_ms(2);

		
		if(cmu->CMU_ID == CMU_ID)				//if cmu is the one we are looking for,
		{
			found = 1;
     598:	7b 2d       	mov	r23, r11
					cmu->voltages[2]|=data[5];
					cmu->voltages[3]=data[6]<<8;
					cmu->voltages[3]|=data[7];
					
					CMU_data_count++;
					break;
     59a:	1f c0       	rjmp	.+62     	; 0x5da <CMU_Store_Data+0x118>
				case TEMP2_ID:							//if it was the second TEMPERATURE packet,
				
					cmu->temperatures[4]=data[0]<<8;	//data 0 will hold the 8 MSBs of temp cell 4
					cmu->temperatures[4]|=data[1];		//data 1 will hold the 8 LSBs of temp cell 4
     59c:	52 8f       	std	Z+26, r21	; 0x1a
     59e:	41 8f       	std	Z+25, r20	; 0x19
					cmu->temperatures[5]=data[2]<<8;	//data 2 will hold the 8 MSBs of temp cell 5
					cmu->temperatures[5]|=data[3];		//and so on...
     5a0:	94 8e       	std	Z+28, r9	; 0x1c
     5a2:	83 8e       	std	Z+27, r8	; 0x1b
					cmu->temperatures[6]=data[4]<<8;
					cmu->temperatures[6]|=data[5];
     5a4:	96 8f       	std	Z+30, r25	; 0x1e
     5a6:	85 8f       	std	Z+29, r24	; 0x1d
					cmu->temperatures[7]=data[6]<<8;
					cmu->temperatures[7]|=data[7];
     5a8:	30 a3       	std	Z+32, r19	; 0x20
     5aa:	27 8f       	std	Z+31, r18	; 0x1f
					
					CMU_data_count++;
     5ac:	60 91 09 01 	lds	r22, 0x0109
     5b0:	6f 5f       	subi	r22, 0xFF	; 255
     5b2:	60 93 09 01 	sts	0x0109, r22
		//_delay_ms(2);

		
		if(cmu->CMU_ID == CMU_ID)				//if cmu is the one we are looking for,
		{
			found = 1;
     5b6:	7b 2d       	mov	r23, r11
					cmu->temperatures[7]=data[6]<<8;
					cmu->temperatures[7]|=data[7];
					
					CMU_data_count++;
					//LED_on(YELLOW_LED);
					break;
     5b8:	10 c0       	rjmp	.+32     	; 0x5da <CMU_Store_Data+0x118>
				case VOLT2_ID:							//if it was the second VOLTAGE packet,
					cmu->voltages[4]=data[0]<<8;		//data 0 will hold the 8 MSBs of voltages cell 0
					cmu->voltages[4]|=data[1];			//data 1 will hold the 8 LSBs of voltages cell 0
     5ba:	52 87       	std	Z+10, r21	; 0x0a
     5bc:	41 87       	std	Z+9, r20	; 0x09
					cmu->voltages[5]=data[2]<<8;		//data 2 will hold the 8 MSBs of voltages cell 1
					cmu->voltages[5]|=data[3];			//and so on...
     5be:	94 86       	std	Z+12, r9	; 0x0c
     5c0:	83 86       	std	Z+11, r8	; 0x0b
					cmu->voltages[6]=data[4]<<8;
					cmu->voltages[6]|=data[5];
     5c2:	96 87       	std	Z+14, r25	; 0x0e
     5c4:	85 87       	std	Z+13, r24	; 0x0d
					cmu->voltages[7]=data[6]<<8;
					cmu->voltages[7]|=data[7];
     5c6:	30 8b       	std	Z+16, r19	; 0x10
     5c8:	27 87       	std	Z+15, r18	; 0x0f
					
					CMU_data_count++;
     5ca:	60 91 09 01 	lds	r22, 0x0109
     5ce:	6f 5f       	subi	r22, 0xFF	; 255
     5d0:	60 93 09 01 	sts	0x0109, r22
		//_delay_ms(2);

		
		if(cmu->CMU_ID == CMU_ID)				//if cmu is the one we are looking for,
		{
			found = 1;
     5d4:	7b 2d       	mov	r23, r11
					cmu->voltages[6]|=data[5];
					cmu->voltages[7]=data[6]<<8;
					cmu->voltages[7]|=data[7];
					
					CMU_data_count++;
					break;
     5d6:	01 c0       	rjmp	.+2      	; 0x5da <CMU_Store_Data+0x118>
		//_delay_ms(2);

		
		if(cmu->CMU_ID == CMU_ID)				//if cmu is the one we are looking for,
		{
			found = 1;
     5d8:	7b 2d       	mov	r23, r11
     5da:	b2 96       	adiw	r30, 0x22	; 34
	
	//this function takes a pointer of a suitably sized array for the first address of the data we will acquire.
	MCP2515_RxBufferRead(data, address+6);						//collect our data, using the rx read buffer instruction.
	//interrupt for given RX buffer will now be cleared, by previous function.

	for(uint8_t counter = 0; counter < CMU_COUNT; counter++)	//move through the cells, looking for a matching one to the ID we have.
     5dc:	e0 17       	cp	r30, r16
     5de:	f1 07       	cpc	r31, r17
     5e0:	09 f0       	breq	.+2      	; 0x5e4 <CMU_Store_Data+0x122>
     5e2:	ab cf       	rjmp	.-170    	; 0x53a <CMU_Store_Data+0x78>
			}
		
		}
		cmu++;										//if this cmu was not a match, check the next one.
	}
	if (!found) return 0;							//if we went through the entire cell database and couldn't find the cell ID, we will need to error and do another audit request.
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	71 11       	cpse	r23, r1
     5e8:	01 c0       	rjmp	.+2      	; 0x5ec <CMU_Store_Data+0x12a>
     5ea:	80 e0       	ldi	r24, 0x00	; 0
	else return 1;									//otherwise all ok.
	return 1;
}
     5ec:	28 96       	adiw	r28, 0x08	; 8
     5ee:	0f b6       	in	r0, 0x3f	; 63
     5f0:	f8 94       	cli
     5f2:	de bf       	out	0x3e, r29	; 62
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	cd bf       	out	0x3d, r28	; 61
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	1f 91       	pop	r17
     5fe:	0f 91       	pop	r16
     600:	ff 90       	pop	r15
     602:	ef 90       	pop	r14
     604:	df 90       	pop	r13
     606:	cf 90       	pop	r12
     608:	bf 90       	pop	r11
     60a:	9f 90       	pop	r9
     60c:	8f 90       	pop	r8
     60e:	08 95       	ret

00000610 <TX_cellTemps>:


uint16_t TX_cellTemps(CMU _cmu, uint16_t * max_cell, uint16_t * min_cell, uint32_t *avgSum)
{
     610:	6f 92       	push	r6
     612:	7f 92       	push	r7
     614:	8f 92       	push	r8
     616:	9f 92       	push	r9
     618:	af 92       	push	r10
     61a:	bf 92       	push	r11
     61c:	cf 92       	push	r12
     61e:	df 92       	push	r13
     620:	ef 92       	push	r14
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
     62a:	cd b7       	in	r28, 0x3d	; 61
     62c:	de b7       	in	r29, 0x3e	; 62
     62e:	28 97       	sbiw	r28, 0x08	; 8
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	f8 94       	cli
     634:	de bf       	out	0x3e, r29	; 62
     636:	0f be       	out	0x3f, r0	; 63
     638:	cd bf       	out	0x3d, r28	; 61
     63a:	ca ac       	ldd	r12, Y+58	; 0x3a
     63c:	db ac       	ldd	r13, Y+59	; 0x3b
     63e:	ac ac       	ldd	r10, Y+60	; 0x3c
     640:	bd ac       	ldd	r11, Y+61	; 0x3d
     642:	6e ac       	ldd	r6, Y+62	; 0x3e
     644:	7f ac       	ldd	r7, Y+63	; 0x3f
     646:	8e 01       	movw	r16, r28
     648:	06 5d       	subi	r16, 0xD6	; 214
     64a:	1f 4f       	sbci	r17, 0xFF	; 255
     64c:	4e 01       	movw	r8, r28
     64e:	82 e0       	ldi	r24, 0x02	; 2
     650:	88 0e       	add	r8, r24
     652:	91 1c       	adc	r9, r1
     654:	9e 01       	movw	r18, r28
     656:	2e 5c       	subi	r18, 0xCE	; 206
     658:	3f 4f       	sbci	r19, 0xFF	; 255
     65a:	f4 01       	movw	r30, r8
	int8_t mob;
	uint8_t tempData[8];

	for(uint8_t cellCount = 0; cellCount <= 3; cellCount++)
	{
		*avgSum +=_cmu.temperatures[cellCount];
     65c:	d8 01       	movw	r26, r16
     65e:	8d 91       	ld	r24, X+
     660:	9d 91       	ld	r25, X+
     662:	8d 01       	movw	r16, r26
     664:	d3 01       	movw	r26, r6
     666:	4d 91       	ld	r20, X+
     668:	5d 91       	ld	r21, X+
     66a:	6d 91       	ld	r22, X+
     66c:	7c 91       	ld	r23, X
     66e:	13 97       	sbiw	r26, 0x03	; 3
     670:	48 0f       	add	r20, r24
     672:	59 1f       	adc	r21, r25
     674:	61 1d       	adc	r22, r1
     676:	71 1d       	adc	r23, r1
     678:	4d 93       	st	X+, r20
     67a:	5d 93       	st	X+, r21
     67c:	6d 93       	st	X+, r22
     67e:	7c 93       	st	X, r23
     680:	13 97       	sbiw	r26, 0x03	; 3
		*min_cell = _cmu.temperatures[cellCount] < *min_cell ? _cmu.temperatures[cellCount] : *min_cell;		//if the cell temperature is lower than the current minimum temp, update the minimum temp
     682:	d5 01       	movw	r26, r10
     684:	4d 91       	ld	r20, X+
     686:	5c 91       	ld	r21, X
     688:	78 2f       	mov	r23, r24
     68a:	69 2f       	mov	r22, r25
     68c:	48 17       	cp	r20, r24
     68e:	59 07       	cpc	r21, r25
     690:	10 f4       	brcc	.+4      	; 0x696 <TX_cellTemps+0x86>
     692:	74 2f       	mov	r23, r20
     694:	65 2f       	mov	r22, r21
     696:	d5 01       	movw	r26, r10
     698:	7c 93       	st	X, r23
     69a:	11 96       	adiw	r26, 0x01	; 1
     69c:	6c 93       	st	X, r22
		*max_cell = _cmu.temperatures[cellCount] > *max_cell ? _cmu.temperatures[cellCount] : *max_cell;		//if the cell temperature is higher than the current maximum temp, update the maximum temp
     69e:	d6 01       	movw	r26, r12
     6a0:	4d 91       	ld	r20, X+
     6a2:	5c 91       	ld	r21, X
     6a4:	78 2f       	mov	r23, r24
     6a6:	69 2f       	mov	r22, r25
     6a8:	84 17       	cp	r24, r20
     6aa:	95 07       	cpc	r25, r21
     6ac:	10 f4       	brcc	.+4      	; 0x6b2 <TX_cellTemps+0xa2>
     6ae:	74 2f       	mov	r23, r20
     6b0:	65 2f       	mov	r22, r21
     6b2:	d6 01       	movw	r26, r12
     6b4:	7c 93       	st	X, r23
     6b6:	11 96       	adiw	r26, 0x01	; 1
     6b8:	6c 93       	st	X, r22
     6ba:	af 01       	movw	r20, r30
     6bc:	41 50       	subi	r20, 0x01	; 1
     6be:	51 09       	sbc	r21, r1
		tempData[cellCount*2]	= _cmu.temperatures[cellCount] >> 8;
     6c0:	da 01       	movw	r26, r20
     6c2:	9c 93       	st	X, r25
		tempData[cellCount*2+1] = _cmu.temperatures[cellCount];
     6c4:	80 83       	st	Z, r24
     6c6:	32 96       	adiw	r30, 0x02	; 2
uint16_t TX_cellTemps(CMU _cmu, uint16_t * max_cell, uint16_t * min_cell, uint32_t *avgSum)
{
	int8_t mob;
	uint8_t tempData[8];

	for(uint8_t cellCount = 0; cellCount <= 3; cellCount++)
     6c8:	02 17       	cp	r16, r18
     6ca:	13 07       	cpc	r17, r19
     6cc:	39 f6       	brne	.-114    	; 0x65c <TX_cellTemps+0x4c>
		*min_cell = _cmu.temperatures[cellCount] < *min_cell ? _cmu.temperatures[cellCount] : *min_cell;		//if the cell temperature is lower than the current minimum temp, update the minimum temp
		*max_cell = _cmu.temperatures[cellCount] > *max_cell ? _cmu.temperatures[cellCount] : *max_cell;		//if the cell temperature is higher than the current maximum temp, update the maximum temp
		tempData[cellCount*2]	= _cmu.temperatures[cellCount] >> 8;
		tempData[cellCount*2+1] = _cmu.temperatures[cellCount];
	}
	mob = CAN_findFreeTXMOB();
     6ce:	0e 94 80 01 	call	0x300	; 0x300 <CAN_findFreeTXMOB>
	CAN_TXMOB(mob, 8, tempData, ((uint32_t)1<<25)|((uint32_t)DEVICE_ID<<13)|CC_TEMP1_ID, 0); //transmit first 4 cell data and do not wait for finish
     6d2:	e1 2c       	mov	r14, r1
     6d4:	04 e6       	ldi	r16, 0x64	; 100
     6d6:	10 e2       	ldi	r17, 0x20	; 32
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	32 e0       	ldi	r19, 0x02	; 2
     6dc:	ae 01       	movw	r20, r28
     6de:	4f 5f       	subi	r20, 0xFF	; 255
     6e0:	5f 4f       	sbci	r21, 0xFF	; 255
     6e2:	68 e0       	ldi	r22, 0x08	; 8
     6e4:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_TXMOB>
     6e8:	8f e9       	ldi	r24, 0x9F	; 159
     6ea:	9f e0       	ldi	r25, 0x0F	; 15
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	f1 f7       	brne	.-4      	; 0x6ec <TX_cellTemps+0xdc>
     6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <TX_cellTemps+0xe2>
     6f2:	00 00       	nop
     6f4:	fe 01       	movw	r30, r28
     6f6:	f2 96       	adiw	r30, 0x32	; 50
     6f8:	9e 01       	movw	r18, r28
     6fa:	26 5c       	subi	r18, 0xC6	; 198
     6fc:	3f 4f       	sbci	r19, 0xFF	; 255
	_delay_ms(1);
	
	for(uint8_t cellCount = 4; cellCount <= 7; cellCount++)
	{
		*avgSum +=_cmu.temperatures[cellCount];
     6fe:	81 91       	ld	r24, Z+
     700:	91 91       	ld	r25, Z+
     702:	d3 01       	movw	r26, r6
     704:	4d 91       	ld	r20, X+
     706:	5d 91       	ld	r21, X+
     708:	6d 91       	ld	r22, X+
     70a:	7c 91       	ld	r23, X
     70c:	13 97       	sbiw	r26, 0x03	; 3
     70e:	48 0f       	add	r20, r24
     710:	59 1f       	adc	r21, r25
     712:	61 1d       	adc	r22, r1
     714:	71 1d       	adc	r23, r1
     716:	4d 93       	st	X+, r20
     718:	5d 93       	st	X+, r21
     71a:	6d 93       	st	X+, r22
     71c:	7c 93       	st	X, r23
     71e:	13 97       	sbiw	r26, 0x03	; 3
		*min_cell = _cmu.temperatures[cellCount] < *min_cell ? _cmu.temperatures[cellCount] : *min_cell;		//if the cell temperature is lower than the current minimum temp, update the minimum temp
     720:	d5 01       	movw	r26, r10
     722:	4d 91       	ld	r20, X+
     724:	5c 91       	ld	r21, X
     726:	78 2f       	mov	r23, r24
     728:	69 2f       	mov	r22, r25
     72a:	48 17       	cp	r20, r24
     72c:	59 07       	cpc	r21, r25
     72e:	10 f4       	brcc	.+4      	; 0x734 <TX_cellTemps+0x124>
     730:	74 2f       	mov	r23, r20
     732:	65 2f       	mov	r22, r21
     734:	d5 01       	movw	r26, r10
     736:	7c 93       	st	X, r23
     738:	11 96       	adiw	r26, 0x01	; 1
     73a:	6c 93       	st	X, r22
		*max_cell = _cmu.temperatures[cellCount] > *max_cell ? _cmu.temperatures[cellCount] : *max_cell;		//if the cell temperature is higher than the current maximum temp, update the maximum temp
     73c:	d6 01       	movw	r26, r12
     73e:	4d 91       	ld	r20, X+
     740:	5c 91       	ld	r21, X
     742:	78 2f       	mov	r23, r24
     744:	69 2f       	mov	r22, r25
     746:	84 17       	cp	r24, r20
     748:	95 07       	cpc	r25, r21
     74a:	10 f4       	brcc	.+4      	; 0x750 <TX_cellTemps+0x140>
     74c:	74 2f       	mov	r23, r20
     74e:	65 2f       	mov	r22, r21
     750:	d6 01       	movw	r26, r12
     752:	7c 93       	st	X, r23
     754:	11 96       	adiw	r26, 0x01	; 1
     756:	6c 93       	st	X, r22
     758:	d4 01       	movw	r26, r8
     75a:	11 97       	sbiw	r26, 0x01	; 1
		tempData[(cellCount-4)*2]	= _cmu.temperatures[cellCount] >> 8;
     75c:	9c 93       	st	X, r25
		tempData[(cellCount-4)*2+1] = _cmu.temperatures[cellCount];
     75e:	d4 01       	movw	r26, r8
     760:	8c 93       	st	X, r24
     762:	b2 e0       	ldi	r27, 0x02	; 2
     764:	8b 0e       	add	r8, r27
     766:	91 1c       	adc	r9, r1
	}
	mob = CAN_findFreeTXMOB();
	CAN_TXMOB(mob, 8, tempData, ((uint32_t)1<<25)|((uint32_t)DEVICE_ID<<13)|CC_TEMP1_ID, 0); //transmit first 4 cell data and do not wait for finish
	_delay_ms(1);
	
	for(uint8_t cellCount = 4; cellCount <= 7; cellCount++)
     768:	e2 17       	cp	r30, r18
     76a:	f3 07       	cpc	r31, r19
     76c:	41 f6       	brne	.-112    	; 0x6fe <TX_cellTemps+0xee>
		*min_cell = _cmu.temperatures[cellCount] < *min_cell ? _cmu.temperatures[cellCount] : *min_cell;		//if the cell temperature is lower than the current minimum temp, update the minimum temp
		*max_cell = _cmu.temperatures[cellCount] > *max_cell ? _cmu.temperatures[cellCount] : *max_cell;		//if the cell temperature is higher than the current maximum temp, update the maximum temp
		tempData[(cellCount-4)*2]	= _cmu.temperatures[cellCount] >> 8;
		tempData[(cellCount-4)*2+1] = _cmu.temperatures[cellCount];
	}
	mob = CAN_findFreeTXMOB();
     76e:	0e 94 80 01 	call	0x300	; 0x300 <CAN_findFreeTXMOB>
	CAN_TXMOB(mob, 8, tempData, ((uint32_t)1<<25)|((uint32_t)DEVICE_ID<<13)|CC_TEMP2_ID, 0); //transmit first 4 cell data and do not wait for finish
     772:	e1 2c       	mov	r14, r1
     774:	05 e6       	ldi	r16, 0x65	; 101
     776:	10 e2       	ldi	r17, 0x20	; 32
     778:	20 e0       	ldi	r18, 0x00	; 0
     77a:	32 e0       	ldi	r19, 0x02	; 2
     77c:	ae 01       	movw	r20, r28
     77e:	4f 5f       	subi	r20, 0xFF	; 255
     780:	5f 4f       	sbci	r21, 0xFF	; 255
     782:	68 e0       	ldi	r22, 0x08	; 8
     784:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_TXMOB>
     788:	8f e9       	ldi	r24, 0x9F	; 159
     78a:	9f e0       	ldi	r25, 0x0F	; 15
     78c:	01 97       	sbiw	r24, 0x01	; 1
     78e:	f1 f7       	brne	.-4      	; 0x78c <TX_cellTemps+0x17c>
     790:	00 c0       	rjmp	.+0      	; 0x792 <TX_cellTemps+0x182>
     792:	00 00       	nop
	_delay_ms(1);
	
	return 0;
	
}
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	28 96       	adiw	r28, 0x08	; 8
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	f8 94       	cli
     79e:	de bf       	out	0x3e, r29	; 62
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	cd bf       	out	0x3d, r28	; 61
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	1f 91       	pop	r17
     7aa:	0f 91       	pop	r16
     7ac:	ef 90       	pop	r14
     7ae:	df 90       	pop	r13
     7b0:	cf 90       	pop	r12
     7b2:	bf 90       	pop	r11
     7b4:	af 90       	pop	r10
     7b6:	9f 90       	pop	r9
     7b8:	8f 90       	pop	r8
     7ba:	7f 90       	pop	r7
     7bc:	6f 90       	pop	r6
     7be:	08 95       	ret

000007c0 <TX_cellVoltage>:

uint8_t TX_cellVoltage(CMU _cmu, uint16_t * max_cell, uint16_t * min_cell, uint32_t * avgSum)
{
     7c0:	6f 92       	push	r6
     7c2:	7f 92       	push	r7
     7c4:	8f 92       	push	r8
     7c6:	9f 92       	push	r9
     7c8:	af 92       	push	r10
     7ca:	bf 92       	push	r11
     7cc:	cf 92       	push	r12
     7ce:	df 92       	push	r13
     7d0:	ef 92       	push	r14
     7d2:	0f 93       	push	r16
     7d4:	1f 93       	push	r17
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
     7de:	28 97       	sbiw	r28, 0x08	; 8
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	f8 94       	cli
     7e4:	de bf       	out	0x3e, r29	; 62
     7e6:	0f be       	out	0x3f, r0	; 63
     7e8:	cd bf       	out	0x3d, r28	; 61
     7ea:	ca ac       	ldd	r12, Y+58	; 0x3a
     7ec:	db ac       	ldd	r13, Y+59	; 0x3b
     7ee:	ac ac       	ldd	r10, Y+60	; 0x3c
     7f0:	bd ac       	ldd	r11, Y+61	; 0x3d
     7f2:	6e ac       	ldd	r6, Y+62	; 0x3e
     7f4:	7f ac       	ldd	r7, Y+63	; 0x3f
     7f6:	8e 01       	movw	r16, r28
     7f8:	06 5e       	subi	r16, 0xE6	; 230
     7fa:	1f 4f       	sbci	r17, 0xFF	; 255
     7fc:	4e 01       	movw	r8, r28
     7fe:	82 e0       	ldi	r24, 0x02	; 2
     800:	88 0e       	add	r8, r24
     802:	91 1c       	adc	r9, r1
     804:	9e 01       	movw	r18, r28
     806:	2e 5d       	subi	r18, 0xDE	; 222
     808:	3f 4f       	sbci	r19, 0xFF	; 255
     80a:	f4 01       	movw	r30, r8
	int8_t mob;
	uint8_t tempData[8];
	for(uint8_t cellCount = 0; cellCount <= 3; cellCount++)
	{
		*min_cell = _cmu.voltages[cellCount] < *min_cell ? _cmu.voltages[cellCount] : *min_cell;		//if the cell temperature is lower than the current minimum temp, update the minimum temp
     80c:	d8 01       	movw	r26, r16
     80e:	8d 91       	ld	r24, X+
     810:	9d 91       	ld	r25, X+
     812:	8d 01       	movw	r16, r26
     814:	d5 01       	movw	r26, r10
     816:	4d 91       	ld	r20, X+
     818:	5c 91       	ld	r21, X
     81a:	78 2f       	mov	r23, r24
     81c:	69 2f       	mov	r22, r25
     81e:	48 17       	cp	r20, r24
     820:	59 07       	cpc	r21, r25
     822:	10 f4       	brcc	.+4      	; 0x828 <TX_cellVoltage+0x68>
     824:	74 2f       	mov	r23, r20
     826:	65 2f       	mov	r22, r21
     828:	d5 01       	movw	r26, r10
     82a:	7c 93       	st	X, r23
     82c:	11 96       	adiw	r26, 0x01	; 1
     82e:	6c 93       	st	X, r22
		*max_cell = _cmu.voltages[cellCount] > *max_cell ? _cmu.voltages[cellCount] : *max_cell;		//if the cell temperature is higher than the current maximum temp, update the maximum temp
     830:	d6 01       	movw	r26, r12
     832:	4d 91       	ld	r20, X+
     834:	5c 91       	ld	r21, X
     836:	78 2f       	mov	r23, r24
     838:	69 2f       	mov	r22, r25
     83a:	84 17       	cp	r24, r20
     83c:	95 07       	cpc	r25, r21
     83e:	10 f4       	brcc	.+4      	; 0x844 <TX_cellVoltage+0x84>
     840:	74 2f       	mov	r23, r20
     842:	65 2f       	mov	r22, r21
     844:	d6 01       	movw	r26, r12
     846:	7c 93       	st	X, r23
     848:	11 96       	adiw	r26, 0x01	; 1
     84a:	6c 93       	st	X, r22
		*avgSum +=_cmu.voltages[cellCount];
     84c:	d3 01       	movw	r26, r6
     84e:	4d 91       	ld	r20, X+
     850:	5d 91       	ld	r21, X+
     852:	6d 91       	ld	r22, X+
     854:	7c 91       	ld	r23, X
     856:	13 97       	sbiw	r26, 0x03	; 3
     858:	48 0f       	add	r20, r24
     85a:	59 1f       	adc	r21, r25
     85c:	61 1d       	adc	r22, r1
     85e:	71 1d       	adc	r23, r1
     860:	4d 93       	st	X+, r20
     862:	5d 93       	st	X+, r21
     864:	6d 93       	st	X+, r22
     866:	7c 93       	st	X, r23
     868:	13 97       	sbiw	r26, 0x03	; 3
     86a:	af 01       	movw	r20, r30
     86c:	41 50       	subi	r20, 0x01	; 1
     86e:	51 09       	sbc	r21, r1
		tempData[cellCount*2]	= _cmu.voltages[cellCount] >> 8;
     870:	da 01       	movw	r26, r20
     872:	9c 93       	st	X, r25
		tempData[cellCount*2+1] = _cmu.voltages[cellCount];
     874:	80 83       	st	Z, r24
     876:	32 96       	adiw	r30, 0x02	; 2

uint8_t TX_cellVoltage(CMU _cmu, uint16_t * max_cell, uint16_t * min_cell, uint32_t * avgSum)
{
	int8_t mob;
	uint8_t tempData[8];
	for(uint8_t cellCount = 0; cellCount <= 3; cellCount++)
     878:	02 17       	cp	r16, r18
     87a:	13 07       	cpc	r17, r19
     87c:	39 f6       	brne	.-114    	; 0x80c <TX_cellVoltage+0x4c>
		*max_cell = _cmu.voltages[cellCount] > *max_cell ? _cmu.voltages[cellCount] : *max_cell;		//if the cell temperature is higher than the current maximum temp, update the maximum temp
		*avgSum +=_cmu.voltages[cellCount];
		tempData[cellCount*2]	= _cmu.voltages[cellCount] >> 8;
		tempData[cellCount*2+1] = _cmu.voltages[cellCount];
	}
	mob = CAN_findFreeTXMOB();
     87e:	0e 94 80 01 	call	0x300	; 0x300 <CAN_findFreeTXMOB>
	CAN_TXMOB(mob, 8, tempData, ((uint32_t)1<<25)|((uint32_t)DEVICE_ID<<13)|CC_VOLT1_ID, 0); //transmit first 4 cell data and do not wait for finish
     882:	e1 2c       	mov	r14, r1
     884:	0a e0       	ldi	r16, 0x0A	; 10
     886:	10 e2       	ldi	r17, 0x20	; 32
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	32 e0       	ldi	r19, 0x02	; 2
     88c:	ae 01       	movw	r20, r28
     88e:	4f 5f       	subi	r20, 0xFF	; 255
     890:	5f 4f       	sbci	r21, 0xFF	; 255
     892:	68 e0       	ldi	r22, 0x08	; 8
     894:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_TXMOB>
     898:	8f e9       	ldi	r24, 0x9F	; 159
     89a:	9f e0       	ldi	r25, 0x0F	; 15
     89c:	01 97       	sbiw	r24, 0x01	; 1
     89e:	f1 f7       	brne	.-4      	; 0x89c <TX_cellVoltage+0xdc>
     8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <TX_cellVoltage+0xe2>
     8a2:	00 00       	nop
     8a4:	fe 01       	movw	r30, r28
     8a6:	b2 96       	adiw	r30, 0x22	; 34
     8a8:	9e 01       	movw	r18, r28
     8aa:	26 5d       	subi	r18, 0xD6	; 214
     8ac:	3f 4f       	sbci	r19, 0xFF	; 255
	_delay_ms(1);
	for(uint8_t cellCount = 4; cellCount <= 7; cellCount++)
	{
		*min_cell = _cmu.voltages[cellCount] < *min_cell ? _cmu.voltages[cellCount] : *min_cell;		//if the cell temperature is lower than the current minimum temp, update the minimum temp
     8ae:	81 91       	ld	r24, Z+
     8b0:	91 91       	ld	r25, Z+
     8b2:	d5 01       	movw	r26, r10
     8b4:	4d 91       	ld	r20, X+
     8b6:	5c 91       	ld	r21, X
     8b8:	78 2f       	mov	r23, r24
     8ba:	69 2f       	mov	r22, r25
     8bc:	48 17       	cp	r20, r24
     8be:	59 07       	cpc	r21, r25
     8c0:	10 f4       	brcc	.+4      	; 0x8c6 <TX_cellVoltage+0x106>
     8c2:	74 2f       	mov	r23, r20
     8c4:	65 2f       	mov	r22, r21
     8c6:	d5 01       	movw	r26, r10
     8c8:	7c 93       	st	X, r23
     8ca:	11 96       	adiw	r26, 0x01	; 1
     8cc:	6c 93       	st	X, r22
		*max_cell = _cmu.voltages[cellCount] > *max_cell ? _cmu.voltages[cellCount] : *max_cell;		//if the cell temperature is higher than the current maximum temp, update the maximum temp
     8ce:	d6 01       	movw	r26, r12
     8d0:	4d 91       	ld	r20, X+
     8d2:	5c 91       	ld	r21, X
     8d4:	78 2f       	mov	r23, r24
     8d6:	69 2f       	mov	r22, r25
     8d8:	84 17       	cp	r24, r20
     8da:	95 07       	cpc	r25, r21
     8dc:	10 f4       	brcc	.+4      	; 0x8e2 <TX_cellVoltage+0x122>
     8de:	74 2f       	mov	r23, r20
     8e0:	65 2f       	mov	r22, r21
     8e2:	d6 01       	movw	r26, r12
     8e4:	7c 93       	st	X, r23
     8e6:	11 96       	adiw	r26, 0x01	; 1
     8e8:	6c 93       	st	X, r22
		*avgSum +=_cmu.voltages[cellCount];
     8ea:	d3 01       	movw	r26, r6
     8ec:	4d 91       	ld	r20, X+
     8ee:	5d 91       	ld	r21, X+
     8f0:	6d 91       	ld	r22, X+
     8f2:	7c 91       	ld	r23, X
     8f4:	13 97       	sbiw	r26, 0x03	; 3
     8f6:	48 0f       	add	r20, r24
     8f8:	59 1f       	adc	r21, r25
     8fa:	61 1d       	adc	r22, r1
     8fc:	71 1d       	adc	r23, r1
     8fe:	4d 93       	st	X+, r20
     900:	5d 93       	st	X+, r21
     902:	6d 93       	st	X+, r22
     904:	7c 93       	st	X, r23
     906:	13 97       	sbiw	r26, 0x03	; 3
     908:	d4 01       	movw	r26, r8
     90a:	11 97       	sbiw	r26, 0x01	; 1
		tempData[(cellCount-4)*2]	= _cmu.voltages[cellCount] >> 8;
     90c:	9c 93       	st	X, r25
		tempData[(cellCount-4)*2+1] = _cmu.voltages[cellCount];
     90e:	d4 01       	movw	r26, r8
     910:	8c 93       	st	X, r24
     912:	b2 e0       	ldi	r27, 0x02	; 2
     914:	8b 0e       	add	r8, r27
     916:	91 1c       	adc	r9, r1
		tempData[cellCount*2+1] = _cmu.voltages[cellCount];
	}
	mob = CAN_findFreeTXMOB();
	CAN_TXMOB(mob, 8, tempData, ((uint32_t)1<<25)|((uint32_t)DEVICE_ID<<13)|CC_VOLT1_ID, 0); //transmit first 4 cell data and do not wait for finish
	_delay_ms(1);
	for(uint8_t cellCount = 4; cellCount <= 7; cellCount++)
     918:	e2 17       	cp	r30, r18
     91a:	f3 07       	cpc	r31, r19
     91c:	41 f6       	brne	.-112    	; 0x8ae <TX_cellVoltage+0xee>
		*max_cell = _cmu.voltages[cellCount] > *max_cell ? _cmu.voltages[cellCount] : *max_cell;		//if the cell temperature is higher than the current maximum temp, update the maximum temp
		*avgSum +=_cmu.voltages[cellCount];
		tempData[(cellCount-4)*2]	= _cmu.voltages[cellCount] >> 8;
		tempData[(cellCount-4)*2+1] = _cmu.voltages[cellCount];
	}
	mob = CAN_findFreeTXMOB();
     91e:	0e 94 80 01 	call	0x300	; 0x300 <CAN_findFreeTXMOB>
	CAN_TXMOB(mob, 8, tempData, ((uint32_t)1<<25)|((uint32_t)DEVICE_ID<<13)|CC_VOLT2_ID, 0); //transmit first 4 cell data and do not wait for finish
     922:	e1 2c       	mov	r14, r1
     924:	0b e0       	ldi	r16, 0x0B	; 11
     926:	10 e2       	ldi	r17, 0x20	; 32
     928:	20 e0       	ldi	r18, 0x00	; 0
     92a:	32 e0       	ldi	r19, 0x02	; 2
     92c:	ae 01       	movw	r20, r28
     92e:	4f 5f       	subi	r20, 0xFF	; 255
     930:	5f 4f       	sbci	r21, 0xFF	; 255
     932:	68 e0       	ldi	r22, 0x08	; 8
     934:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_TXMOB>
     938:	8f e9       	ldi	r24, 0x9F	; 159
     93a:	9f e0       	ldi	r25, 0x0F	; 15
     93c:	01 97       	sbiw	r24, 0x01	; 1
     93e:	f1 f7       	brne	.-4      	; 0x93c <TX_cellVoltage+0x17c>
     940:	00 c0       	rjmp	.+0      	; 0x942 <TX_cellVoltage+0x182>
     942:	00 00       	nop
	_delay_ms(1);
	return 0;
}
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	28 96       	adiw	r28, 0x08	; 8
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	f8 94       	cli
     94c:	de bf       	out	0x3e, r29	; 62
     94e:	0f be       	out	0x3f, r0	; 63
     950:	cd bf       	out	0x3d, r28	; 61
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	1f 91       	pop	r17
     958:	0f 91       	pop	r16
     95a:	ef 90       	pop	r14
     95c:	df 90       	pop	r13
     95e:	cf 90       	pop	r12
     960:	bf 90       	pop	r11
     962:	af 90       	pop	r10
     964:	9f 90       	pop	r9
     966:	8f 90       	pop	r8
     968:	7f 90       	pop	r7
     96a:	6f 90       	pop	r6
     96c:	08 95       	ret

0000096e <TX_globalData>:

uint8_t TX_globalData(uint16_t max_volt, uint16_t min_volt, uint16_t max_temp, uint16_t min_temp, uint32_t avgVSum, uint32_t avgTSum )
{
     96e:	2f 92       	push	r2
     970:	3f 92       	push	r3
     972:	4f 92       	push	r4
     974:	5f 92       	push	r5
     976:	6f 92       	push	r6
     978:	7f 92       	push	r7
     97a:	8f 92       	push	r8
     97c:	9f 92       	push	r9
     97e:	af 92       	push	r10
     980:	bf 92       	push	r11
     982:	cf 92       	push	r12
     984:	df 92       	push	r13
     986:	ef 92       	push	r14
     988:	ff 92       	push	r15
     98a:	0f 93       	push	r16
     98c:	1f 93       	push	r17
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	cd b7       	in	r28, 0x3d	; 61
     994:	de b7       	in	r29, 0x3e	; 62
     996:	28 97       	sbiw	r28, 0x08	; 8
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	f8 94       	cli
     99c:	de bf       	out	0x3e, r29	; 62
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	cd bf       	out	0x3d, r28	; 61
     9a2:	78 2e       	mov	r7, r24
     9a4:	69 2e       	mov	r6, r25
     9a6:	56 2e       	mov	r5, r22
     9a8:	47 2e       	mov	r4, r23
     9aa:	24 2e       	mov	r2, r20
     9ac:	35 2e       	mov	r3, r21
     9ae:	92 2e       	mov	r9, r18
     9b0:	83 2e       	mov	r8, r19
     9b2:	c8 01       	movw	r24, r16
     9b4:	b7 01       	movw	r22, r14
	int8_t mob;
	uint8_t tempData[8];
	uint16_t avgV = avgVSum/(CMU_COUNT*8), avgT = avgTSum/(CMU_COUNT*8);
     9b6:	28 e1       	ldi	r18, 0x18	; 24
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	40 e0       	ldi	r20, 0x00	; 0
     9bc:	50 e0       	ldi	r21, 0x00	; 0
     9be:	0e 94 86 0c 	call	0x190c	; 0x190c <__udivmodsi4>
     9c2:	12 2f       	mov	r17, r18
     9c4:	03 2f       	mov	r16, r19
     9c6:	c6 01       	movw	r24, r12
     9c8:	b5 01       	movw	r22, r10
     9ca:	28 e1       	ldi	r18, 0x18	; 24
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	40 e0       	ldi	r20, 0x00	; 0
     9d0:	50 e0       	ldi	r21, 0x00	; 0
     9d2:	0e 94 86 0c 	call	0x190c	; 0x190c <__udivmodsi4>
     9d6:	f2 2e       	mov	r15, r18
     9d8:	d3 2e       	mov	r13, r19
	
	tempData[0]	= min_volt >> 8;
     9da:	49 82       	std	Y+1, r4	; 0x01
	tempData[1] = min_volt;
     9dc:	5a 82       	std	Y+2, r5	; 0x02
	tempData[2]	= max_volt >> 8;
     9de:	6b 82       	std	Y+3, r6	; 0x03
	tempData[3] = max_volt;
     9e0:	7c 82       	std	Y+4, r7	; 0x04
	tempData[4]	= avgV >> 8;
     9e2:	0d 83       	std	Y+5, r16	; 0x05
	tempData[5] = avgV;
     9e4:	1e 83       	std	Y+6, r17	; 0x06
	mob = CAN_findFreeTXMOB();
     9e6:	0e 94 80 01 	call	0x300	; 0x300 <CAN_findFreeTXMOB>
	CAN_TXMOB(mob, 6, tempData, ((uint32_t)1<<25)|((uint32_t)deviceID<<13)|CC_V_GLOBAL_ID, 0); //transmit first 4 cell data and do not wait for finish
     9ea:	00 91 75 01 	lds	r16, 0x0175
     9ee:	10 91 76 01 	lds	r17, 0x0176
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	0f 2e       	mov	r0, r31
     9f8:	fd e0       	ldi	r31, 0x0D	; 13
     9fa:	00 0f       	add	r16, r16
     9fc:	11 1f       	adc	r17, r17
     9fe:	22 1f       	adc	r18, r18
     a00:	33 1f       	adc	r19, r19
     a02:	fa 95       	dec	r31
     a04:	d1 f7       	brne	.-12     	; 0x9fa <TX_globalData+0x8c>
     a06:	f0 2d       	mov	r31, r0
     a08:	01 60       	ori	r16, 0x01	; 1
     a0a:	32 60       	ori	r19, 0x02	; 2
     a0c:	e1 2c       	mov	r14, r1
     a0e:	ae 01       	movw	r20, r28
     a10:	4f 5f       	subi	r20, 0xFF	; 255
     a12:	5f 4f       	sbci	r21, 0xFF	; 255
     a14:	66 e0       	ldi	r22, 0x06	; 6
     a16:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_TXMOB>
     a1a:	8f e9       	ldi	r24, 0x9F	; 159
     a1c:	9f e0       	ldi	r25, 0x0F	; 15
     a1e:	01 97       	sbiw	r24, 0x01	; 1
     a20:	f1 f7       	brne	.-4      	; 0xa1e <TX_globalData+0xb0>
     a22:	00 c0       	rjmp	.+0      	; 0xa24 <TX_globalData+0xb6>
     a24:	00 00       	nop
	_delay_ms(1);
	tempData[0]	= min_temp >> 8;
     a26:	89 82       	std	Y+1, r8	; 0x01
	tempData[1] = min_temp;
     a28:	9a 82       	std	Y+2, r9	; 0x02
	tempData[2]	= max_temp >> 8;
     a2a:	3b 82       	std	Y+3, r3	; 0x03
	tempData[3] = max_temp;
     a2c:	2c 82       	std	Y+4, r2	; 0x04
	tempData[4]	= avgT >> 8;
     a2e:	dd 82       	std	Y+5, r13	; 0x05
	tempData[5] = avgT;
     a30:	fe 82       	std	Y+6, r15	; 0x06
	mob = CAN_findFreeTXMOB();
     a32:	0e 94 80 01 	call	0x300	; 0x300 <CAN_findFreeTXMOB>
	CAN_TXMOB(mob, 6, tempData, ((uint32_t)1<<25)|((uint32_t)deviceID<<13)|CC_T_GLOBAL_ID, 0); //transmit first 4 cell data and do not wait for finish
     a36:	00 91 75 01 	lds	r16, 0x0175
     a3a:	10 91 76 01 	lds	r17, 0x0176
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	0f 2e       	mov	r0, r31
     a44:	fd e0       	ldi	r31, 0x0D	; 13
     a46:	00 0f       	add	r16, r16
     a48:	11 1f       	adc	r17, r17
     a4a:	22 1f       	adc	r18, r18
     a4c:	33 1f       	adc	r19, r19
     a4e:	fa 95       	dec	r31
     a50:	d1 f7       	brne	.-12     	; 0xa46 <TX_globalData+0xd8>
     a52:	f0 2d       	mov	r31, r0
     a54:	02 60       	ori	r16, 0x02	; 2
     a56:	32 60       	ori	r19, 0x02	; 2
     a58:	ae 01       	movw	r20, r28
     a5a:	4f 5f       	subi	r20, 0xFF	; 255
     a5c:	5f 4f       	sbci	r21, 0xFF	; 255
     a5e:	66 e0       	ldi	r22, 0x06	; 6
     a60:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_TXMOB>
     a64:	8f e9       	ldi	r24, 0x9F	; 159
     a66:	9f e0       	ldi	r25, 0x0F	; 15
     a68:	01 97       	sbiw	r24, 0x01	; 1
     a6a:	f1 f7       	brne	.-4      	; 0xa68 <TX_globalData+0xfa>
     a6c:	00 c0       	rjmp	.+0      	; 0xa6e <TX_globalData+0x100>
     a6e:	00 00       	nop
	_delay_ms(1);
	
	return 0;
}
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	28 96       	adiw	r28, 0x08	; 8
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	f8 94       	cli
     a78:	de bf       	out	0x3e, r29	; 62
     a7a:	0f be       	out	0x3f, r0	; 63
     a7c:	cd bf       	out	0x3d, r28	; 61
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	1f 91       	pop	r17
     a84:	0f 91       	pop	r16
     a86:	ff 90       	pop	r15
     a88:	ef 90       	pop	r14
     a8a:	df 90       	pop	r13
     a8c:	cf 90       	pop	r12
     a8e:	bf 90       	pop	r11
     a90:	af 90       	pop	r10
     a92:	9f 90       	pop	r9
     a94:	8f 90       	pop	r8
     a96:	7f 90       	pop	r7
     a98:	6f 90       	pop	r6
     a9a:	5f 90       	pop	r5
     a9c:	4f 90       	pop	r4
     a9e:	3f 90       	pop	r3
     aa0:	2f 90       	pop	r2
     aa2:	08 95       	ret

00000aa4 <LED_on>:
void LED_on( uint8_t selection)
{
	switch(selection)
     aa4:	88 23       	and	r24, r24
     aa6:	19 f0       	breq	.+6      	; 0xaae <LED_on+0xa>
     aa8:	81 30       	cpi	r24, 0x01	; 1
     aaa:	19 f0       	breq	.+6      	; 0xab2 <LED_on+0xe>
     aac:	08 95       	ret
	{
		case YELLOW_LED:
			PORTD &= ~(1<<PIND7);
     aae:	5f 98       	cbi	0x0b, 7	; 11
			break;
     ab0:	08 95       	ret
		case RED_LED:
			PORTD &= ~(1<<PIND1);
     ab2:	59 98       	cbi	0x0b, 1	; 11
     ab4:	08 95       	ret

00000ab6 <LED_off>:
			break;
	}
}
void LED_off( uint8_t selection)
{
	switch(selection)
     ab6:	88 23       	and	r24, r24
     ab8:	19 f0       	breq	.+6      	; 0xac0 <LED_off+0xa>
     aba:	81 30       	cpi	r24, 0x01	; 1
     abc:	19 f0       	breq	.+6      	; 0xac4 <LED_off+0xe>
     abe:	08 95       	ret
	{
		case YELLOW_LED:
			PORTD |= (1<<PIND7);
     ac0:	5f 9a       	sbi	0x0b, 7	; 11
			break;
     ac2:	08 95       	ret
		case RED_LED:
			PORTD |= (1<<PIND1);
     ac4:	59 9a       	sbi	0x0b, 1	; 11
     ac6:	08 95       	ret

00000ac8 <flash_LED>:
			break;
	}
}
void flash_LED(uint8_t number, uint8_t selection, uint8_t duration)
{
	duration = duration/2;
     ac8:	46 95       	lsr	r20
	if(selection == RED_LED)
     aca:	61 30       	cpi	r22, 0x01	; 1
     acc:	19 f0       	breq	.+6      	; 0xad4 <flash_LED+0xc>
			}
		}
	}
	else
	{
		for(uint8_t count = 0;count<number;count++)
     ace:	81 11       	cpse	r24, r1
     ad0:	21 c0       	rjmp	.+66     	; 0xb14 <flash_LED+0x4c>
     ad2:	08 95       	ret
void flash_LED(uint8_t number, uint8_t selection, uint8_t duration)
{
	duration = duration/2;
	if(selection == RED_LED)
	{
		for(uint8_t count = 0; count < number ;count++)
     ad4:	88 23       	and	r24, r24
     ad6:	09 f4       	brne	.+2      	; 0xada <flash_LED+0x12>
     ad8:	44 c0       	rjmp	.+136    	; 0xb62 <flash_LED+0x9a>
     ada:	20 e0       	ldi	r18, 0x00	; 0
		{
			PORTD &= ~(1<<PIND1);
			for(uint8_t counter = 0; counter < duration; counter++)
     adc:	30 e0       	ldi	r19, 0x00	; 0
	duration = duration/2;
	if(selection == RED_LED)
	{
		for(uint8_t count = 0; count < number ;count++)
		{
			PORTD &= ~(1<<PIND1);
     ade:	59 98       	cbi	0x0b, 1	; 11
			for(uint8_t counter = 0; counter < duration; counter++)
     ae0:	44 23       	and	r20, r20
     ae2:	c1 f1       	breq	.+112    	; 0xb54 <flash_LED+0x8c>
     ae4:	93 2f       	mov	r25, r19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ae6:	eb e8       	ldi	r30, 0x8B	; 139
     ae8:	ff e0       	ldi	r31, 0x0F	; 15
     aea:	31 97       	sbiw	r30, 0x01	; 1
     aec:	f1 f7       	brne	.-4      	; 0xaea <flash_LED+0x22>
     aee:	00 c0       	rjmp	.+0      	; 0xaf0 <flash_LED+0x28>
     af0:	00 00       	nop
     af2:	9f 5f       	subi	r25, 0xFF	; 255
     af4:	94 13       	cpse	r25, r20
     af6:	f7 cf       	rjmp	.-18     	; 0xae6 <flash_LED+0x1e>
     af8:	2a c0       	rjmp	.+84     	; 0xb4e <flash_LED+0x86>
     afa:	eb e8       	ldi	r30, 0x8B	; 139
     afc:	ff e0       	ldi	r31, 0x0F	; 15
     afe:	31 97       	sbiw	r30, 0x01	; 1
     b00:	f1 f7       	brne	.-4      	; 0xafe <flash_LED+0x36>
     b02:	00 c0       	rjmp	.+0      	; 0xb04 <flash_LED+0x3c>
     b04:	00 00       	nop
			{
				_delay_us(995);
			}
			PORTD |= (1<<PIND1);
			for(uint8_t counter = 0; counter < duration; counter++)
     b06:	9f 5f       	subi	r25, 0xFF	; 255
     b08:	94 13       	cpse	r25, r20
     b0a:	f7 cf       	rjmp	.-18     	; 0xafa <flash_LED+0x32>
void flash_LED(uint8_t number, uint8_t selection, uint8_t duration)
{
	duration = duration/2;
	if(selection == RED_LED)
	{
		for(uint8_t count = 0; count < number ;count++)
     b0c:	2f 5f       	subi	r18, 0xFF	; 255
     b0e:	28 13       	cpse	r18, r24
     b10:	e6 cf       	rjmp	.-52     	; 0xade <flash_LED+0x16>
     b12:	08 95       	ret
			}
		}
	}
	else
	{
		for(uint8_t count = 0;count<number;count++)
     b14:	20 e0       	ldi	r18, 0x00	; 0
		{
			PORTD &= ~(1<<PIND7);
			for(uint8_t counter = 0; counter < duration; counter++)
     b16:	30 e0       	ldi	r19, 0x00	; 0
	}
	else
	{
		for(uint8_t count = 0;count<number;count++)
		{
			PORTD &= ~(1<<PIND7);
     b18:	5f 98       	cbi	0x0b, 7	; 11
			for(uint8_t counter = 0; counter < duration; counter++)
     b1a:	44 23       	and	r20, r20
     b1c:	01 f1       	breq	.+64     	; 0xb5e <flash_LED+0x96>
     b1e:	93 2f       	mov	r25, r19
     b20:	eb e8       	ldi	r30, 0x8B	; 139
     b22:	ff e0       	ldi	r31, 0x0F	; 15
     b24:	31 97       	sbiw	r30, 0x01	; 1
     b26:	f1 f7       	brne	.-4      	; 0xb24 <flash_LED+0x5c>
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <flash_LED+0x62>
     b2a:	00 00       	nop
     b2c:	9f 5f       	subi	r25, 0xFF	; 255
     b2e:	94 13       	cpse	r25, r20
     b30:	f7 cf       	rjmp	.-18     	; 0xb20 <flash_LED+0x58>
     b32:	12 c0       	rjmp	.+36     	; 0xb58 <flash_LED+0x90>
     b34:	eb e8       	ldi	r30, 0x8B	; 139
     b36:	ff e0       	ldi	r31, 0x0F	; 15
     b38:	31 97       	sbiw	r30, 0x01	; 1
     b3a:	f1 f7       	brne	.-4      	; 0xb38 <flash_LED+0x70>
     b3c:	00 c0       	rjmp	.+0      	; 0xb3e <flash_LED+0x76>
     b3e:	00 00       	nop
			{
				_delay_us(995);
			}
			PORTD |= (1<<PIND7);
			for(uint8_t counter = 0; counter < duration; counter++)
     b40:	9f 5f       	subi	r25, 0xFF	; 255
     b42:	94 13       	cpse	r25, r20
     b44:	f7 cf       	rjmp	.-18     	; 0xb34 <flash_LED+0x6c>
			}
		}
	}
	else
	{
		for(uint8_t count = 0;count<number;count++)
     b46:	2f 5f       	subi	r18, 0xFF	; 255
     b48:	28 13       	cpse	r18, r24
     b4a:	e6 cf       	rjmp	.-52     	; 0xb18 <flash_LED+0x50>
     b4c:	08 95       	ret
			PORTD &= ~(1<<PIND1);
			for(uint8_t counter = 0; counter < duration; counter++)
			{
				_delay_us(995);
			}
			PORTD |= (1<<PIND1);
     b4e:	59 9a       	sbi	0x0b, 1	; 11
     b50:	93 2f       	mov	r25, r19
     b52:	d3 cf       	rjmp	.-90     	; 0xafa <flash_LED+0x32>
     b54:	59 9a       	sbi	0x0b, 1	; 11
     b56:	da cf       	rjmp	.-76     	; 0xb0c <flash_LED+0x44>
			PORTD &= ~(1<<PIND7);
			for(uint8_t counter = 0; counter < duration; counter++)
			{
				_delay_us(995);
			}
			PORTD |= (1<<PIND7);
     b58:	5f 9a       	sbi	0x0b, 7	; 11
     b5a:	93 2f       	mov	r25, r19
     b5c:	eb cf       	rjmp	.-42     	; 0xb34 <flash_LED+0x6c>
     b5e:	5f 9a       	sbi	0x0b, 7	; 11
     b60:	f2 cf       	rjmp	.-28     	; 0xb46 <flash_LED+0x7e>
     b62:	08 95       	ret

00000b64 <error_state>:
	}

}

void error_state(uint8_t code)
{
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	1f 92       	push	r1
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
     b6e:	89 83       	std	Y+1, r24	; 0x01
	CMU_Wake_reset();
     b70:	0e 94 28 02 	call	0x450	; 0x450 <CMU_Wake_reset>
	ALARM_PORT &= ~(ALARM_PIN);
     b74:	88 b1       	in	r24, 0x08	; 8
     b76:	88 b9       	out	0x08, r24	; 8
	cli();
     b78:	f8 94       	cli
	while(1)
	{
		ALARM_PORT ^= (1<<ALARM_PIN);
     b7a:	ff 24       	eor	r15, r15
     b7c:	f3 94       	inc	r15
     b7e:	88 b1       	in	r24, 0x08	; 8
     b80:	8f 25       	eor	r24, r15
     b82:	88 b9       	out	0x08, r24	; 8
		CAN_TXMOB(CAN_findFreeTXMOB(), 1, &code, ((uint32_t)1<<25)|((uint32_t)deviceID<<13)|ALARM_MSG,0);
     b84:	80 90 75 01 	lds	r8, 0x0175
     b88:	90 90 76 01 	lds	r9, 0x0176
     b8c:	a1 2c       	mov	r10, r1
     b8e:	b1 2c       	mov	r11, r1
     b90:	07 2e       	mov	r0, r23
     b92:	7d e0       	ldi	r23, 0x0D	; 13
     b94:	88 0c       	add	r8, r8
     b96:	99 1c       	adc	r9, r9
     b98:	aa 1c       	adc	r10, r10
     b9a:	bb 1c       	adc	r11, r11
     b9c:	7a 95       	dec	r23
     b9e:	d1 f7       	brne	.-12     	; 0xb94 <error_state+0x30>
     ba0:	70 2d       	mov	r23, r0
     ba2:	83 e0       	ldi	r24, 0x03	; 3
     ba4:	88 2a       	or	r8, r24
     ba6:	68 94       	set
     ba8:	b1 f8       	bld	r11, 1
     baa:	0e 94 80 01 	call	0x300	; 0x300 <CAN_findFreeTXMOB>
     bae:	e1 2c       	mov	r14, r1
     bb0:	95 01       	movw	r18, r10
     bb2:	84 01       	movw	r16, r8
     bb4:	ae 01       	movw	r20, r28
     bb6:	4f 5f       	subi	r20, 0xFF	; 255
     bb8:	5f 4f       	sbci	r21, 0xFF	; 255
     bba:	6f 2d       	mov	r22, r15
     bbc:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_TXMOB>
		flash_LED(2,YELLOW_LED,100);
     bc0:	44 e6       	ldi	r20, 0x64	; 100
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	82 e0       	ldi	r24, 0x02	; 2
     bc6:	0e 94 64 05 	call	0xac8	; 0xac8 <flash_LED>
		flash_LED(2,RED_LED,100);
     bca:	44 e6       	ldi	r20, 0x64	; 100
     bcc:	6f 2d       	mov	r22, r15
     bce:	82 e0       	ldi	r24, 0x02	; 2
     bd0:	0e 94 64 05 	call	0xac8	; 0xac8 <flash_LED>
	}
     bd4:	d4 cf       	rjmp	.-88     	; 0xb7e <error_state+0x1a>

00000bd6 <CMU_process_inbound_message>:
		return ((coulombsFull - coulombCount)/coulombsFull)*100;
	}
}

void CMU_process_inbound_message(uint8_t rx_buf_address,CMU * cmu)
{
     bd6:	ef 92       	push	r14
     bd8:	ff 92       	push	r15
     bda:	1f 93       	push	r17
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	18 2f       	mov	r17, r24
     be2:	7b 01       	movw	r14, r22
	//potential for optimisation here
	uint16_t CMU_ID = (((MCP2515_reg_read(rx_buf_address+1) & 0x3F)<<3)|((MCP2515_reg_read(rx_buf_address+2) & 0xE0)>>5));		//combine 5 LSBs of SIDH(bits 26..21) and 3 MSBs of SIDL(bits 20..18) which is the CMU ID in the packet structures.
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	81 0f       	add	r24, r17
     be8:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MCP2515_reg_read>
     bec:	c8 2f       	mov	r28, r24
     bee:	82 e0       	ldi	r24, 0x02	; 2
     bf0:	81 0f       	add	r24, r17
     bf2:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MCP2515_reg_read>
     bf6:	cf 73       	andi	r28, 0x3F	; 63
     bf8:	4c 2f       	mov	r20, r28
     bfa:	50 e0       	ldi	r21, 0x00	; 0
     bfc:	44 0f       	add	r20, r20
     bfe:	55 1f       	adc	r21, r21
     c00:	44 0f       	add	r20, r20
     c02:	55 1f       	adc	r21, r21
     c04:	44 0f       	add	r20, r20
     c06:	55 1f       	adc	r21, r21
     c08:	82 95       	swap	r24
     c0a:	86 95       	lsr	r24
     c0c:	87 70       	andi	r24, 0x07	; 7
     c0e:	ea 01       	movw	r28, r20
     c10:	c8 2b       	or	r28, r24
	uint8_t message_type = (MCP2515_reg_read(rx_buf_address+4) & 0x1F);			//message type is held in the 5 LSBs of EID0
     c12:	84 e0       	ldi	r24, 0x04	; 4
     c14:	81 0f       	add	r24, r17
     c16:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MCP2515_reg_read>
     c1a:	8f 71       	andi	r24, 0x1F	; 31

	switch(message_type)
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	c9 f0       	breq	.+50     	; 0xc52 <CMU_process_inbound_message+0x7c>
     c20:	28 f4       	brcc	.+10     	; 0xc2c <CMU_process_inbound_message+0x56>
     c22:	81 30       	cpi	r24, 0x01	; 1
     c24:	61 f1       	breq	.+88     	; 0xc7e <CMU_process_inbound_message+0xa8>
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	a9 f1       	breq	.+106    	; 0xc94 <CMU_process_inbound_message+0xbe>
     c2a:	3f c0       	rjmp	.+126    	; 0xcaa <CMU_process_inbound_message+0xd4>
     c2c:	85 30       	cpi	r24, 0x05	; 5
     c2e:	e1 f0       	breq	.+56     	; 0xc68 <CMU_process_inbound_message+0x92>
     c30:	83 31       	cpi	r24, 0x13	; 19
     c32:	d9 f5       	brne	.+118    	; 0xcaa <CMU_process_inbound_message+0xd4>
	{
		case AUDIT_RESPONSE:			//if we get a audit response message, we need to register this CMU
			//flash_LED(5,YELLOW_LED,10);
			switch(CMU_Register(cmu, CMU_ID))
     c34:	be 01       	movw	r22, r28
     c36:	c7 01       	movw	r24, r14
     c38:	0e 94 2a 02 	call	0x454	; 0x454 <CMU_Register>
     c3c:	81 30       	cpi	r24, 0x01	; 1
     c3e:	19 f0       	breq	.+6      	; 0xc46 <CMU_process_inbound_message+0x70>
     c40:	82 30       	cpi	r24, 0x02	; 2
     c42:	21 f0       	breq	.+8      	; 0xc4c <CMU_process_inbound_message+0x76>
     c44:	32 c0       	rjmp	.+100    	; 0xcaa <CMU_process_inbound_message+0xd4>
			{
				case 0:
					break;	//no issues with registering.
				case 1:
					error_state(ERROR_DUPLICATE_CMU_ID);
     c46:	82 e0       	ldi	r24, 0x02	; 2
     c48:	0e 94 b2 05 	call	0xb64	; 0xb64 <error_state>
					break;
				case 2:
					error_state(ERROR_NUMEROUS_CMU);
     c4c:	83 e0       	ldi	r24, 0x03	; 3
     c4e:	0e 94 b2 05 	call	0xb64	; 0xb64 <error_state>
			}
			
			break;
		case TEMP1_ID:

			if(!CMU_Store_Data(cmu, CMU_ID, TEMP1_ID, rx_buf_address))
     c52:	21 2f       	mov	r18, r17
     c54:	44 e0       	ldi	r20, 0x04	; 4
     c56:	6c 2f       	mov	r22, r28
     c58:	c7 01       	movw	r24, r14
     c5a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <CMU_Store_Data>
     c5e:	81 11       	cpse	r24, r1
     c60:	24 c0       	rjmp	.+72     	; 0xcaa <CMU_process_inbound_message+0xd4>
			{
				error_state(ERROR_UNKNOWN_CMU_ID);
     c62:	86 e0       	ldi	r24, 0x06	; 6
     c64:	0e 94 b2 05 	call	0xb64	; 0xb64 <error_state>

			}
			break;
		case TEMP2_ID:
			if(!CMU_Store_Data(cmu, CMU_ID, message_type, rx_buf_address))
     c68:	21 2f       	mov	r18, r17
     c6a:	45 e0       	ldi	r20, 0x05	; 5
     c6c:	6c 2f       	mov	r22, r28
     c6e:	c7 01       	movw	r24, r14
     c70:	0e 94 61 02 	call	0x4c2	; 0x4c2 <CMU_Store_Data>
     c74:	81 11       	cpse	r24, r1
     c76:	19 c0       	rjmp	.+50     	; 0xcaa <CMU_process_inbound_message+0xd4>
			{
				error_state(ERROR_UNKNOWN_CMU_ID);
     c78:	86 e0       	ldi	r24, 0x06	; 6
     c7a:	0e 94 b2 05 	call	0xb64	; 0xb64 <error_state>

			}
			break;
		case VOLT1_ID:
			if(!CMU_Store_Data(cmu, CMU_ID, message_type, rx_buf_address))
     c7e:	21 2f       	mov	r18, r17
     c80:	41 e0       	ldi	r20, 0x01	; 1
     c82:	6c 2f       	mov	r22, r28
     c84:	c7 01       	movw	r24, r14
     c86:	0e 94 61 02 	call	0x4c2	; 0x4c2 <CMU_Store_Data>
     c8a:	81 11       	cpse	r24, r1
     c8c:	0e c0       	rjmp	.+28     	; 0xcaa <CMU_process_inbound_message+0xd4>
			{
				error_state(ERROR_UNKNOWN_CMU_ID);
     c8e:	86 e0       	ldi	r24, 0x06	; 6
     c90:	0e 94 b2 05 	call	0xb64	; 0xb64 <error_state>

			}
			break;
		case VOLT2_ID:
			if(!CMU_Store_Data(cmu, CMU_ID, message_type, rx_buf_address))
     c94:	21 2f       	mov	r18, r17
     c96:	42 e0       	ldi	r20, 0x02	; 2
     c98:	6c 2f       	mov	r22, r28
     c9a:	c7 01       	movw	r24, r14
     c9c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <CMU_Store_Data>
     ca0:	81 11       	cpse	r24, r1
     ca2:	03 c0       	rjmp	.+6      	; 0xcaa <CMU_process_inbound_message+0xd4>
			{
				error_state(ERROR_UNKNOWN_CMU_ID);
     ca4:	86 e0       	ldi	r24, 0x06	; 6
     ca6:	0e 94 b2 05 	call	0xb64	; 0xb64 <error_state>

			break;

	}																				//this next section could be better off with the bit modify function.
	
}
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	1f 91       	pop	r17
     cb0:	ff 90       	pop	r15
     cb2:	ef 90       	pop	r14
     cb4:	08 95       	ret

00000cb6 <CMU_PollandProcess_RxBuffers>:
		return 0;					//return error, there were no free buffers.
	}
}

void CMU_PollandProcess_RxBuffers(CMU * cmu)
{
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	ec 01       	movw	r28, r24
	
	//potential for optimisation here, using FILHIT bits.
	uint8_t status = (MCP2515_receive_status() & 3);		//poll to see if we have a message waiting.
     cbc:	0e 94 c7 09 	call	0x138e	; 0x138e <MCP2515_receive_status>
     cc0:	83 70       	andi	r24, 0x03	; 3
	switch(status)
     cc2:	82 30       	cpi	r24, 0x02	; 2
     cc4:	71 f0       	breq	.+28     	; 0xce2 <CMU_PollandProcess_RxBuffers+0x2c>
     cc6:	83 30       	cpi	r24, 0x03	; 3
     cc8:	b1 f0       	breq	.+44     	; 0xcf6 <CMU_PollandProcess_RxBuffers+0x40>
     cca:	81 30       	cpi	r24, 0x01	; 1
     ccc:	09 f5       	brne	.+66     	; 0xd10 <CMU_PollandProcess_RxBuffers+0x5a>
	{
		case 0:					//no message waiting (/VERY/ unlikely, as interrupt has said we have one.)
			break;
		case 1:					//rxb0 only has a message. (also /VERY/ unlikely)
			CMU_process_inbound_message(MCP2515_RXB0, cmu);
     cce:	be 01       	movw	r22, r28
     cd0:	80 e6       	ldi	r24, 0x60	; 96
     cd2:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <CMU_process_inbound_message>
			MCP2515_bit_modify(MCP2515_CANINTF,0x00, status);				//e.g if status is 0b00000001, it will only modify the 0th pin.
     cd6:	41 e0       	ldi	r20, 0x01	; 1
     cd8:	60 e0       	ldi	r22, 0x00	; 0
     cda:	8c e2       	ldi	r24, 0x2C	; 44
     cdc:	0e 94 88 09 	call	0x1310	; 0x1310 <MCP2515_bit_modify>
			break;
     ce0:	17 c0       	rjmp	.+46     	; 0xd10 <CMU_PollandProcess_RxBuffers+0x5a>
		case 2:					//rxb1 only has a message
			CMU_process_inbound_message(MCP2515_RXB1, cmu);
     ce2:	be 01       	movw	r22, r28
     ce4:	80 e7       	ldi	r24, 0x70	; 112
     ce6:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <CMU_process_inbound_message>
			MCP2515_bit_modify(MCP2515_CANINTF,0x00, status);
     cea:	42 e0       	ldi	r20, 0x02	; 2
     cec:	60 e0       	ldi	r22, 0x00	; 0
     cee:	8c e2       	ldi	r24, 0x2C	; 44
     cf0:	0e 94 88 09 	call	0x1310	; 0x1310 <MCP2515_bit_modify>
			break;
     cf4:	0d c0       	rjmp	.+26     	; 0xd10 <CMU_PollandProcess_RxBuffers+0x5a>
		case 3:					//both rxb0 and rxb1 have a message
			CMU_process_inbound_message(MCP2515_RXB1, cmu);
     cf6:	be 01       	movw	r22, r28
     cf8:	80 e7       	ldi	r24, 0x70	; 112
     cfa:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <CMU_process_inbound_message>
			CMU_process_inbound_message(MCP2515_RXB0, cmu);
     cfe:	be 01       	movw	r22, r28
     d00:	80 e6       	ldi	r24, 0x60	; 96
     d02:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <CMU_process_inbound_message>
			MCP2515_bit_modify(MCP2515_CANINTF,0x00, status);
     d06:	43 e0       	ldi	r20, 0x03	; 3
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	8c e2       	ldi	r24, 0x2C	; 44
     d0c:	0e 94 88 09 	call	0x1310	; 0x1310 <MCP2515_bit_modify>
			break;
		default:				//shouldn't occur, but treat as no messages waiting
			break;
	}
	
}
     d10:	df 91       	pop	r29
     d12:	cf 91       	pop	r28
     d14:	08 95       	ret

00000d16 <main>:
	}
	
}

int main(void)
{
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
     d1e:	66 97       	sbiw	r28, 0x16	; 22
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	f8 94       	cli
     d24:	de bf       	out	0x3e, r29	; 62
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	cd bf       	out	0x3d, r28	; 61
	AMU_eeprom_write(EEPROM_FW_VERSION, 1002);
     d2a:	6a ee       	ldi	r22, 0xEA	; 234
     d2c:	73 e0       	ldi	r23, 0x03	; 3
     d2e:	82 e0       	ldi	r24, 0x02	; 2
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	0e 94 ae 01 	call	0x35c	; 0x35c <AMU_eeprom_write>
	AMU_eeprom_write(EEPROM_DEVICE_ID, 2);
     d36:	62 e0       	ldi	r22, 0x02	; 2
     d38:	70 e0       	ldi	r23, 0x00	; 0
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	0e 94 ae 01 	call	0x35c	; 0x35c <AMU_eeprom_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	9c e9       	ldi	r25, 0x9C	; 156
     d46:	01 97       	sbiw	r24, 0x01	; 1
     d48:	f1 f7       	brne	.-4      	; 0xd46 <main+0x30>
     d4a:	00 c0       	rjmp	.+0      	; 0xd4c <main+0x36>
     d4c:	00 00       	nop
	
	_delay_ms(10);
	IO_init();
     d4e:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <IO_init>
	Parameters_init();
     d52:	0e 94 b3 01 	call	0x366	; 0x366 <Parameters_init>
	CMU_Wake_reset();
     d56:	0e 94 28 02 	call	0x450	; 0x450 <CMU_Wake_reset>
     d5a:	9f ef       	ldi	r25, 0xFF	; 255
     d5c:	20 e7       	ldi	r18, 0x70	; 112
     d5e:	82 e0       	ldi	r24, 0x02	; 2
     d60:	91 50       	subi	r25, 0x01	; 1
     d62:	20 40       	sbci	r18, 0x00	; 0
     d64:	80 40       	sbci	r24, 0x00	; 0
     d66:	e1 f7       	brne	.-8      	; 0xd60 <main+0x4a>
     d68:	00 c0       	rjmp	.+0      	; 0xd6a <main+0x54>
     d6a:	00 00       	nop
	_delay_ms(50);
	SPI_init();
     d6c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <SPI_init>
	init_cmuData(cmuData);				//initialise our struct(s) with valid null data.
     d70:	8f e0       	ldi	r24, 0x0F	; 15
     d72:	91 e0       	ldi	r25, 0x01	; 1
     d74:	0e 94 cf 01 	call	0x39e	; 0x39e <init_cmuData>
	CAN_init();						//enable this for AVR CAN
     d78:	0e 94 5d 00 	call	0xba	; 0xba <CAN_init>
	MCP2515_init();
     d7c:	0e 94 a0 09 	call	0x1340	; 0x1340 <MCP2515_init>
	PCINT_init();
     d80:	0e 94 c4 01 	call	0x388	; 0x388 <PCINT_init>
	timer_init();
     d84:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <timer_init>
	CAN_RXInit(5, 4, 0, 0);
     d88:	e1 2c       	mov	r14, r1
     d8a:	f1 2c       	mov	r15, r1
     d8c:	87 01       	movw	r16, r14
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	a9 01       	movw	r20, r18
     d94:	64 e0       	ldi	r22, 0x04	; 4
     d96:	85 e0       	ldi	r24, 0x05	; 5
     d98:	0e 94 b3 00 	call	0x166	; 0x166 <CAN_RXInit>
	MCP2515_reg_write(MCP2515_CANINTF, 0b00000000);		//mark the transmit buffer as free. seems hacky, but the first interrupt never actually sets, seeing as the tx buffers were never actually busy.
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	8c e2       	ldi	r24, 0x2C	; 44
     da0:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
	sei();
     da4:	78 94       	sei
	CMUAudit = 0;
     da6:	10 92 08 01 	sts	0x0108, r1

	uint8_t status = 0; 
     daa:	19 82       	std	Y+1, r1	; 0x01
	MCP2515_FilterInit(0, AUDIT_RESPONSE);		//setup the filter to receive audit responses
     dac:	43 e1       	ldi	r20, 0x13	; 19
     dae:	50 e0       	ldi	r21, 0x00	; 0
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	0e 94 42 0a 	call	0x1484	; 0x1484 <MCP2515_FilterInit>
	MCP2515_RXInit(0, 0);	//setup the buffer to match to the packet type bits
     dba:	40 e0       	ldi	r20, 0x00	; 0
     dbc:	50 e0       	ldi	r21, 0x00	; 0
     dbe:	ba 01       	movw	r22, r20
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	0e 94 6d 0b 	call	0x16da	; 0x16da <MCP2515_RXInit>
     dc6:	9f ef       	ldi	r25, 0xFF	; 255
     dc8:	20 e7       	ldi	r18, 0x70	; 112
     dca:	82 e0       	ldi	r24, 0x02	; 2
     dcc:	91 50       	subi	r25, 0x01	; 1
     dce:	20 40       	sbci	r18, 0x00	; 0
     dd0:	80 40       	sbci	r24, 0x00	; 0
     dd2:	e1 f7       	brne	.-8      	; 0xdcc <main+0xb6>
     dd4:	00 c0       	rjmp	.+0      	; 0xdd6 <main+0xc0>
     dd6:	00 00       	nop
	_delay_ms(50);
	CMU_Wake_set();
     dd8:	0e 94 24 02 	call	0x448	; 0x448 <CMU_Wake_set>
	LED_on(RED_LED);
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	0e 94 52 05 	call	0xaa4	; 0xaa4 <LED_on>
	HEARTBEATCOUNTER = 0;
     de2:	1a ba       	out	0x1a, r1	; 26
	CMU_WAKE_TIMER = 0;
     de4:	19 ba       	out	0x19, r1	; 25
	while(CMUAudit != CMU_COUNT)		//if the number of registered CMU does not match the required number
     de6:	2e c0       	rjmp	.+92     	; 0xe44 <main+0x12e>
	{
		flash_LED(1,YELLOW_LED,50);
     de8:	42 e3       	ldi	r20, 0x32	; 50
     dea:	60 e0       	ldi	r22, 0x00	; 0
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	0e 94 64 05 	call	0xac8	; 0xac8 <flash_LED>
		MCP2515_TX(MCP2515_findFreeTxBuffer(), 0, &status, ((uint32_t)1<<27)|((uint32_t)DEVICE_ID<<18)|AUDIT_REQUEST ); //the &status is just dummy data so in case the function is written wrong, no harm should come to RAM
     df2:	0e 94 2b 0a 	call	0x1456	; 0x1456 <MCP2515_findFreeTxBuffer>
     df6:	01 e1       	ldi	r16, 0x11	; 17
     df8:	10 e0       	ldi	r17, 0x00	; 0
     dfa:	24 e0       	ldi	r18, 0x04	; 4
     dfc:	38 e0       	ldi	r19, 0x08	; 8
     dfe:	ae 01       	movw	r20, r28
     e00:	4f 5f       	subi	r20, 0xFF	; 255
     e02:	5f 4f       	sbci	r21, 0xFF	; 255
     e04:	60 e0       	ldi	r22, 0x00	; 0
     e06:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <MCP2515_TX>
     e0a:	8f e1       	ldi	r24, 0x1F	; 31
     e0c:	9e e4       	ldi	r25, 0x4E	; 78
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	f1 f7       	brne	.-4      	; 0xe0e <main+0xf8>
     e12:	00 c0       	rjmp	.+0      	; 0xe14 <main+0xfe>
     e14:	00 00       	nop
		_delay_ms(5);
		if(CMU_WAKE_TIMER > TIM_1_SEC)error_state(ERROR_CMU_TIMEOUT);
     e16:	89 b3       	in	r24, 0x19	; 25
     e18:	8e 33       	cpi	r24, 0x3E	; 62
     e1a:	18 f0       	brcs	.+6      	; 0xe22 <main+0x10c>
     e1c:	85 e0       	ldi	r24, 0x05	; 5
     e1e:	0e 94 b2 05 	call	0xb64	; 0xb64 <error_state>
		if(STATUS_REG & MCP2515_DataWaiting)
     e22:	f7 9b       	sbis	0x1e, 7	; 30
     e24:	0f c0       	rjmp	.+30     	; 0xe44 <main+0x12e>
		{
			
			status = MCP2515_reg_read(MCP2515_CANINTF);
     e26:	8c e2       	ldi	r24, 0x2C	; 44
     e28:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MCP2515_reg_read>
     e2c:	89 83       	std	Y+1, r24	; 0x01

			if(status & 3)
     e2e:	83 70       	andi	r24, 0x03	; 3
     e30:	21 f0       	breq	.+8      	; 0xe3a <main+0x124>
			{
				CMU_PollandProcess_RxBuffers(cmuData);	//if the program has indicated there is data waiting on the MCP2515, process this data.
     e32:	8f e0       	ldi	r24, 0x0F	; 15
     e34:	91 e0       	ldi	r25, 0x01	; 1
     e36:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <CMU_PollandProcess_RxBuffers>
			}
			STATUS_REG &= ~(MCP2515_DataWaiting);
     e3a:	f7 98       	cbi	0x1e, 7	; 30
			MCP2515_reg_write(MCP2515_CANINTF, 0b00000000);
     e3c:	60 e0       	ldi	r22, 0x00	; 0
     e3e:	8c e2       	ldi	r24, 0x2C	; 44
     e40:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
	_delay_ms(50);
	CMU_Wake_set();
	LED_on(RED_LED);
	HEARTBEATCOUNTER = 0;
	CMU_WAKE_TIMER = 0;
	while(CMUAudit != CMU_COUNT)		//if the number of registered CMU does not match the required number
     e44:	80 91 08 01 	lds	r24, 0x0108
     e48:	83 30       	cpi	r24, 0x03	; 3
     e4a:	71 f6       	brne	.-100    	; 0xde8 <main+0xd2>
			STATUS_REG &= ~(MCP2515_DataWaiting);
			MCP2515_reg_write(MCP2515_CANINTF, 0b00000000);
		}
	}
	
	LED_off(RED_LED);
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	0e 94 5b 05 	call	0xab6	; 0xab6 <LED_off>
	CMU_Wake_reset();
     e52:	0e 94 28 02 	call	0x450	; 0x450 <CMU_Wake_reset>
	flash_LED(2,YELLOW_LED,200);
     e56:	48 ec       	ldi	r20, 0xC8	; 200
     e58:	60 e0       	ldi	r22, 0x00	; 0
     e5a:	82 e0       	ldi	r24, 0x02	; 2
     e5c:	0e 94 64 05 	call	0xac8	; 0xac8 <flash_LED>
     e60:	9f ef       	ldi	r25, 0xFF	; 255
     e62:	29 e6       	ldi	r18, 0x69	; 105
     e64:	88 e1       	ldi	r24, 0x18	; 24
     e66:	91 50       	subi	r25, 0x01	; 1
     e68:	20 40       	sbci	r18, 0x00	; 0
     e6a:	80 40       	sbci	r24, 0x00	; 0
     e6c:	e1 f7       	brne	.-8      	; 0xe66 <main+0x150>
     e6e:	00 c0       	rjmp	.+0      	; 0xe70 <main+0x15a>
     e70:	00 00       	nop
	//MCP2515_FilterInit(0, 0);
	//MCP2515_FilterInit(1, 0);
	//MCP2515_RXInit(0, 0);	//setup the buffer to match to the packet type bits
	//MCP2515_RXInit(1, 0);	//setup the buffer to match to the packet type bits
	
	while(!(STATUS_REG & MODE_HEARTBEATRECVD));
     e72:	f2 9b       	sbis	0x1e, 2	; 30
     e74:	fe cf       	rjmp	.-4      	; 0xe72 <main+0x15c>
	CMUTimeToScan = 1;
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	80 93 0b 01 	sts	0x010B, r24
			uint16_t max_volt = 0x00;
			uint32_t avgVSum = 0;
			uint32_t avgTSum = 0;
			for(uint8_t i = 0; i<CMU_COUNT; i++)
			{
				TX_cellVoltage(cmuData[i], &max_volt, &min_volt, &avgVSum);
     e7c:	3e 01       	movw	r6, r28
     e7e:	97 e0       	ldi	r25, 0x07	; 7
     e80:	69 0e       	add	r6, r25
     e82:	71 1c       	adc	r7, r1
     e84:	2e 01       	movw	r4, r28
     e86:	2d e0       	ldi	r18, 0x0D	; 13
     e88:	42 0e       	add	r4, r18
     e8a:	51 1c       	adc	r5, r1
     e8c:	1e 01       	movw	r2, r28
     e8e:	8b e0       	ldi	r24, 0x0B	; 11
     e90:	28 0e       	add	r2, r24
     e92:	31 1c       	adc	r3, r1
     e94:	0f 2e       	mov	r0, r31
     e96:	f2 e2       	ldi	r31, 0x22	; 34
     e98:	9f 2e       	mov	r9, r31
     e9a:	f0 2d       	mov	r31, r0
				TX_cellTemps(cmuData[i], &max_temp, &min_temp, &avgTSum);
     e9c:	ce 01       	movw	r24, r28
     e9e:	41 96       	adiw	r24, 0x11	; 17
     ea0:	9c 8b       	std	Y+20, r25	; 0x14
     ea2:	8b 8b       	std	Y+19, r24	; 0x13
     ea4:	02 97       	sbiw	r24, 0x02	; 2
     ea6:	9e 8b       	std	Y+22, r25	; 0x16
     ea8:	8d 8b       	std	Y+21, r24	; 0x15
    while(1)
    {
		
		

		if(STATUS_REG & MODE_BALANCING)
     eaa:	f1 9b       	sbis	0x1e, 1	; 30
     eac:	19 c0       	rjmp	.+50     	; 0xee0 <main+0x1ca>
		{
			uint8_t balanceInstruction[5] = { (uint8_t)(3700>>8),(uint8_t)(3700),45,0,0};
     eae:	85 e0       	ldi	r24, 0x05	; 5
     eb0:	e2 e0       	ldi	r30, 0x02	; 2
     eb2:	f1 e0       	ldi	r31, 0x01	; 1
     eb4:	de 01       	movw	r26, r28
     eb6:	12 96       	adiw	r26, 0x02	; 2
     eb8:	01 90       	ld	r0, Z+
     eba:	0d 92       	st	X+, r0
     ebc:	8a 95       	dec	r24
     ebe:	e1 f7       	brne	.-8      	; 0xeb8 <main+0x1a2>
			MCP2515_TX(MCP2515_findFreeTxBuffer(),sizeof(balanceInstruction),balanceInstruction,((uint32_t)1<<27)|((uint32_t)DEVICE_ID<<18)|BALANCE_ON);
     ec0:	0e 94 2b 0a 	call	0x1456	; 0x1456 <MCP2515_findFreeTxBuffer>
     ec4:	04 e1       	ldi	r16, 0x14	; 20
     ec6:	10 e0       	ldi	r17, 0x00	; 0
     ec8:	24 e0       	ldi	r18, 0x04	; 4
     eca:	38 e0       	ldi	r19, 0x08	; 8
     ecc:	ae 01       	movw	r20, r28
     ece:	4e 5f       	subi	r20, 0xFE	; 254
     ed0:	5f 4f       	sbci	r21, 0xFF	; 255
     ed2:	65 e0       	ldi	r22, 0x05	; 5
     ed4:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <MCP2515_TX>
			LED_on(YELLOW_LED);
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	0e 94 52 05 	call	0xaa4	; 0xaa4 <LED_on>
     ede:	03 c0       	rjmp	.+6      	; 0xee6 <main+0x1d0>
		}
		else
		{
			LED_off(YELLOW_LED);
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	0e 94 5b 05 	call	0xab6	; 0xab6 <LED_off>
		}
		
		if(CMUTimeToScan)													//if the program indicates that we will need new cell information, send wake signals.
     ee6:	80 91 0b 01 	lds	r24, 0x010B
     eea:	88 23       	and	r24, r24
     eec:	99 f1       	breq	.+102    	; 0xf54 <main+0x23e>
		{

			CMU_data_count = 0;
     eee:	10 92 09 01 	sts	0x0109, r1
			CMU_Wake_set();
     ef2:	0e 94 24 02 	call	0x448	; 0x448 <CMU_Wake_set>
     ef6:	8f e1       	ldi	r24, 0x1F	; 31
     ef8:	9e e4       	ldi	r25, 0x4E	; 78
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	f1 f7       	brne	.-4      	; 0xefa <main+0x1e4>
     efe:	00 c0       	rjmp	.+0      	; 0xf00 <main+0x1ea>
     f00:	00 00       	nop
			_delay_ms(5);
			if((STATUS_REG & MODE_HEARTBEATRECVD)==0)
     f02:	f2 9b       	sbis	0x1e, 2	; 30
			{
				STATUS_REG &= ~MODE_BALANCING;
     f04:	f1 98       	cbi	0x1e, 1	; 30
				//this is an error state
				
			}
			
			
			if(STATUS_REG & MODE_BALANCING)
     f06:	f1 9b       	sbis	0x1e, 1	; 30
     f08:	03 c0       	rjmp	.+6      	; 0xf10 <main+0x1fa>
			{
				CMU_Wake_set();
     f0a:	0e 94 24 02 	call	0x448	; 0x448 <CMU_Wake_set>
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <main+0x1fe>
			}
			else
			{
				CMU_Wake_reset();
     f10:	0e 94 28 02 	call	0x450	; 0x450 <CMU_Wake_reset>
			}

			LED_on(RED_LED);
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	0e 94 52 05 	call	0xaa4	; 0xaa4 <LED_on>
			
			CMU_WAKE_TIMER = 0;
     f1a:	19 ba       	out	0x19, r1	; 25
			do
			{
				if(CMU_WAKE_TIMER > TIM_1_SEC)			//give all CMUs a total of 1 second to respond
     f1c:	89 b3       	in	r24, 0x19	; 25
     f1e:	8e 33       	cpi	r24, 0x3E	; 62
     f20:	18 f0       	brcs	.+6      	; 0xf28 <main+0x212>
				{
					error_state(ERROR_CMU_TIMEOUT);
     f22:	85 e0       	ldi	r24, 0x05	; 5
     f24:	0e 94 b2 05 	call	0xb64	; 0xb64 <error_state>
				}
				if(STATUS_REG & MCP2515_DataWaiting)
     f28:	f7 9b       	sbis	0x1e, 7	; 30
     f2a:	0b c0       	rjmp	.+22     	; 0xf42 <main+0x22c>
				{
					status = MCP2515_reg_read(MCP2515_CANINTF);
     f2c:	8c e2       	ldi	r24, 0x2C	; 44
     f2e:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MCP2515_reg_read>
     f32:	89 83       	std	Y+1, r24	; 0x01

					if(status & 3)
     f34:	83 70       	andi	r24, 0x03	; 3
     f36:	29 f0       	breq	.+10     	; 0xf42 <main+0x22c>
					{
						CMU_PollandProcess_RxBuffers(cmuData);	//if the program has indicated there is data waiting on the MCP2515, process this data.
     f38:	8f e0       	ldi	r24, 0x0F	; 15
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <CMU_PollandProcess_RxBuffers>
						STATUS_REG &= ~(MCP2515_DataWaiting);
     f40:	f7 98       	cbi	0x1e, 7	; 30

					}
				}
			}while(CMU_data_count != CMU_COUNT*4);
     f42:	80 91 09 01 	lds	r24, 0x0109
     f46:	8c 30       	cpi	r24, 0x0C	; 12
     f48:	49 f7       	brne	.-46     	; 0xf1c <main+0x206>
				
			LED_off(RED_LED);
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	0e 94 5b 05 	call	0xab6	; 0xab6 <LED_off>
			CMUTimeToScan = 0;
     f50:	10 92 0b 01 	sts	0x010B, r1
			
		}
		if(STATUS_REG & MODE_HEARTBEATRECVD)
     f54:	f2 9b       	sbis	0x1e, 2	; 30
     f56:	8b c0       	rjmp	.+278    	; 0x106e <main+0x358>
		{
			uint16_t min_temp = 0xFFFF;		//set it to maximum value
     f58:	8f ef       	ldi	r24, 0xFF	; 255
     f5a:	9f ef       	ldi	r25, 0xFF	; 255
     f5c:	9a 8b       	std	Y+18, r25	; 0x12
     f5e:	89 8b       	std	Y+17, r24	; 0x11
			uint16_t max_temp = 0x00;		//set it to minimum value
     f60:	18 8a       	std	Y+16, r1	; 0x10
     f62:	1f 86       	std	Y+15, r1	; 0x0f
			uint16_t min_volt = 0xFFFF;
     f64:	9e 87       	std	Y+14, r25	; 0x0e
     f66:	8d 87       	std	Y+13, r24	; 0x0d
			uint16_t max_volt = 0x00;
     f68:	1c 86       	std	Y+12, r1	; 0x0c
     f6a:	1b 86       	std	Y+11, r1	; 0x0b
			uint32_t avgVSum = 0;
     f6c:	1f 82       	std	Y+7, r1	; 0x07
     f6e:	18 86       	std	Y+8, r1	; 0x08
     f70:	19 86       	std	Y+9, r1	; 0x09
     f72:	1a 86       	std	Y+10, r1	; 0x0a
			uint32_t avgTSum = 0;
     f74:	1a 82       	std	Y+2, r1	; 0x02
     f76:	1b 82       	std	Y+3, r1	; 0x03
     f78:	1c 82       	std	Y+4, r1	; 0x04
     f7a:	1d 82       	std	Y+5, r1	; 0x05
     f7c:	e1 2c       	mov	r14, r1
     f7e:	f1 2c       	mov	r15, r1
			for(uint8_t i = 0; i<CMU_COUNT; i++)
			{
				TX_cellVoltage(cmuData[i], &max_volt, &min_volt, &avgVSum);
				TX_cellTemps(cmuData[i], &max_temp, &min_temp, &avgTSum);
     f80:	6e 01       	movw	r12, r28
     f82:	92 e0       	ldi	r25, 0x02	; 2
     f84:	c9 0e       	add	r12, r25
     f86:	d1 1c       	adc	r13, r1
			uint16_t max_volt = 0x00;
			uint32_t avgVSum = 0;
			uint32_t avgTSum = 0;
			for(uint8_t i = 0; i<CMU_COUNT; i++)
			{
				TX_cellVoltage(cmuData[i], &max_volt, &min_volt, &avgVSum);
     f88:	7f 92       	push	r7
     f8a:	6f 92       	push	r6
     f8c:	5f 92       	push	r5
     f8e:	4f 92       	push	r4
     f90:	3f 92       	push	r3
     f92:	2f 92       	push	r2
     f94:	9e 9c       	mul	r9, r14
     f96:	80 01       	movw	r16, r0
     f98:	9f 9c       	mul	r9, r15
     f9a:	10 0d       	add	r17, r0
     f9c:	11 24       	eor	r1, r1
     f9e:	01 5f       	subi	r16, 0xF1	; 241
     fa0:	1e 4f       	sbci	r17, 0xFE	; 254
     fa2:	8d b7       	in	r24, 0x3d	; 61
     fa4:	9e b7       	in	r25, 0x3e	; 62
     fa6:	82 97       	sbiw	r24, 0x22	; 34
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	f8 94       	cli
     fac:	9e bf       	out	0x3e, r25	; 62
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	8d bf       	out	0x3d, r24	; 61
     fb2:	ad b7       	in	r26, 0x3d	; 61
     fb4:	be b7       	in	r27, 0x3e	; 62
     fb6:	11 96       	adiw	r26, 0x01	; 1
     fb8:	f8 01       	movw	r30, r16
     fba:	89 2d       	mov	r24, r9
     fbc:	01 90       	ld	r0, Z+
     fbe:	0d 92       	st	X+, r0
     fc0:	8a 95       	dec	r24
     fc2:	e1 f7       	brne	.-8      	; 0xfbc <main+0x2a6>
     fc4:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <TX_cellVoltage>
				TX_cellTemps(cmuData[i], &max_temp, &min_temp, &avgTSum);
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	de bf       	out	0x3e, r29	; 62
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	cd bf       	out	0x3d, r28	; 61
     fd2:	df 92       	push	r13
     fd4:	cf 92       	push	r12
     fd6:	9c 89       	ldd	r25, Y+20	; 0x14
     fd8:	9f 93       	push	r25
     fda:	2b 89       	ldd	r18, Y+19	; 0x13
     fdc:	2f 93       	push	r18
     fde:	8e 89       	ldd	r24, Y+22	; 0x16
     fe0:	8f 93       	push	r24
     fe2:	9d 89       	ldd	r25, Y+21	; 0x15
     fe4:	9f 93       	push	r25
     fe6:	8d b7       	in	r24, 0x3d	; 61
     fe8:	9e b7       	in	r25, 0x3e	; 62
     fea:	82 97       	sbiw	r24, 0x22	; 34
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	f8 94       	cli
     ff0:	9e bf       	out	0x3e, r25	; 62
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	8d bf       	out	0x3d, r24	; 61
     ff6:	ad b7       	in	r26, 0x3d	; 61
     ff8:	be b7       	in	r27, 0x3e	; 62
     ffa:	11 96       	adiw	r26, 0x01	; 1
     ffc:	f8 01       	movw	r30, r16
     ffe:	89 2d       	mov	r24, r9
    1000:	01 90       	ld	r0, Z+
    1002:	0d 92       	st	X+, r0
    1004:	8a 95       	dec	r24
    1006:	e1 f7       	brne	.-8      	; 0x1000 <main+0x2ea>
    1008:	0e 94 08 03 	call	0x610	; 0x610 <TX_cellTemps>
    100c:	9f ef       	ldi	r25, 0xFF	; 255
    100e:	e9 1a       	sub	r14, r25
    1010:	f9 0a       	sbc	r15, r25
			uint16_t max_temp = 0x00;		//set it to minimum value
			uint16_t min_volt = 0xFFFF;
			uint16_t max_volt = 0x00;
			uint32_t avgVSum = 0;
			uint32_t avgTSum = 0;
			for(uint8_t i = 0; i<CMU_COUNT; i++)
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	93 e0       	ldi	r25, 0x03	; 3
    101e:	e9 16       	cp	r14, r25
    1020:	f1 04       	cpc	r15, r1
    1022:	09 f0       	breq	.+2      	; 0x1026 <main+0x310>
    1024:	b1 cf       	rjmp	.-158    	; 0xf88 <main+0x272>
			{
				TX_cellVoltage(cmuData[i], &max_volt, &min_volt, &avgVSum);
				TX_cellTemps(cmuData[i], &max_temp, &min_temp, &avgTSum);
				
			}
			TX_globalData( max_volt, min_volt, max_temp, min_temp, avgVSum, avgTSum);
    1026:	aa 80       	ldd	r10, Y+2	; 0x02
    1028:	bb 80       	ldd	r11, Y+3	; 0x03
    102a:	cc 80       	ldd	r12, Y+4	; 0x04
    102c:	dd 80       	ldd	r13, Y+5	; 0x05
    102e:	ef 80       	ldd	r14, Y+7	; 0x07
    1030:	f8 84       	ldd	r15, Y+8	; 0x08
    1032:	09 85       	ldd	r16, Y+9	; 0x09
    1034:	1a 85       	ldd	r17, Y+10	; 0x0a
    1036:	29 89       	ldd	r18, Y+17	; 0x11
    1038:	3a 89       	ldd	r19, Y+18	; 0x12
    103a:	4f 85       	ldd	r20, Y+15	; 0x0f
    103c:	58 89       	ldd	r21, Y+16	; 0x10
    103e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1040:	7e 85       	ldd	r23, Y+14	; 0x0e
    1042:	8b 85       	ldd	r24, Y+11	; 0x0b
    1044:	9c 85       	ldd	r25, Y+12	; 0x0c
    1046:	0e 94 b7 04 	call	0x96e	; 0x96e <TX_globalData>

			//CoulombCount_readAndUpdate();

			STATUS_REG &= ~MODE_HEARTBEATRECVD;
    104a:	f2 98       	cbi	0x1e, 2	; 30
			if(max_volt > CELL_V_ERR_MAX || min_volt < CELL_V_ERR_MIN || max_temp > CELL_T_ERR_MAX || min_temp < CELL_T_ERR_MIN)
    104c:	8b 85       	ldd	r24, Y+11	; 0x0b
    104e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1050:	85 39       	cpi	r24, 0x95	; 149
    1052:	91 41       	sbci	r25, 0x11	; 17
    1054:	48 f4       	brcc	.+18     	; 0x1068 <main+0x352>
    1056:	8d 85       	ldd	r24, Y+13	; 0x0d
    1058:	9e 85       	ldd	r25, Y+14	; 0x0e
    105a:	84 35       	cpi	r24, 0x54	; 84
    105c:	9b 40       	sbci	r25, 0x0B	; 11
    105e:	20 f0       	brcs	.+8      	; 0x1068 <main+0x352>
    1060:	8f 85       	ldd	r24, Y+15	; 0x0f
    1062:	98 89       	ldd	r25, Y+16	; 0x10
    1064:	c3 97       	sbiw	r24, 0x33	; 51
    1066:	18 f0       	brcs	.+6      	; 0x106e <main+0x358>
				error_state(ERROR_V_T_OOR);
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	0e 94 b2 05 	call	0xb64	; 0xb64 <error_state>
		}
		
		CAN_RXInit(5,0,CCmsk,CC);
    106e:	e1 2c       	mov	r14, r1
    1070:	f1 2c       	mov	r15, r1
    1072:	00 e0       	ldi	r16, 0x00	; 0
    1074:	18 e0       	ldi	r17, 0x08	; 8
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	40 e0       	ldi	r20, 0x00	; 0
    107c:	58 e0       	ldi	r21, 0x08	; 8
    107e:	60 e0       	ldi	r22, 0x00	; 0
    1080:	85 e0       	ldi	r24, 0x05	; 5
    1082:	0e 94 b3 00 	call	0x166	; 0x166 <CAN_RXInit>
    1086:	8f ef       	ldi	r24, 0xFF	; 255
    1088:	90 e7       	ldi	r25, 0x70	; 112
    108a:	22 e0       	ldi	r18, 0x02	; 2
    108c:	81 50       	subi	r24, 0x01	; 1
    108e:	90 40       	sbci	r25, 0x00	; 0
    1090:	20 40       	sbci	r18, 0x00	; 0
    1092:	e1 f7       	brne	.-8      	; 0x108c <main+0x376>
    1094:	00 c0       	rjmp	.+0      	; 0x1096 <main+0x380>
    1096:	00 00       	nop
    1098:	08 cf       	rjmp	.-496    	; 0xeaa <main+0x194>

0000109a <__vector_22>:
//	//upon signal of the RX0 buffer full pin,
//	PCIFR |= (1<<PCIE3);				//should clear on this execution routine.
//}

ISR(PCINT0_vect)
{
    109a:	1f 92       	push	r1
    109c:	0f 92       	push	r0
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	0f 92       	push	r0
    10a2:	11 24       	eor	r1, r1
    10a4:	2f 93       	push	r18
    10a6:	3f 93       	push	r19
    10a8:	4f 93       	push	r20
    10aa:	5f 93       	push	r21
    10ac:	6f 93       	push	r22
    10ae:	7f 93       	push	r23
    10b0:	8f 93       	push	r24
    10b2:	9f 93       	push	r25
    10b4:	af 93       	push	r26
    10b6:	bf 93       	push	r27
    10b8:	ef 93       	push	r30
    10ba:	ff 93       	push	r31
	//upon signal of the INT pin.
	LED_off(RED_LED);
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	0e 94 5b 05 	call	0xab6	; 0xab6 <LED_off>
	if(PINB & ~(1<<PINB3))		//if the pin is low
    10c2:	83 b1       	in	r24, 0x03	; 3
    10c4:	87 7f       	andi	r24, 0xF7	; 247
    10c6:	09 f0       	breq	.+2      	; 0x10ca <__vector_22+0x30>
	{
		STATUS_REG |= MCP2515_DataWaiting;
    10c8:	f7 9a       	sbi	0x1e, 7	; 30
	}
	PCIFR |= (1<<PCIE0);								//clear the interrupt.
    10ca:	d8 9a       	sbi	0x1b, 0	; 27

}
    10cc:	ff 91       	pop	r31
    10ce:	ef 91       	pop	r30
    10d0:	bf 91       	pop	r27
    10d2:	af 91       	pop	r26
    10d4:	9f 91       	pop	r25
    10d6:	8f 91       	pop	r24
    10d8:	7f 91       	pop	r23
    10da:	6f 91       	pop	r22
    10dc:	5f 91       	pop	r21
    10de:	4f 91       	pop	r20
    10e0:	3f 91       	pop	r19
    10e2:	2f 91       	pop	r18
    10e4:	0f 90       	pop	r0
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	0f 90       	pop	r0
    10ea:	1f 90       	pop	r1
    10ec:	18 95       	reti

000010ee <__vector_18>:

ISR(CAN_INT_vect)
{
    10ee:	1f 92       	push	r1
    10f0:	0f 92       	push	r0
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	0f 92       	push	r0
    10f6:	11 24       	eor	r1, r1
    10f8:	ef 92       	push	r14
    10fa:	ff 92       	push	r15
    10fc:	0f 93       	push	r16
    10fe:	1f 93       	push	r17
    1100:	2f 93       	push	r18
    1102:	3f 93       	push	r19
    1104:	4f 93       	push	r20
    1106:	5f 93       	push	r21
    1108:	6f 93       	push	r22
    110a:	7f 93       	push	r23
    110c:	8f 93       	push	r24
    110e:	9f 93       	push	r25
    1110:	af 93       	push	r26
    1112:	bf 93       	push	r27
    1114:	ef 93       	push	r30
    1116:	ff 93       	push	r31
	//CANIDT4 is l
	

	if(CANSIT2 & (1 << SIT5))	//we received a CAN message on mob 5, which is set up to receive exclusively from the Chassis controller.
    1118:	80 91 e0 00 	lds	r24, 0x00E0
    111c:	85 ff       	sbrs	r24, 5
    111e:	5f c0       	rjmp	.+190    	; 0x11de <__stack+0xdf>
	{
		CANPAGE = (5 << 4);			//set the canpage to the receiver MOB
    1120:	80 e5       	ldi	r24, 0x50	; 80
    1122:	80 93 ed 00 	sts	0x00ED, r24
		CANSTMOB &= ~(1 << RXOK);	//unset the RXOK bit to clear the interrupt.
    1126:	ee ee       	ldi	r30, 0xEE	; 238
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	8f 7d       	andi	r24, 0xDF	; 223
    112e:	80 83       	st	Z, r24
		if((CANIDT1 == ((1<<6)|(1<<4))) && (CANIDT2==deviceID) && ((CANIDT4>>3)==CC_HEARTBEAT) )	//if the received ID has a mode change packet
    1130:	80 91 f3 00 	lds	r24, 0x00F3
    1134:	80 35       	cpi	r24, 0x50	; 80
    1136:	f1 f4       	brne	.+60     	; 0x1174 <__stack+0x75>
    1138:	80 91 f2 00 	lds	r24, 0x00F2
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	20 91 75 01 	lds	r18, 0x0175
    1142:	30 91 76 01 	lds	r19, 0x0176
    1146:	82 17       	cp	r24, r18
    1148:	93 07       	cpc	r25, r19
    114a:	a1 f4       	brne	.+40     	; 0x1174 <__stack+0x75>
    114c:	80 91 f0 00 	lds	r24, 0x00F0
    1150:	86 95       	lsr	r24
    1152:	86 95       	lsr	r24
    1154:	86 95       	lsr	r24
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	69 f4       	brne	.+26     	; 0x1174 <__stack+0x75>
		{
			STATUS_REG |= MODE_HEARTBEATRECVD;
    115a:	f2 9a       	sbi	0x1e, 2	; 30
			HEARTBEATCOUNTER = 0;
    115c:	1a ba       	out	0x1a, r1	; 26
			uint32_t heartbeat =	(uint32_t)CANMSG<<24;	//byte 0
    115e:	ea ef       	ldi	r30, 0xFA	; 250
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
			heartbeat |= (uint32_t)CANMSG<<16;				//byte 1
    1164:	80 81       	ld	r24, Z
			heartbeat |= (uint32_t)CANMSG<<8;				//byte 2
    1166:	80 81       	ld	r24, Z
			heartbeat |= (uint32_t)CANMSG;					//byte 3
    1168:	80 81       	ld	r24, Z

			if((heartbeat&1) == 1)
    116a:	80 ff       	sbrs	r24, 0
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <__stack+0x73>
				STATUS_REG |= MODE_BALANCING;
    116e:	f1 9a       	sbi	0x1e, 1	; 30
    1170:	01 c0       	rjmp	.+2      	; 0x1174 <__stack+0x75>
			else
				STATUS_REG &= ~MODE_BALANCING;
    1172:	f1 98       	cbi	0x1e, 1	; 30
			///considering we got a heartbeat, we will send voltages back here. TBA

		}
		if((CANIDT1 == ((1<<6)|(1<<4))) && (CANIDT2==deviceID) && ((CANIDT4>>3)==CC_MODE_CHANGE) )	//if the received ID has a mode change packet
    1174:	80 91 f3 00 	lds	r24, 0x00F3
    1178:	80 35       	cpi	r24, 0x50	; 80
    117a:	29 f5       	brne	.+74     	; 0x11c6 <__stack+0xc7>
    117c:	80 91 f2 00 	lds	r24, 0x00F2
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	20 91 75 01 	lds	r18, 0x0175
    1186:	30 91 76 01 	lds	r19, 0x0176
    118a:	82 17       	cp	r24, r18
    118c:	93 07       	cpc	r25, r19
    118e:	d9 f4       	brne	.+54     	; 0x11c6 <__stack+0xc7>
    1190:	80 91 f0 00 	lds	r24, 0x00F0
    1194:	86 95       	lsr	r24
    1196:	86 95       	lsr	r24
    1198:	86 95       	lsr	r24
    119a:	80 31       	cpi	r24, 0x10	; 16
    119c:	a1 f4       	brne	.+40     	; 0x11c6 <__stack+0xc7>
		{
			uint16_t modeAddress =	CANMSG<<8;	//byte 0
    119e:	ea ef       	ldi	r30, 0xFA	; 250
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	98 2f       	mov	r25, r24
    11a8:	88 27       	eor	r24, r24
			modeAddress |= CANMSG;				//byte 1
    11aa:	30 81       	ld	r19, Z
			uint16_t modeValue	=	CANMSG<<8;	//byte 2
    11ac:	40 81       	ld	r20, Z
			modeValue  |= CANMSG;				//byte 3
    11ae:	20 81       	ld	r18, Z

		}
		if((CANIDT1 == ((1<<6)|(1<<4))) && (CANIDT2==deviceID) && ((CANIDT4>>3)==CC_MODE_CHANGE) )	//if the received ID has a mode change packet
		{
			uint16_t modeAddress =	CANMSG<<8;	//byte 0
			modeAddress |= CANMSG;				//byte 1
    11b0:	83 2b       	or	r24, r19
			uint16_t modeValue	=	CANMSG<<8;	//byte 2
			modeValue  |= CANMSG;				//byte 3
			switch(modeAddress)
    11b2:	01 97       	sbiw	r24, 0x01	; 1
    11b4:	41 f4       	brne	.+16     	; 0x11c6 <__stack+0xc7>
		}
		if((CANIDT1 == ((1<<6)|(1<<4))) && (CANIDT2==deviceID) && ((CANIDT4>>3)==CC_MODE_CHANGE) )	//if the received ID has a mode change packet
		{
			uint16_t modeAddress =	CANMSG<<8;	//byte 0
			modeAddress |= CANMSG;				//byte 1
			uint16_t modeValue	=	CANMSG<<8;	//byte 2
    11b6:	82 2f       	mov	r24, r18
    11b8:	90 e0       	ldi	r25, 0x00	; 0
			modeValue  |= CANMSG;				//byte 3
    11ba:	94 2b       	or	r25, r20
			switch(modeAddress)
			{
				case 1:
					if(modeValue)
    11bc:	89 2b       	or	r24, r25
    11be:	11 f0       	breq	.+4      	; 0x11c4 <__stack+0xc5>
						STATUS_REG |= MODE_BALANCING;
    11c0:	f1 9a       	sbi	0x1e, 1	; 30
    11c2:	01 c0       	rjmp	.+2      	; 0x11c6 <__stack+0xc7>
					else
						STATUS_REG &= ~MODE_BALANCING;
    11c4:	f1 98       	cbi	0x1e, 1	; 30
				default:
					break;
			}

		}
		CAN_RXInit(5,0,CCmsk,CC);
    11c6:	e1 2c       	mov	r14, r1
    11c8:	f1 2c       	mov	r15, r1
    11ca:	00 e0       	ldi	r16, 0x00	; 0
    11cc:	18 e0       	ldi	r17, 0x08	; 8
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	40 e0       	ldi	r20, 0x00	; 0
    11d4:	58 e0       	ldi	r21, 0x08	; 8
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	85 e0       	ldi	r24, 0x05	; 5
    11da:	0e 94 b3 00 	call	0x166	; 0x166 <CAN_RXInit>

	}
	CANPAGE = (5 << 4);			//set the canpage to the receiver MOB
    11de:	80 e5       	ldi	r24, 0x50	; 80
    11e0:	80 93 ed 00 	sts	0x00ED, r24
	CANSTMOB &= ~(1 << RXOK);	//unset the RXOK bit to clear the interrupt.
    11e4:	ee ee       	ldi	r30, 0xEE	; 238
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	8f 7d       	andi	r24, 0xDF	; 223
    11ec:	80 83       	st	Z, r24
}
    11ee:	ff 91       	pop	r31
    11f0:	ef 91       	pop	r30
    11f2:	bf 91       	pop	r27
    11f4:	af 91       	pop	r26
    11f6:	9f 91       	pop	r25
    11f8:	8f 91       	pop	r24
    11fa:	7f 91       	pop	r23
    11fc:	6f 91       	pop	r22
    11fe:	5f 91       	pop	r21
    1200:	4f 91       	pop	r20
    1202:	3f 91       	pop	r19
    1204:	2f 91       	pop	r18
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	ff 90       	pop	r15
    120c:	ef 90       	pop	r14
    120e:	0f 90       	pop	r0
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	0f 90       	pop	r0
    1214:	1f 90       	pop	r1
    1216:	18 95       	reti

00001218 <__vector_17>:

ISR(TIMER0_OVF_vect)
{
    1218:	1f 92       	push	r1
    121a:	0f 92       	push	r0
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	0f 92       	push	r0
    1220:	11 24       	eor	r1, r1
    1222:	2f 93       	push	r18
    1224:	3f 93       	push	r19
    1226:	4f 93       	push	r20
    1228:	5f 93       	push	r21
    122a:	6f 93       	push	r22
    122c:	7f 93       	push	r23
    122e:	8f 93       	push	r24
    1230:	9f 93       	push	r25
    1232:	af 93       	push	r26
    1234:	bf 93       	push	r27
    1236:	ef 93       	push	r30
    1238:	ff 93       	push	r31
	timerCounter++;
    123a:	80 91 0c 01 	lds	r24, 0x010C
    123e:	90 91 0d 01 	lds	r25, 0x010D
    1242:	01 96       	adiw	r24, 0x01	; 1
    1244:	90 93 0d 01 	sts	0x010D, r25
    1248:	80 93 0c 01 	sts	0x010C, r24
	HEARTBEATCOUNTER++;
    124c:	8a b3       	in	r24, 0x1a	; 26
    124e:	8f 5f       	subi	r24, 0xFF	; 255
    1250:	8a bb       	out	0x1a, r24	; 26
	CMU_WAKE_TIMER++;
    1252:	89 b3       	in	r24, 0x19	; 25
    1254:	8f 5f       	subi	r24, 0xFF	; 255
    1256:	89 bb       	out	0x19, r24	; 25
	if(HEARTBEATCOUNTER > TIM_4_SEC && !(STATUS_REG & MODE_HEARTBEATRECVD))
    1258:	8a b3       	in	r24, 0x1a	; 26
    125a:	85 3f       	cpi	r24, 0xF5	; 245
    125c:	28 f0       	brcs	.+10     	; 0x1268 <__vector_17+0x50>
    125e:	f2 99       	sbic	0x1e, 2	; 30
    1260:	03 c0       	rjmp	.+6      	; 0x1268 <__vector_17+0x50>
	{
		error_state(ERROR_NO_HEARTBEAT);
    1262:	84 e0       	ldi	r24, 0x04	; 4
    1264:	0e 94 b2 05 	call	0xb64	; 0xb64 <error_state>
	}
	if(!CMUAllRegistered && timerCounter >= CMUAuditTimeout*61)
    1268:	80 91 0a 01 	lds	r24, 0x010A
    126c:	81 11       	cpse	r24, r1
    126e:	14 c0       	rjmp	.+40     	; 0x1298 <__vector_17+0x80>
    1270:	80 91 00 01 	lds	r24, 0x0100
    1274:	2d e3       	ldi	r18, 0x3D	; 61
    1276:	82 9f       	mul	r24, r18
    1278:	c0 01       	movw	r24, r0
    127a:	11 24       	eor	r1, r1
    127c:	20 91 0c 01 	lds	r18, 0x010C
    1280:	30 91 0d 01 	lds	r19, 0x010D
    1284:	28 17       	cp	r18, r24
    1286:	39 07       	cpc	r19, r25
    1288:	38 f0       	brcs	.+14     	; 0x1298 <__vector_17+0x80>
	{
		//using the timer, we will re-wake all the CMU's approximately every CMUAuditTimeout*1 seconds.
		timerCounter = 0;
    128a:	10 92 0d 01 	sts	0x010D, r1
    128e:	10 92 0c 01 	sts	0x010C, r1
		CMUTimeToScan = 1;						//this actually only triggers a new scan when in auditing mode.
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	80 93 0b 01 	sts	0x010B, r24
	}
	if (timerCounter >= CMUScanInterval*61)		//CMUInterval seconds,
    1298:	80 91 01 01 	lds	r24, 0x0101
    129c:	2d e3       	ldi	r18, 0x3D	; 61
    129e:	82 9f       	mul	r24, r18
    12a0:	c0 01       	movw	r24, r0
    12a2:	11 24       	eor	r1, r1
    12a4:	20 91 0c 01 	lds	r18, 0x010C
    12a8:	30 91 0d 01 	lds	r19, 0x010D
    12ac:	28 17       	cp	r18, r24
    12ae:	39 07       	cpc	r19, r25
    12b0:	38 f0       	brcs	.+14     	; 0x12c0 <__vector_17+0xa8>
	{
		timerCounter = 0;						//reset our counter
    12b2:	10 92 0d 01 	sts	0x010D, r1
    12b6:	10 92 0c 01 	sts	0x010C, r1
		CMUTimeToScan = 1;						//set the flag that will trigger a scan routine on next flag.
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	80 93 0b 01 	sts	0x010B, r24
	}
}
    12c0:	ff 91       	pop	r31
    12c2:	ef 91       	pop	r30
    12c4:	bf 91       	pop	r27
    12c6:	af 91       	pop	r26
    12c8:	9f 91       	pop	r25
    12ca:	8f 91       	pop	r24
    12cc:	7f 91       	pop	r23
    12ce:	6f 91       	pop	r22
    12d0:	5f 91       	pop	r21
    12d2:	4f 91       	pop	r20
    12d4:	3f 91       	pop	r19
    12d6:	2f 91       	pop	r18
    12d8:	0f 90       	pop	r0
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	0f 90       	pop	r0
    12de:	1f 90       	pop	r1
    12e0:	18 95       	reti

000012e2 <MCP2515_reg_write>:
	
}


void MCP2515_reg_write(uint8_t reg_address, uint8_t reg_value)
{
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	d8 2f       	mov	r29, r24
    12e8:	c6 2f       	mov	r28, r22
	MCP2515_PORT_CS &= ~(1<<MCP2515_PIN_CS);			//unset CS so MCP2515 knows we are talking
    12ea:	2e 98       	cbi	0x05, 6	; 5
	SPI_send_byte(MCP2515_WRITE);
    12ec:	82 e0       	ldi	r24, 0x02	; 2
    12ee:	0e 94 77 0c 	call	0x18ee	; 0x18ee <SPI_send_byte>
	SPI_send_byte(reg_address);
    12f2:	8d 2f       	mov	r24, r29
    12f4:	0e 94 77 0c 	call	0x18ee	; 0x18ee <SPI_send_byte>
	SPI_send_byte(reg_value);
    12f8:	8c 2f       	mov	r24, r28
    12fa:	0e 94 77 0c 	call	0x18ee	; 0x18ee <SPI_send_byte>
	MCP2515_PORT_CS |= (1<<MCP2515_PIN_CS);			//set the CS.
    12fe:	2e 9a       	sbi	0x05, 6	; 5
	//if(MCP2515_reg_read(reg_address) == reg_value)flash_LED(1,RED_LED);
}
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	08 95       	ret

00001306 <MCP2515_instruction>:

void MCP2515_instruction(uint8_t instruction)
{
	MCP2515_PORT_CS &= ~(1<<MCP2515_PIN_CS);			//unset CS so MCP2515 knows we are talking
    1306:	2e 98       	cbi	0x05, 6	; 5
	SPI_send_byte(instruction);
    1308:	0e 94 77 0c 	call	0x18ee	; 0x18ee <SPI_send_byte>
	MCP2515_PORT_CS |= (1<<MCP2515_PIN_CS);			//set the CS.
    130c:	2e 9a       	sbi	0x05, 6	; 5
    130e:	08 95       	ret

00001310 <MCP2515_bit_modify>:
}


void MCP2515_bit_modify(uint8_t reg_address, uint8_t reg_value, uint8_t reg_mask)
{
    1310:	1f 93       	push	r17
    1312:	cf 93       	push	r28
    1314:	df 93       	push	r29
    1316:	18 2f       	mov	r17, r24
    1318:	c6 2f       	mov	r28, r22
    131a:	d4 2f       	mov	r29, r20
	MCP2515_PORT_CS &= ~(1<<MCP2515_PIN_CS);			//unset CS so MCP2515 knows we are talking
    131c:	2e 98       	cbi	0x05, 6	; 5
	SPI_send_byte(MCP2515_BITMODIFY);		//send instruction of bitmodify
    131e:	85 e0       	ldi	r24, 0x05	; 5
    1320:	0e 94 77 0c 	call	0x18ee	; 0x18ee <SPI_send_byte>
	SPI_send_byte(reg_address);				//send address
    1324:	81 2f       	mov	r24, r17
    1326:	0e 94 77 0c 	call	0x18ee	; 0x18ee <SPI_send_byte>
	SPI_send_byte(reg_mask);				//send the mask
    132a:	8d 2f       	mov	r24, r29
    132c:	0e 94 77 0c 	call	0x18ee	; 0x18ee <SPI_send_byte>
	SPI_send_byte(reg_value);				//send the data
    1330:	8c 2f       	mov	r24, r28
    1332:	0e 94 77 0c 	call	0x18ee	; 0x18ee <SPI_send_byte>
	MCP2515_PORT_CS |= (1<<MCP2515_PIN_CS);			//set the CS.
    1336:	2e 9a       	sbi	0x05, 6	; 5
}
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	1f 91       	pop	r17
    133e:	08 95       	ret

00001340 <MCP2515_init>:

void MCP2515_init()
{
	//DDRC |= (1<<MCP2515_PIN_RESET);		//set the reset pin to output

	MCP2515_PORT_RESET &= ~(1<<MCP2515_PIN_RESET);
    1340:	45 98       	cbi	0x08, 5	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1342:	87 ec       	ldi	r24, 0xC7	; 199
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	01 97       	sbiw	r24, 0x01	; 1
    1348:	f1 f7       	brne	.-4      	; 0x1346 <MCP2515_init+0x6>
    134a:	00 c0       	rjmp	.+0      	; 0x134c <MCP2515_init+0xc>
    134c:	00 00       	nop
	_delay_us(50);
	MCP2515_PORT_RESET |= (1<<MCP2515_PIN_RESET);
    134e:	45 9a       	sbi	0x08, 5	; 8


	//SPI_send_byte(MCP2515_RESET); //instead of hard reset, perform software rest.
	MCP2515_bit_modify(MCP2515_CANCTRL,128,0xE0);		//put the device into configuration mode.
    1350:	40 ee       	ldi	r20, 0xE0	; 224
    1352:	60 e8       	ldi	r22, 0x80	; 128
    1354:	8f e0       	ldi	r24, 0x0F	; 15
    1356:	0e 94 88 09 	call	0x1310	; 0x1310 <MCP2515_bit_modify>

	MCP2515_reg_write(MCP2515_CNF1, 0x04);	//SJW = 0(1),BRP = 4(5)--> number in brackets is actual value, as mcp2515 adds 1.
    135a:	64 e0       	ldi	r22, 0x04	; 4
    135c:	8a e2       	ldi	r24, 0x2A	; 42
    135e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
	MCP2515_reg_write(MCP2515_CNF2, 0xCA);	//BTL = 1, SAM = 1, PHSEG1 = 001(2), PRSEG = 010 (3)
    1362:	6a ec       	ldi	r22, 0xCA	; 202
    1364:	89 e2       	ldi	r24, 0x29	; 41
    1366:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
	MCP2515_reg_write(MCP2515_CNF3, 0x01);	//SOF = 0, WAKFIL = 0, PHSEG2 = 001(2).
    136a:	61 e0       	ldi	r22, 0x01	; 1
    136c:	88 e2       	ldi	r24, 0x28	; 40
    136e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
	MCP2515_reg_write(MCP2515_CANINTE, 0b00000011);	//enable interrupt in rx0, rx1, tx0, tx1, tx2.
    1372:	63 e0       	ldi	r22, 0x03	; 3
    1374:	8b e2       	ldi	r24, 0x2B	; 43
    1376:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
	MCP2515_reg_write(MCP2515_RTSCTRL, 0x01); //probably want to move this to a tx init function. eventually. if it aint broke don't fix it...
    137a:	61 e0       	ldi	r22, 0x01	; 1
    137c:	8d e0       	ldi	r24, 0x0D	; 13
    137e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
	//MCP2515_init_Rx();
	MCP2515_bit_modify(MCP2515_CANCTRL, 0x00, 0xE0);		//put the device into it's functional mode currently: normal 0xE0, listen is 0x60
    1382:	40 ee       	ldi	r20, 0xE0	; 224
    1384:	60 e0       	ldi	r22, 0x00	; 0
    1386:	8f e0       	ldi	r24, 0x0F	; 15
    1388:	0e 94 88 09 	call	0x1310	; 0x1310 <MCP2515_bit_modify>
    138c:	08 95       	ret

0000138e <MCP2515_receive_status>:
	SPI_send_byte(reg_value);				//send the data
	MCP2515_PORT_CS |= (1<<MCP2515_PIN_CS);			//set the CS.
}

uint8_t MCP2515_receive_status()
{
    138e:	cf 93       	push	r28
	uint8_t mcp2515_status[2];
	MCP2515_PORT_CS &= ~(1<<MCP2515_PIN_CS);			//unset CS so MCP2515 knows we are talking
    1390:	2e 98       	cbi	0x05, 6	; 5
	SPI_send_byte(0xA0);					//send retrieve status instruction
    1392:	80 ea       	ldi	r24, 0xA0	; 160
    1394:	0e 94 77 0c 	call	0x18ee	; 0x18ee <SPI_send_byte>
	mcp2515_status[0] = SPI_send_byte(0x00);//send don't care bits while mcp2515 is retrieving data.
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	0e 94 77 0c 	call	0x18ee	; 0x18ee <SPI_send_byte>
    139e:	c8 2f       	mov	r28, r24
	mcp2515_status[1] = SPI_send_byte(0x00);//duplicate data is retrieved again. nothing to do with this second lot yet.
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	0e 94 77 0c 	call	0x18ee	; 0x18ee <SPI_send_byte>
	MCP2515_PORT_CS |= (1<<MCP2515_PIN_CS);			//set the CS.
    13a6:	2e 9a       	sbi	0x05, 6	; 5
	return mcp2515_status[0];					//send it back for analysis.
}
    13a8:	8c 2f       	mov	r24, r28
    13aa:	cf 91       	pop	r28
    13ac:	08 95       	ret

000013ae <MCP2515_RxBufferRead>:
 * ---------------------------> this example will fill the data[8] array with bytes from RXB0D0-->RXB0D7
 *
 * This function also automatically clears the interrupt flag CANINTF.RX0IF(in this case)
 */
void MCP2515_RxBufferRead(uint8_t * data, uint8_t startingAddress)
{
    13ae:	cf 92       	push	r12
    13b0:	df 92       	push	r13
    13b2:	ef 92       	push	r14
    13b4:	ff 92       	push	r15
    13b6:	0f 93       	push	r16
    13b8:	1f 93       	push	r17
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
    13be:	08 2f       	mov	r16, r24
    13c0:	f9 2e       	mov	r15, r25

	//the following line combines the instruction(0b10010000), with: 0b100 for rxb0 or 0b000 for rxb1, and: 0b10 for data starting at data0, or 0b00 for SIDH
	uint8_t instruction = 0b10010000|((startingAddress > 0x70)<<2)|((startingAddress == MCP2515_RXB0D0 || startingAddress == MCP2515_RXB1D0)<<1);
    13c2:	61 37       	cpi	r22, 0x71	; 113
    13c4:	10 f4       	brcc	.+4      	; 0x13ca <MCP2515_RxBufferRead+0x1c>
    13c6:	10 e9       	ldi	r17, 0x90	; 144
    13c8:	01 c0       	rjmp	.+2      	; 0x13cc <MCP2515_RxBufferRead+0x1e>
    13ca:	14 e9       	ldi	r17, 0x94	; 148
    13cc:	6f 7e       	andi	r22, 0xEF	; 239
    13ce:	21 e0       	ldi	r18, 0x01	; 1
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	66 36       	cpi	r22, 0x66	; 102
    13d4:	11 f0       	breq	.+4      	; 0x13da <MCP2515_RxBufferRead+0x2c>
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	22 0f       	add	r18, r18
    13dc:	33 1f       	adc	r19, r19
    13de:	12 2b       	or	r17, r18
	MCP2515_PORT_CS &= ~(1<<MCP2515_PIN_CS);			//lower CS.
    13e0:	2e 98       	cbi	0x05, 6	; 5
	SPI_send_byte(instruction);							//send instruction for stream of data
    13e2:	81 2f       	mov	r24, r17
    13e4:	0e 94 77 0c 	call	0x18ee	; 0x18ee <SPI_send_byte>
	//loop counts to 8 or 12 depending on whether bit 1 of instruction is set.
	for(uint8_t counter = 0; counter < (8 + 4*((instruction & 2)==0)); counter++)
    13e8:	c0 2f       	mov	r28, r16
    13ea:	df 2d       	mov	r29, r15
    13ec:	12 70       	andi	r17, 0x02	; 2
    13ee:	0f 2e       	mov	r0, r31
    13f0:	fc e0       	ldi	r31, 0x0C	; 12
    13f2:	cf 2e       	mov	r12, r31
    13f4:	f0 2d       	mov	r31, r0
    13f6:	d1 2c       	mov	r13, r1
    13f8:	68 94       	set
    13fa:	ee 24       	eor	r14, r14
    13fc:	e3 f8       	bld	r14, 3
    13fe:	f1 2c       	mov	r15, r1
    1400:	04 c0       	rjmp	.+8      	; 0x140a <MCP2515_RxBufferRead+0x5c>
	{
		*data = SPI_send_byte(0x00);
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	0e 94 77 0c 	call	0x18ee	; 0x18ee <SPI_send_byte>
    1408:	89 93       	st	Y+, r24
    140a:	2c 2f       	mov	r18, r28
    140c:	20 1b       	sub	r18, r16
	//the following line combines the instruction(0b10010000), with: 0b100 for rxb0 or 0b000 for rxb1, and: 0b10 for data starting at data0, or 0b00 for SIDH
	uint8_t instruction = 0b10010000|((startingAddress > 0x70)<<2)|((startingAddress == MCP2515_RXB0D0 || startingAddress == MCP2515_RXB1D0)<<1);
	MCP2515_PORT_CS &= ~(1<<MCP2515_PIN_CS);			//lower CS.
	SPI_send_byte(instruction);							//send instruction for stream of data
	//loop counts to 8 or 12 depending on whether bit 1 of instruction is set.
	for(uint8_t counter = 0; counter < (8 + 4*((instruction & 2)==0)); counter++)
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	11 23       	and	r17, r17
    1412:	19 f0       	breq	.+6      	; 0x141a <MCP2515_RxBufferRead+0x6c>
    1414:	4e 2d       	mov	r20, r14
    1416:	5f 2d       	mov	r21, r15
    1418:	02 c0       	rjmp	.+4      	; 0x141e <MCP2515_RxBufferRead+0x70>
    141a:	4c 2d       	mov	r20, r12
    141c:	5d 2d       	mov	r21, r13
    141e:	24 17       	cp	r18, r20
    1420:	35 07       	cpc	r19, r21
    1422:	7c f3       	brlt	.-34     	; 0x1402 <MCP2515_RxBufferRead+0x54>
	{
		*data = SPI_send_byte(0x00);
		data++;
	}
	MCP2515_PORT_CS |= (1<<MCP2515_PIN_CS);				//raise CS.
    1424:	2e 9a       	sbi	0x05, 6	; 5
}
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	1f 91       	pop	r17
    142c:	0f 91       	pop	r16
    142e:	ff 90       	pop	r15
    1430:	ef 90       	pop	r14
    1432:	df 90       	pop	r13
    1434:	cf 90       	pop	r12
    1436:	08 95       	ret

00001438 <MCP2515_reg_read>:

uint8_t MCP2515_reg_read(uint8_t reg_address)
{
    1438:	cf 93       	push	r28
    143a:	c8 2f       	mov	r28, r24
	uint8_t read_result;
	MCP2515_PORT_CS &= ~(1<<MCP2515_PIN_CS);			//unset CS so MCP2515 knows we are talking
    143c:	2e 98       	cbi	0x05, 6	; 5
	SPI_send_byte(0x03);
    143e:	83 e0       	ldi	r24, 0x03	; 3
    1440:	0e 94 77 0c 	call	0x18ee	; 0x18ee <SPI_send_byte>
	SPI_send_byte(reg_address);
    1444:	8c 2f       	mov	r24, r28
    1446:	0e 94 77 0c 	call	0x18ee	; 0x18ee <SPI_send_byte>
	read_result = SPI_send_byte(0x00);
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	0e 94 77 0c 	call	0x18ee	; 0x18ee <SPI_send_byte>
	MCP2515_PORT_CS |= (1<<MCP2515_PIN_CS);			//set the CS.
    1450:	2e 9a       	sbi	0x05, 6	; 5
	return read_result;
}
    1452:	cf 91       	pop	r28
    1454:	08 95       	ret

00001456 <MCP2515_findFreeTxBuffer>:
uint8_t MCP2515_findFreeTxBuffer()
{
	//uint8_t MCP2515_TxBuffer = 0;
	//flash_LED(1,RED_LED);
	//MCP2515_TxBuffer = (MCP2515_reg_read(MCP2515_CANINTF)& 0b00011100);			//get interrupt status, only the txbuffer empty ones though
	if		((MCP2515_reg_read(MCP2515_TX0) & 0b00001000)== 0)						//if tx0 is free,
    1456:	80 e3       	ldi	r24, 0x30	; 48
    1458:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MCP2515_reg_read>
    145c:	83 ff       	sbrs	r24, 3
    145e:	0c c0       	rjmp	.+24     	; 0x1478 <MCP2515_findFreeTxBuffer+0x22>
	{
		return MCP2515_TX0;
	}
	else if	((MCP2515_reg_read(MCP2515_TX1) & 0b00001000)== 0)						//if tx1 is free,
    1460:	80 e4       	ldi	r24, 0x40	; 64
    1462:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MCP2515_reg_read>
    1466:	83 ff       	sbrs	r24, 3
    1468:	09 c0       	rjmp	.+18     	; 0x147c <MCP2515_findFreeTxBuffer+0x26>
	{
		return MCP2515_TX1;
	}
	else if	((MCP2515_reg_read(MCP2515_TX2) & 0b00001000)== 0)						//if tx2 is free,
    146a:	80 e5       	ldi	r24, 0x50	; 80
    146c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <MCP2515_reg_read>
    1470:	83 ff       	sbrs	r24, 3
    1472:	06 c0       	rjmp	.+12     	; 0x1480 <MCP2515_findFreeTxBuffer+0x2a>
	{
		return MCP2515_TX2;
	}
	else {return 0x00;	}														//otherwise none are free.
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	08 95       	ret
	//uint8_t MCP2515_TxBuffer = 0;
	//flash_LED(1,RED_LED);
	//MCP2515_TxBuffer = (MCP2515_reg_read(MCP2515_CANINTF)& 0b00011100);			//get interrupt status, only the txbuffer empty ones though
	if		((MCP2515_reg_read(MCP2515_TX0) & 0b00001000)== 0)						//if tx0 is free,
	{
		return MCP2515_TX0;
    1478:	80 e3       	ldi	r24, 0x30	; 48
    147a:	08 95       	ret
	}
	else if	((MCP2515_reg_read(MCP2515_TX1) & 0b00001000)== 0)						//if tx1 is free,
	{
		return MCP2515_TX1;
    147c:	80 e4       	ldi	r24, 0x40	; 64
    147e:	08 95       	ret
	}
	else if	((MCP2515_reg_read(MCP2515_TX2) & 0b00001000)== 0)						//if tx2 is free,
	{
		return MCP2515_TX2;
    1480:	80 e5       	ldi	r24, 0x50	; 80
	}
	else {return 0x00;	}														//otherwise none are free.
}
    1482:	08 95       	ret

00001484 <MCP2515_FilterInit>:

void MCP2515_FilterInit(uint8_t filterNum, uint32_t filterID)
{
    1484:	cf 92       	push	r12
    1486:	df 92       	push	r13
    1488:	ef 92       	push	r14
    148a:	ff 92       	push	r15
    148c:	6a 01       	movw	r12, r20
    148e:	7b 01       	movw	r14, r22
	switch(filterNum)
    1490:	82 30       	cpi	r24, 0x02	; 2
    1492:	09 f4       	brne	.+2      	; 0x1496 <MCP2515_FilterInit+0x12>
    1494:	69 c0       	rjmp	.+210    	; 0x1568 <MCP2515_FilterInit+0xe4>
    1496:	28 f4       	brcc	.+10     	; 0x14a2 <MCP2515_FilterInit+0x1e>
    1498:	88 23       	and	r24, r24
    149a:	61 f0       	breq	.+24     	; 0x14b4 <MCP2515_FilterInit+0x30>
    149c:	81 30       	cpi	r24, 0x01	; 1
    149e:	b9 f1       	breq	.+110    	; 0x150e <MCP2515_FilterInit+0x8a>
    14a0:	17 c1       	rjmp	.+558    	; 0x16d0 <MCP2515_FilterInit+0x24c>
    14a2:	84 30       	cpi	r24, 0x04	; 4
    14a4:	09 f4       	brne	.+2      	; 0x14a8 <MCP2515_FilterInit+0x24>
    14a6:	ba c0       	rjmp	.+372    	; 0x161c <MCP2515_FilterInit+0x198>
    14a8:	08 f4       	brcc	.+2      	; 0x14ac <MCP2515_FilterInit+0x28>
    14aa:	8b c0       	rjmp	.+278    	; 0x15c2 <MCP2515_FilterInit+0x13e>
    14ac:	85 30       	cpi	r24, 0x05	; 5
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <MCP2515_FilterInit+0x2e>
    14b0:	e2 c0       	rjmp	.+452    	; 0x1676 <MCP2515_FilterInit+0x1f2>
    14b2:	0e c1       	rjmp	.+540    	; 0x16d0 <MCP2515_FilterInit+0x24c>
	{
		case 0:
			MCP2515_reg_write(MCP2515_RXF0SIDH, (filterID>>21) & 0xFF);
    14b4:	cb 01       	movw	r24, r22
    14b6:	ba 01       	movw	r22, r20
    14b8:	05 2e       	mov	r0, r21
    14ba:	55 e1       	ldi	r21, 0x15	; 21
    14bc:	96 95       	lsr	r25
    14be:	87 95       	ror	r24
    14c0:	77 95       	ror	r23
    14c2:	67 95       	ror	r22
    14c4:	5a 95       	dec	r21
    14c6:	d1 f7       	brne	.-12     	; 0x14bc <MCP2515_FilterInit+0x38>
    14c8:	50 2d       	mov	r21, r0
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
			MCP2515_reg_write(MCP2515_RXF0SIDL, (((filterID>>13) & 224)| ((filterID>>16) & 3) | ((1<<3) & 0xFF)));
    14d0:	d7 01       	movw	r26, r14
    14d2:	c6 01       	movw	r24, r12
    14d4:	07 2e       	mov	r0, r23
    14d6:	7d e0       	ldi	r23, 0x0D	; 13
    14d8:	b6 95       	lsr	r27
    14da:	a7 95       	ror	r26
    14dc:	97 95       	ror	r25
    14de:	87 95       	ror	r24
    14e0:	7a 95       	dec	r23
    14e2:	d1 f7       	brne	.-12     	; 0x14d8 <MCP2515_FilterInit+0x54>
    14e4:	70 2d       	mov	r23, r0
    14e6:	68 2f       	mov	r22, r24
    14e8:	60 7e       	andi	r22, 0xE0	; 224
    14ea:	8e 2d       	mov	r24, r14
    14ec:	83 70       	andi	r24, 0x03	; 3
    14ee:	68 2b       	or	r22, r24
    14f0:	68 60       	ori	r22, 0x08	; 8
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
			MCP2515_reg_write(MCP2515_RXF0EID8, (filterID>>8) & 0xFF );
    14f8:	99 27       	eor	r25, r25
    14fa:	8f 2d       	mov	r24, r15
    14fc:	7e 2d       	mov	r23, r14
    14fe:	6d 2d       	mov	r22, r13
    1500:	82 e0       	ldi	r24, 0x02	; 2
    1502:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
			MCP2515_reg_write(MCP2515_RXF0EID0, filterID & 0xFF );
    1506:	6c 2d       	mov	r22, r12
    1508:	83 e0       	ldi	r24, 0x03	; 3
    150a:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
		case 1:
			MCP2515_reg_write(MCP2515_RXF1SIDH, (filterID>>21) & 0xFF);
    150e:	c7 01       	movw	r24, r14
    1510:	b6 01       	movw	r22, r12
    1512:	05 2e       	mov	r0, r21
    1514:	55 e1       	ldi	r21, 0x15	; 21
    1516:	96 95       	lsr	r25
    1518:	87 95       	ror	r24
    151a:	77 95       	ror	r23
    151c:	67 95       	ror	r22
    151e:	5a 95       	dec	r21
    1520:	d1 f7       	brne	.-12     	; 0x1516 <MCP2515_FilterInit+0x92>
    1522:	50 2d       	mov	r21, r0
    1524:	84 e0       	ldi	r24, 0x04	; 4
    1526:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
			MCP2515_reg_write(MCP2515_RXF1SIDL, (((filterID>>13) & 224)| ((filterID>>16) & 3) | ((1<<3) & 0xFF)));
    152a:	d7 01       	movw	r26, r14
    152c:	c6 01       	movw	r24, r12
    152e:	07 2e       	mov	r0, r23
    1530:	7d e0       	ldi	r23, 0x0D	; 13
    1532:	b6 95       	lsr	r27
    1534:	a7 95       	ror	r26
    1536:	97 95       	ror	r25
    1538:	87 95       	ror	r24
    153a:	7a 95       	dec	r23
    153c:	d1 f7       	brne	.-12     	; 0x1532 <MCP2515_FilterInit+0xae>
    153e:	70 2d       	mov	r23, r0
    1540:	68 2f       	mov	r22, r24
    1542:	60 7e       	andi	r22, 0xE0	; 224
    1544:	8e 2d       	mov	r24, r14
    1546:	83 70       	andi	r24, 0x03	; 3
    1548:	68 2b       	or	r22, r24
    154a:	68 60       	ori	r22, 0x08	; 8
    154c:	85 e0       	ldi	r24, 0x05	; 5
    154e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
			MCP2515_reg_write(MCP2515_RXF1EID8, (filterID>>8) & 0xFF );
    1552:	99 27       	eor	r25, r25
    1554:	8f 2d       	mov	r24, r15
    1556:	7e 2d       	mov	r23, r14
    1558:	6d 2d       	mov	r22, r13
    155a:	86 e0       	ldi	r24, 0x06	; 6
    155c:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
			MCP2515_reg_write(MCP2515_RXF1EID0, filterID & 0xFF );
    1560:	6c 2d       	mov	r22, r12
    1562:	87 e0       	ldi	r24, 0x07	; 7
    1564:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
		case 2:
			MCP2515_reg_write(MCP2515_RXF2SIDH, (filterID>>21) & 0xFF);
    1568:	c7 01       	movw	r24, r14
    156a:	b6 01       	movw	r22, r12
    156c:	05 2e       	mov	r0, r21
    156e:	55 e1       	ldi	r21, 0x15	; 21
    1570:	96 95       	lsr	r25
    1572:	87 95       	ror	r24
    1574:	77 95       	ror	r23
    1576:	67 95       	ror	r22
    1578:	5a 95       	dec	r21
    157a:	d1 f7       	brne	.-12     	; 0x1570 <MCP2515_FilterInit+0xec>
    157c:	50 2d       	mov	r21, r0
    157e:	88 e0       	ldi	r24, 0x08	; 8
    1580:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
			MCP2515_reg_write(MCP2515_RXF2SIDL, (((filterID>>13) & 224)| ((filterID>>16) & 3) | ((1<<3) & 0xFF)));
    1584:	d7 01       	movw	r26, r14
    1586:	c6 01       	movw	r24, r12
    1588:	07 2e       	mov	r0, r23
    158a:	7d e0       	ldi	r23, 0x0D	; 13
    158c:	b6 95       	lsr	r27
    158e:	a7 95       	ror	r26
    1590:	97 95       	ror	r25
    1592:	87 95       	ror	r24
    1594:	7a 95       	dec	r23
    1596:	d1 f7       	brne	.-12     	; 0x158c <MCP2515_FilterInit+0x108>
    1598:	70 2d       	mov	r23, r0
    159a:	68 2f       	mov	r22, r24
    159c:	60 7e       	andi	r22, 0xE0	; 224
    159e:	8e 2d       	mov	r24, r14
    15a0:	83 70       	andi	r24, 0x03	; 3
    15a2:	68 2b       	or	r22, r24
    15a4:	68 60       	ori	r22, 0x08	; 8
    15a6:	89 e0       	ldi	r24, 0x09	; 9
    15a8:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
			MCP2515_reg_write(MCP2515_RXF2EID8, (filterID>>8) & 0xFF );
    15ac:	99 27       	eor	r25, r25
    15ae:	8f 2d       	mov	r24, r15
    15b0:	7e 2d       	mov	r23, r14
    15b2:	6d 2d       	mov	r22, r13
    15b4:	8a e0       	ldi	r24, 0x0A	; 10
    15b6:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
			MCP2515_reg_write(MCP2515_RXF2EID0, filterID & 0xFF );
    15ba:	6c 2d       	mov	r22, r12
    15bc:	8b e0       	ldi	r24, 0x0B	; 11
    15be:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
		case 3:
			MCP2515_reg_write(MCP2515_RXF3SIDH, (filterID>>21) & 0xFF);
    15c2:	c7 01       	movw	r24, r14
    15c4:	b6 01       	movw	r22, r12
    15c6:	05 2e       	mov	r0, r21
    15c8:	55 e1       	ldi	r21, 0x15	; 21
    15ca:	96 95       	lsr	r25
    15cc:	87 95       	ror	r24
    15ce:	77 95       	ror	r23
    15d0:	67 95       	ror	r22
    15d2:	5a 95       	dec	r21
    15d4:	d1 f7       	brne	.-12     	; 0x15ca <MCP2515_FilterInit+0x146>
    15d6:	50 2d       	mov	r21, r0
    15d8:	80 e1       	ldi	r24, 0x10	; 16
    15da:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
			MCP2515_reg_write(MCP2515_RXF3SIDL, (((filterID>>13) & 224)| ((filterID>>16) & 3) | ((1<<3) & 0xFF)));
    15de:	d7 01       	movw	r26, r14
    15e0:	c6 01       	movw	r24, r12
    15e2:	07 2e       	mov	r0, r23
    15e4:	7d e0       	ldi	r23, 0x0D	; 13
    15e6:	b6 95       	lsr	r27
    15e8:	a7 95       	ror	r26
    15ea:	97 95       	ror	r25
    15ec:	87 95       	ror	r24
    15ee:	7a 95       	dec	r23
    15f0:	d1 f7       	brne	.-12     	; 0x15e6 <MCP2515_FilterInit+0x162>
    15f2:	70 2d       	mov	r23, r0
    15f4:	68 2f       	mov	r22, r24
    15f6:	60 7e       	andi	r22, 0xE0	; 224
    15f8:	8e 2d       	mov	r24, r14
    15fa:	83 70       	andi	r24, 0x03	; 3
    15fc:	68 2b       	or	r22, r24
    15fe:	68 60       	ori	r22, 0x08	; 8
    1600:	81 e1       	ldi	r24, 0x11	; 17
    1602:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
			MCP2515_reg_write(MCP2515_RXF3EID8, (filterID>>8) & 0xFF );
    1606:	99 27       	eor	r25, r25
    1608:	8f 2d       	mov	r24, r15
    160a:	7e 2d       	mov	r23, r14
    160c:	6d 2d       	mov	r22, r13
    160e:	82 e1       	ldi	r24, 0x12	; 18
    1610:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
			MCP2515_reg_write(MCP2515_RXF3EID0, filterID & 0xFF );
    1614:	6c 2d       	mov	r22, r12
    1616:	83 e1       	ldi	r24, 0x13	; 19
    1618:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
		case 4:
			MCP2515_reg_write(MCP2515_RXF4SIDH, (filterID>>21) & 0xFF);
    161c:	c7 01       	movw	r24, r14
    161e:	b6 01       	movw	r22, r12
    1620:	05 2e       	mov	r0, r21
    1622:	55 e1       	ldi	r21, 0x15	; 21
    1624:	96 95       	lsr	r25
    1626:	87 95       	ror	r24
    1628:	77 95       	ror	r23
    162a:	67 95       	ror	r22
    162c:	5a 95       	dec	r21
    162e:	d1 f7       	brne	.-12     	; 0x1624 <MCP2515_FilterInit+0x1a0>
    1630:	50 2d       	mov	r21, r0
    1632:	84 e1       	ldi	r24, 0x14	; 20
    1634:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
			MCP2515_reg_write(MCP2515_RXF4SIDL, (((filterID>>13) & 224)| ((filterID>>16) & 3) | ((1<<3) & 0xFF)));
    1638:	d7 01       	movw	r26, r14
    163a:	c6 01       	movw	r24, r12
    163c:	07 2e       	mov	r0, r23
    163e:	7d e0       	ldi	r23, 0x0D	; 13
    1640:	b6 95       	lsr	r27
    1642:	a7 95       	ror	r26
    1644:	97 95       	ror	r25
    1646:	87 95       	ror	r24
    1648:	7a 95       	dec	r23
    164a:	d1 f7       	brne	.-12     	; 0x1640 <MCP2515_FilterInit+0x1bc>
    164c:	70 2d       	mov	r23, r0
    164e:	68 2f       	mov	r22, r24
    1650:	60 7e       	andi	r22, 0xE0	; 224
    1652:	8e 2d       	mov	r24, r14
    1654:	83 70       	andi	r24, 0x03	; 3
    1656:	68 2b       	or	r22, r24
    1658:	68 60       	ori	r22, 0x08	; 8
    165a:	85 e1       	ldi	r24, 0x15	; 21
    165c:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
			MCP2515_reg_write(MCP2515_RXF4EID8, (filterID>>8) & 0xFF );
    1660:	99 27       	eor	r25, r25
    1662:	8f 2d       	mov	r24, r15
    1664:	7e 2d       	mov	r23, r14
    1666:	6d 2d       	mov	r22, r13
    1668:	86 e1       	ldi	r24, 0x16	; 22
    166a:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
			MCP2515_reg_write(MCP2515_RXF4EID0, filterID & 0xFF );
    166e:	6c 2d       	mov	r22, r12
    1670:	87 e1       	ldi	r24, 0x17	; 23
    1672:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
		case 5:
			MCP2515_reg_write(MCP2515_RXF5SIDH, (filterID>>21) & 0xFF);
    1676:	c7 01       	movw	r24, r14
    1678:	b6 01       	movw	r22, r12
    167a:	05 2e       	mov	r0, r21
    167c:	55 e1       	ldi	r21, 0x15	; 21
    167e:	96 95       	lsr	r25
    1680:	87 95       	ror	r24
    1682:	77 95       	ror	r23
    1684:	67 95       	ror	r22
    1686:	5a 95       	dec	r21
    1688:	d1 f7       	brne	.-12     	; 0x167e <MCP2515_FilterInit+0x1fa>
    168a:	50 2d       	mov	r21, r0
    168c:	88 e1       	ldi	r24, 0x18	; 24
    168e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
			MCP2515_reg_write(MCP2515_RXF5SIDL, (((filterID>>13) & 224)| ((filterID>>16) & 3) | ((1<<3) & 0xFF)));
    1692:	d7 01       	movw	r26, r14
    1694:	c6 01       	movw	r24, r12
    1696:	07 2e       	mov	r0, r23
    1698:	7d e0       	ldi	r23, 0x0D	; 13
    169a:	b6 95       	lsr	r27
    169c:	a7 95       	ror	r26
    169e:	97 95       	ror	r25
    16a0:	87 95       	ror	r24
    16a2:	7a 95       	dec	r23
    16a4:	d1 f7       	brne	.-12     	; 0x169a <MCP2515_FilterInit+0x216>
    16a6:	70 2d       	mov	r23, r0
    16a8:	68 2f       	mov	r22, r24
    16aa:	60 7e       	andi	r22, 0xE0	; 224
    16ac:	8e 2d       	mov	r24, r14
    16ae:	83 70       	andi	r24, 0x03	; 3
    16b0:	68 2b       	or	r22, r24
    16b2:	68 60       	ori	r22, 0x08	; 8
    16b4:	89 e1       	ldi	r24, 0x19	; 25
    16b6:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
			MCP2515_reg_write(MCP2515_RXF5EID8, (filterID>>8) & 0xFF );
    16ba:	99 27       	eor	r25, r25
    16bc:	8f 2d       	mov	r24, r15
    16be:	7e 2d       	mov	r23, r14
    16c0:	6d 2d       	mov	r22, r13
    16c2:	8a e1       	ldi	r24, 0x1A	; 26
    16c4:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
			MCP2515_reg_write(MCP2515_RXF5EID0, filterID & 0xFF );
    16c8:	6c 2d       	mov	r22, r12
    16ca:	8b e1       	ldi	r24, 0x1B	; 27
    16cc:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
			
	}
		
}
    16d0:	ff 90       	pop	r15
    16d2:	ef 90       	pop	r14
    16d4:	df 90       	pop	r13
    16d6:	cf 90       	pop	r12
    16d8:	08 95       	ret

000016da <MCP2515_RXInit>:

uint8_t MCP2515_RXInit(int8_t mob, uint32_t IDmsk)	//write IDmsk 0 if you do not wish to use a mask, and this MOB will receive all messages
{
    16da:	cf 92       	push	r12
    16dc:	df 92       	push	r13
    16de:	ef 92       	push	r14
    16e0:	ff 92       	push	r15
    16e2:	6a 01       	movw	r12, r20
    16e4:	7b 01       	movw	r14, r22
	if (mob > 1)return 0;
    16e6:	82 30       	cpi	r24, 0x02	; 2
    16e8:	0c f0       	brlt	.+2      	; 0x16ec <MCP2515_RXInit+0x12>
    16ea:	79 c0       	rjmp	.+242    	; 0x17de <MCP2515_RXInit+0x104>
	switch(mob)
    16ec:	88 23       	and	r24, r24
    16ee:	19 f0       	breq	.+6      	; 0x16f6 <MCP2515_RXInit+0x1c>
    16f0:	81 30       	cpi	r24, 0x01	; 1
    16f2:	d1 f1       	breq	.+116    	; 0x1768 <MCP2515_RXInit+0x8e>
    16f4:	76 c0       	rjmp	.+236    	; 0x17e2 <MCP2515_RXInit+0x108>
	{
		case 0:
			MCP2515_reg_write(MCP2515_RXM0SIDH, (IDmsk>>21) & 0xFF);	//shift the 32 bit mask into the respective registers
    16f6:	cb 01       	movw	r24, r22
    16f8:	ba 01       	movw	r22, r20
    16fa:	05 2e       	mov	r0, r21
    16fc:	55 e1       	ldi	r21, 0x15	; 21
    16fe:	96 95       	lsr	r25
    1700:	87 95       	ror	r24
    1702:	77 95       	ror	r23
    1704:	67 95       	ror	r22
    1706:	5a 95       	dec	r21
    1708:	d1 f7       	brne	.-12     	; 0x16fe <MCP2515_RXInit+0x24>
    170a:	50 2d       	mov	r21, r0
    170c:	80 e2       	ldi	r24, 0x20	; 32
    170e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
			MCP2515_reg_write(MCP2515_RXM0SIDL, (((IDmsk>>13) & 224)| ((IDmsk>>16) & 3)));
    1712:	d7 01       	movw	r26, r14
    1714:	c6 01       	movw	r24, r12
    1716:	07 2e       	mov	r0, r23
    1718:	7d e0       	ldi	r23, 0x0D	; 13
    171a:	b6 95       	lsr	r27
    171c:	a7 95       	ror	r26
    171e:	97 95       	ror	r25
    1720:	87 95       	ror	r24
    1722:	7a 95       	dec	r23
    1724:	d1 f7       	brne	.-12     	; 0x171a <MCP2515_RXInit+0x40>
    1726:	70 2d       	mov	r23, r0
    1728:	80 7e       	andi	r24, 0xE0	; 224
    172a:	6e 2d       	mov	r22, r14
    172c:	63 70       	andi	r22, 0x03	; 3
    172e:	68 2b       	or	r22, r24
    1730:	81 e2       	ldi	r24, 0x21	; 33
    1732:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
			MCP2515_reg_write(MCP2515_RXM0EID8, (IDmsk>>8) & 0xFF );
    1736:	99 27       	eor	r25, r25
    1738:	8f 2d       	mov	r24, r15
    173a:	7e 2d       	mov	r23, r14
    173c:	6d 2d       	mov	r22, r13
    173e:	82 e2       	ldi	r24, 0x22	; 34
    1740:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
			MCP2515_reg_write(MCP2515_RXM0EID0, IDmsk & 0xFF );
    1744:	6c 2d       	mov	r22, r12
    1746:	83 e2       	ldi	r24, 0x23	; 35
    1748:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
			if(IDmsk) MCP2515_reg_write(MCP2515_RXB0CTRL, 0b00000100);	//Enable reception using masks and filters. Enable BUKT bit, which enables RXB1 to be used if RXB0 is full
    174c:	c1 14       	cp	r12, r1
    174e:	d1 04       	cpc	r13, r1
    1750:	e1 04       	cpc	r14, r1
    1752:	f1 04       	cpc	r15, r1
    1754:	29 f0       	breq	.+10     	; 0x1760 <MCP2515_RXInit+0x86>
    1756:	64 e0       	ldi	r22, 0x04	; 4
    1758:	80 e6       	ldi	r24, 0x60	; 96
    175a:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
    175e:	04 c0       	rjmp	.+8      	; 0x1768 <MCP2515_RXInit+0x8e>
			else MCP2515_reg_write(MCP2515_RXB0CTRL, 0b01100100);		//Enable reception without masks and filters. 
    1760:	64 e6       	ldi	r22, 0x64	; 100
    1762:	80 e6       	ldi	r24, 0x60	; 96
    1764:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
		case 1:
			MCP2515_reg_write(MCP2515_RXM1SIDH, (IDmsk>>21) & 0xFF);	//shift the 32 bit mask into the respective registers
    1768:	c7 01       	movw	r24, r14
    176a:	b6 01       	movw	r22, r12
    176c:	05 2e       	mov	r0, r21
    176e:	55 e1       	ldi	r21, 0x15	; 21
    1770:	96 95       	lsr	r25
    1772:	87 95       	ror	r24
    1774:	77 95       	ror	r23
    1776:	67 95       	ror	r22
    1778:	5a 95       	dec	r21
    177a:	d1 f7       	brne	.-12     	; 0x1770 <MCP2515_RXInit+0x96>
    177c:	50 2d       	mov	r21, r0
    177e:	84 e2       	ldi	r24, 0x24	; 36
    1780:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
			MCP2515_reg_write(MCP2515_RXM1SIDL, (((IDmsk>>13) & 224)| ((IDmsk>>16) & 3)));
    1784:	6e 2d       	mov	r22, r14
    1786:	63 70       	andi	r22, 0x03	; 3
    1788:	d7 01       	movw	r26, r14
    178a:	c6 01       	movw	r24, r12
    178c:	07 2e       	mov	r0, r23
    178e:	7d e0       	ldi	r23, 0x0D	; 13
    1790:	b6 95       	lsr	r27
    1792:	a7 95       	ror	r26
    1794:	97 95       	ror	r25
    1796:	87 95       	ror	r24
    1798:	7a 95       	dec	r23
    179a:	d1 f7       	brne	.-12     	; 0x1790 <MCP2515_RXInit+0xb6>
    179c:	70 2d       	mov	r23, r0
    179e:	80 7e       	andi	r24, 0xE0	; 224
    17a0:	68 2b       	or	r22, r24
    17a2:	85 e2       	ldi	r24, 0x25	; 37
    17a4:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
			MCP2515_reg_write(MCP2515_RXM1EID8, (IDmsk>>8) & 0xFF );
    17a8:	99 27       	eor	r25, r25
    17aa:	8f 2d       	mov	r24, r15
    17ac:	7e 2d       	mov	r23, r14
    17ae:	6d 2d       	mov	r22, r13
    17b0:	86 e2       	ldi	r24, 0x26	; 38
    17b2:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
			MCP2515_reg_write(MCP2515_RXM1EID0, IDmsk & 0xFF );
    17b6:	6c 2d       	mov	r22, r12
    17b8:	87 e2       	ldi	r24, 0x27	; 39
    17ba:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
			if(IDmsk) MCP2515_reg_write(MCP2515_RXB1CTRL, 0b00000000);	//Enable reception using masks and filters. 
    17be:	cd 28       	or	r12, r13
    17c0:	ce 28       	or	r12, r14
    17c2:	cf 28       	or	r12, r15
    17c4:	31 f0       	breq	.+12     	; 0x17d2 <MCP2515_RXInit+0xf8>
    17c6:	60 e0       	ldi	r22, 0x00	; 0
    17c8:	80 e7       	ldi	r24, 0x70	; 112
    17ca:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
			else MCP2515_reg_write(MCP2515_RXB1CTRL, 0b01100000);		//Enable reception without masks and filters.
	}	
	return 1;
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	09 c0       	rjmp	.+18     	; 0x17e4 <MCP2515_RXInit+0x10a>
			MCP2515_reg_write(MCP2515_RXM1SIDH, (IDmsk>>21) & 0xFF);	//shift the 32 bit mask into the respective registers
			MCP2515_reg_write(MCP2515_RXM1SIDL, (((IDmsk>>13) & 224)| ((IDmsk>>16) & 3)));
			MCP2515_reg_write(MCP2515_RXM1EID8, (IDmsk>>8) & 0xFF );
			MCP2515_reg_write(MCP2515_RXM1EID0, IDmsk & 0xFF );
			if(IDmsk) MCP2515_reg_write(MCP2515_RXB1CTRL, 0b00000000);	//Enable reception using masks and filters. 
			else MCP2515_reg_write(MCP2515_RXB1CTRL, 0b01100000);		//Enable reception without masks and filters.
    17d2:	60 e6       	ldi	r22, 0x60	; 96
    17d4:	80 e7       	ldi	r24, 0x70	; 112
    17d6:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
	}	
	return 1;
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	03 c0       	rjmp	.+6      	; 0x17e4 <MCP2515_RXInit+0x10a>
		
}

uint8_t MCP2515_RXInit(int8_t mob, uint32_t IDmsk)	//write IDmsk 0 if you do not wish to use a mask, and this MOB will receive all messages
{
	if (mob > 1)return 0;
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	01 c0       	rjmp	.+2      	; 0x17e4 <MCP2515_RXInit+0x10a>
			MCP2515_reg_write(MCP2515_RXM1EID8, (IDmsk>>8) & 0xFF );
			MCP2515_reg_write(MCP2515_RXM1EID0, IDmsk & 0xFF );
			if(IDmsk) MCP2515_reg_write(MCP2515_RXB1CTRL, 0b00000000);	//Enable reception using masks and filters. 
			else MCP2515_reg_write(MCP2515_RXB1CTRL, 0b01100000);		//Enable reception without masks and filters.
	}	
	return 1;
    17e2:	81 e0       	ldi	r24, 0x01	; 1
}
    17e4:	ff 90       	pop	r15
    17e6:	ef 90       	pop	r14
    17e8:	df 90       	pop	r13
    17ea:	cf 90       	pop	r12
    17ec:	08 95       	ret

000017ee <MCP2515_TX>:

void MCP2515_TX(int8_t mob, uint8_t numBytes, uint8_t * data, uint32_t ID)
{
    17ee:	8f 92       	push	r8
    17f0:	9f 92       	push	r9
    17f2:	af 92       	push	r10
    17f4:	bf 92       	push	r11
    17f6:	cf 92       	push	r12
    17f8:	df 92       	push	r13
    17fa:	ef 92       	push	r14
    17fc:	ff 92       	push	r15
    17fe:	0f 93       	push	r16
    1800:	1f 93       	push	r17
    1802:	cf 93       	push	r28
    1804:	df 93       	push	r29
    1806:	d8 2f       	mov	r29, r24
    1808:	f6 2e       	mov	r15, r22
    180a:	6a 01       	movw	r12, r20
    180c:	48 01       	movw	r8, r16
    180e:	59 01       	movw	r10, r18
	if(mob == 0)return;						//no free mob or invalid mob
    1810:	88 23       	and	r24, r24
    1812:	09 f4       	brne	.+2      	; 0x1816 <MCP2515_TX+0x28>
    1814:	5f c0       	rjmp	.+190    	; 0x18d4 <MCP2515_TX+0xe6>
	MCP2515_reg_write(mob, 0x03);			//we shall set this to the highest priority so that it sends it immediately.
    1816:	63 e0       	ldi	r22, 0x03	; 3
    1818:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
	MCP2515_reg_write(mob+1, (ID>>21) & 0xFF);	//shift the ID data to fill the respective MCP registers
    181c:	c5 01       	movw	r24, r10
    181e:	b4 01       	movw	r22, r8
    1820:	05 2e       	mov	r0, r21
    1822:	55 e1       	ldi	r21, 0x15	; 21
    1824:	96 95       	lsr	r25
    1826:	87 95       	ror	r24
    1828:	77 95       	ror	r23
    182a:	67 95       	ror	r22
    182c:	5a 95       	dec	r21
    182e:	d1 f7       	brne	.-12     	; 0x1824 <MCP2515_TX+0x36>
    1830:	50 2d       	mov	r21, r0
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	8d 0f       	add	r24, r29
    1836:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
	MCP2515_reg_write(mob+2, (((ID>>13) & 224)| ((ID>>16) & 3) | ((1<<3) & 0xFF)));	//set the EXIDE bit, which makes it extended (CAN 2.0B)
    183a:	d5 01       	movw	r26, r10
    183c:	c4 01       	movw	r24, r8
    183e:	07 2e       	mov	r0, r23
    1840:	7d e0       	ldi	r23, 0x0D	; 13
    1842:	b6 95       	lsr	r27
    1844:	a7 95       	ror	r26
    1846:	97 95       	ror	r25
    1848:	87 95       	ror	r24
    184a:	7a 95       	dec	r23
    184c:	d1 f7       	brne	.-12     	; 0x1842 <MCP2515_TX+0x54>
    184e:	70 2d       	mov	r23, r0
    1850:	68 2f       	mov	r22, r24
    1852:	60 7e       	andi	r22, 0xE0	; 224
    1854:	8a 2d       	mov	r24, r10
    1856:	83 70       	andi	r24, 0x03	; 3
    1858:	68 2b       	or	r22, r24
    185a:	68 60       	ori	r22, 0x08	; 8
    185c:	82 e0       	ldi	r24, 0x02	; 2
    185e:	8d 0f       	add	r24, r29
    1860:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
	MCP2515_reg_write(mob+3, (ID>>8) & 0xFF );
    1864:	99 27       	eor	r25, r25
    1866:	8b 2d       	mov	r24, r11
    1868:	7a 2d       	mov	r23, r10
    186a:	69 2d       	mov	r22, r9
    186c:	83 e0       	ldi	r24, 0x03	; 3
    186e:	8d 0f       	add	r24, r29
    1870:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
	MCP2515_reg_write(mob+4, ID & 0xFF );
    1874:	68 2d       	mov	r22, r8
    1876:	84 e0       	ldi	r24, 0x04	; 4
    1878:	8d 0f       	add	r24, r29
    187a:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
	MCP2515_reg_write(mob+5, numBytes);		//set how many bytes we wish to send
    187e:	6f 2d       	mov	r22, r15
    1880:	85 e0       	ldi	r24, 0x05	; 5
    1882:	8d 0f       	add	r24, r29
    1884:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
	//MCP2515_reg_write(mob+2, (1<<3));
	//MCP2515_reg_write(mob+3, 0);
	//MCP2515_reg_write(mob+4, 0);
	//MCP2515_reg_write(mob+5, 0);
	
	for (uint8_t byteCount = 0; byteCount < numBytes; byteCount++)
    1888:	ff 20       	and	r15, r15
    188a:	a9 f0       	breq	.+42     	; 0x18b6 <MCP2515_TX+0xc8>
    188c:	86 01       	movw	r16, r12
    188e:	c6 e0       	ldi	r28, 0x06	; 6
    1890:	cd 0f       	add	r28, r29
    1892:	fa 94       	dec	r15
    1894:	ef 2c       	mov	r14, r15
    1896:	f1 2c       	mov	r15, r1
    1898:	8f ef       	ldi	r24, 0xFF	; 255
    189a:	e8 1a       	sub	r14, r24
    189c:	f8 0a       	sbc	r15, r24
    189e:	ec 0c       	add	r14, r12
    18a0:	fd 1c       	adc	r15, r13
	{
		MCP2515_reg_write(mob+6+byteCount, *(data+byteCount));	//fill the data bytes register.
    18a2:	f8 01       	movw	r30, r16
    18a4:	61 91       	ld	r22, Z+
    18a6:	8f 01       	movw	r16, r30
    18a8:	8c 2f       	mov	r24, r28
    18aa:	0e 94 71 09 	call	0x12e2	; 0x12e2 <MCP2515_reg_write>
    18ae:	cf 5f       	subi	r28, 0xFF	; 255
	//MCP2515_reg_write(mob+2, (1<<3));
	//MCP2515_reg_write(mob+3, 0);
	//MCP2515_reg_write(mob+4, 0);
	//MCP2515_reg_write(mob+5, 0);
	
	for (uint8_t byteCount = 0; byteCount < numBytes; byteCount++)
    18b0:	0e 15       	cp	r16, r14
    18b2:	1f 05       	cpc	r17, r15
    18b4:	b1 f7       	brne	.-20     	; 0x18a2 <MCP2515_TX+0xb4>
	{
		MCP2515_reg_write(mob+6+byteCount, *(data+byteCount));	//fill the data bytes register.
	}
	MCP2515_instruction(128|(1<<((mob>>4) - 3)));		//creates an instruction that matches the mob that is chosen.
    18b6:	d5 95       	asr	r29
    18b8:	d5 95       	asr	r29
    18ba:	d5 95       	asr	r29
    18bc:	d5 95       	asr	r29
    18be:	d3 50       	subi	r29, 0x03	; 3
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <MCP2515_TX+0xdc>
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	da 95       	dec	r29
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <MCP2515_TX+0xd8>
    18ce:	80 68       	ori	r24, 0x80	; 128
    18d0:	0e 94 83 09 	call	0x1306	; 0x1306 <MCP2515_instruction>
	//PORTC &= ~(1<<PINC7);		//Drop the TX
	//_delay_us(50);
	//PORTC |= (1<<PINC7);		
}
    18d4:	df 91       	pop	r29
    18d6:	cf 91       	pop	r28
    18d8:	1f 91       	pop	r17
    18da:	0f 91       	pop	r16
    18dc:	ff 90       	pop	r15
    18de:	ef 90       	pop	r14
    18e0:	df 90       	pop	r13
    18e2:	cf 90       	pop	r12
    18e4:	bf 90       	pop	r11
    18e6:	af 90       	pop	r10
    18e8:	9f 90       	pop	r9
    18ea:	8f 90       	pop	r8
    18ec:	08 95       	ret

000018ee <SPI_send_byte>:
#include "SPI.h"

uint8_t SPI_send_byte(uint8_t c)
{
	SPDR = c;					//write data to the transmission register. Writing to this initiates transmission.
    18ee:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
    18f0:	0d b4       	in	r0, 0x2d	; 45
    18f2:	07 fe       	sbrs	r0, 7
    18f4:	fd cf       	rjmp	.-6      	; 0x18f0 <SPI_send_byte+0x2>
	return SPDR;				//return any data that was shifted into this register upon transmission.
    18f6:	8e b5       	in	r24, 0x2e	; 46
}
    18f8:	08 95       	ret

000018fa <SPI_init>:

void SPI_init()
{
	MCUCR &= ~(1<<SPIPS);		//make sure we are getting spi not on the _A spi pins.
    18fa:	85 b7       	in	r24, 0x35	; 53
    18fc:	8f 77       	andi	r24, 0x7F	; 127
    18fe:	85 bf       	out	0x35, r24	; 53
	SPCR = (0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(1<<SPR0)|(0<<SPR1);  //set interrupt, enable SPI, MSB mode, set as master, low is idle, read on leading edge, Set to speed(fosc/64) SPR0=1, SPR1=0
    1900:	81 e5       	ldi	r24, 0x51	; 81
    1902:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1<<SPI2X);	//set whether we want 2x speed or not (1=2x speed).
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	8d bd       	out	0x2d, r24	; 45
	SPDR = 0x00;		//ensure data register has nothing in it
    1908:	1e bc       	out	0x2e, r1	; 46
    190a:	08 95       	ret

0000190c <__udivmodsi4>:
    190c:	a1 e2       	ldi	r26, 0x21	; 33
    190e:	1a 2e       	mov	r1, r26
    1910:	aa 1b       	sub	r26, r26
    1912:	bb 1b       	sub	r27, r27
    1914:	fd 01       	movw	r30, r26
    1916:	0d c0       	rjmp	.+26     	; 0x1932 <__udivmodsi4_ep>

00001918 <__udivmodsi4_loop>:
    1918:	aa 1f       	adc	r26, r26
    191a:	bb 1f       	adc	r27, r27
    191c:	ee 1f       	adc	r30, r30
    191e:	ff 1f       	adc	r31, r31
    1920:	a2 17       	cp	r26, r18
    1922:	b3 07       	cpc	r27, r19
    1924:	e4 07       	cpc	r30, r20
    1926:	f5 07       	cpc	r31, r21
    1928:	20 f0       	brcs	.+8      	; 0x1932 <__udivmodsi4_ep>
    192a:	a2 1b       	sub	r26, r18
    192c:	b3 0b       	sbc	r27, r19
    192e:	e4 0b       	sbc	r30, r20
    1930:	f5 0b       	sbc	r31, r21

00001932 <__udivmodsi4_ep>:
    1932:	66 1f       	adc	r22, r22
    1934:	77 1f       	adc	r23, r23
    1936:	88 1f       	adc	r24, r24
    1938:	99 1f       	adc	r25, r25
    193a:	1a 94       	dec	r1
    193c:	69 f7       	brne	.-38     	; 0x1918 <__udivmodsi4_loop>
    193e:	60 95       	com	r22
    1940:	70 95       	com	r23
    1942:	80 95       	com	r24
    1944:	90 95       	com	r25
    1946:	9b 01       	movw	r18, r22
    1948:	ac 01       	movw	r20, r24
    194a:	bd 01       	movw	r22, r26
    194c:	cf 01       	movw	r24, r30
    194e:	08 95       	ret

00001950 <eeprom_read_word>:
    1950:	a8 e1       	ldi	r26, 0x18	; 24
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	42 e0       	ldi	r20, 0x02	; 2
    1956:	50 e0       	ldi	r21, 0x00	; 0
    1958:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <eeprom_read_blraw>

0000195c <eeprom_write_word>:
    195c:	0e 94 c3 0c 	call	0x1986	; 0x1986 <eeprom_write_byte>
    1960:	27 2f       	mov	r18, r23
    1962:	0c 94 c4 0c 	jmp	0x1988	; 0x1988 <eeprom_write_r18>

00001966 <eeprom_read_block>:
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22

0000196a <eeprom_read_blraw>:
    196a:	fc 01       	movw	r30, r24
    196c:	f9 99       	sbic	0x1f, 1	; 31
    196e:	fe cf       	rjmp	.-4      	; 0x196c <eeprom_read_blraw+0x2>
    1970:	06 c0       	rjmp	.+12     	; 0x197e <eeprom_read_blraw+0x14>
    1972:	f2 bd       	out	0x22, r31	; 34
    1974:	e1 bd       	out	0x21, r30	; 33
    1976:	f8 9a       	sbi	0x1f, 0	; 31
    1978:	31 96       	adiw	r30, 0x01	; 1
    197a:	00 b4       	in	r0, 0x20	; 32
    197c:	0d 92       	st	X+, r0
    197e:	41 50       	subi	r20, 0x01	; 1
    1980:	50 40       	sbci	r21, 0x00	; 0
    1982:	b8 f7       	brcc	.-18     	; 0x1972 <eeprom_read_blraw+0x8>
    1984:	08 95       	ret

00001986 <eeprom_write_byte>:
    1986:	26 2f       	mov	r18, r22

00001988 <eeprom_write_r18>:
    1988:	f9 99       	sbic	0x1f, 1	; 31
    198a:	fe cf       	rjmp	.-4      	; 0x1988 <eeprom_write_r18>
    198c:	1f ba       	out	0x1f, r1	; 31
    198e:	92 bd       	out	0x22, r25	; 34
    1990:	81 bd       	out	0x21, r24	; 33
    1992:	20 bd       	out	0x20, r18	; 32
    1994:	0f b6       	in	r0, 0x3f	; 63
    1996:	f8 94       	cli
    1998:	fa 9a       	sbi	0x1f, 2	; 31
    199a:	f9 9a       	sbi	0x1f, 1	; 31
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	01 96       	adiw	r24, 0x01	; 1
    19a0:	08 95       	ret

000019a2 <_exit>:
    19a2:	f8 94       	cli

000019a4 <__stop_program>:
    19a4:	ff cf       	rjmp	.-2      	; 0x19a4 <__stop_program>
