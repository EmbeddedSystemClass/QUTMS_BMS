
Atmel_QUTMS_CMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014c  00800100  00001402  00001496  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001402  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080024c  0080024c  000015e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001614  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000175f  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000052d  00000000  00000000  00002f03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f01  00000000  00000000  00003430  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000528  00000000  00000000  00004334  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061a  00000000  00000000  0000485c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001822  00000000  00000000  00004e76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00006698  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 7a 06 	jmp	0xcf4	; 0xcf4 <__vector_10>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__vector_15>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__vector_18>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d0 e1       	ldi	r29, 0x10	; 16
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	12 e0       	ldi	r17, 0x02	; 2
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e2 e0       	ldi	r30, 0x02	; 2
      90:	f4 e1       	ldi	r31, 0x14	; 20
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	ac 34       	cpi	r26, 0x4C	; 76
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	22 e0       	ldi	r18, 0x02	; 2
      a0:	ac e4       	ldi	r26, 0x4C	; 76
      a2:	b2 e0       	ldi	r27, 0x02	; 2
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a4 35       	cpi	r26, 0x54	; 84
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 6f 05 	call	0xade	; 0xade <main>
      b2:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <CAN_init>:
	if(mob>=0)CAN_TXMOB(mob, 2, tData, 0, 20); //transmit registration and do not wait for finish
	return mob;
}

uint8_t CAN_init()
{
      ba:	ef 92       	push	r14
      bc:	ff 92       	push	r15
      be:	0f 93       	push	r16
      c0:	1f 93       	push	r17
      c2:	cf 93       	push	r28
      c4:	df 93       	push	r29
	
	CANGCON = (1 << SWRES);     // Reset the CAN controller hardware and general registers.
      c6:	81 e0       	ldi	r24, 0x01	; 1
      c8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	for(uint8_t mobCount = 0; mobCount <= 5; mobCount++)
      cc:	80 e0       	ldi	r24, 0x00	; 0
	{
		CANPAGE = (mobCount << 4);		//select the message object to modify
      ce:	0d ee       	ldi	r16, 0xED	; 237
      d0:	10 e0       	ldi	r17, 0x00	; 0
		CANCDMOB = 0;					//make sure we do not do any actions on this mob.
      d2:	6f ee       	ldi	r22, 0xEF	; 239
      d4:	70 e0       	ldi	r23, 0x00	; 0
		CANSTMOB = 0;					//make sure no interrupts are set.
      d6:	4e ee       	ldi	r20, 0xEE	; 238
      d8:	50 e0       	ldi	r21, 0x00	; 0
		CANIDM1 = 0;
      da:	27 ef       	ldi	r18, 0xF7	; 247
      dc:	30 e0       	ldi	r19, 0x00	; 0
		CANIDM2 = 0;
      de:	c6 ef       	ldi	r28, 0xF6	; 246
      e0:	d0 e0       	ldi	r29, 0x00	; 0
		CANIDM3 = 0;
      e2:	a5 ef       	ldi	r26, 0xF5	; 245
      e4:	b0 e0       	ldi	r27, 0x00	; 0
		CANIDM4 = 0;					//these registers are used to control the mask which filters incoming messages
      e6:	0f 2e       	mov	r0, r31
      e8:	f4 ef       	ldi	r31, 0xF4	; 244
      ea:	ef 2e       	mov	r14, r31
      ec:	f1 2c       	mov	r15, r1
      ee:	f0 2d       	mov	r31, r0
{
	
	CANGCON = (1 << SWRES);     // Reset the CAN controller hardware and general registers.
	for(uint8_t mobCount = 0; mobCount <= 5; mobCount++)
	{
		CANPAGE = (mobCount << 4);		//select the message object to modify
      f0:	98 2f       	mov	r25, r24
      f2:	92 95       	swap	r25
      f4:	90 7f       	andi	r25, 0xF0	; 240
      f6:	f8 01       	movw	r30, r16
      f8:	90 83       	st	Z, r25
		CANCDMOB = 0;					//make sure we do not do any actions on this mob.
      fa:	fb 01       	movw	r30, r22
      fc:	10 82       	st	Z, r1
		CANSTMOB = 0;					//make sure no interrupts are set.
      fe:	fa 01       	movw	r30, r20
     100:	10 82       	st	Z, r1
		CANIDM1 = 0;
     102:	f9 01       	movw	r30, r18
     104:	10 82       	st	Z, r1
		CANIDM2 = 0;
     106:	18 82       	st	Y, r1
		CANIDM3 = 0;
     108:	1c 92       	st	X, r1
		CANIDM4 = 0;					//these registers are used to control the mask which filters incoming messages
     10a:	f7 01       	movw	r30, r14
     10c:	10 82       	st	Z, r1

uint8_t CAN_init()
{
	
	CANGCON = (1 << SWRES);     // Reset the CAN controller hardware and general registers.
	for(uint8_t mobCount = 0; mobCount <= 5; mobCount++)
     10e:	8f 5f       	subi	r24, 0xFF	; 255
     110:	86 30       	cpi	r24, 0x06	; 6
     112:	71 f7       	brne	.-36     	; 0xf0 <CAN_init+0x36>
		CANIDM1 = 0;
		CANIDM2 = 0;
		CANIDM3 = 0;
		CANIDM4 = 0;					//these registers are used to control the mask which filters incoming messages
	}
	CANBT1 = 0x0E;		//these registers control speed of communication
     114:	8e e0       	ldi	r24, 0x0E	; 14
     116:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = 0x04;		//currently with these values, it is 250kbps
     11a:	84 e0       	ldi	r24, 0x04	; 4
     11c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = 0x13;		//with 8 TQ per bit.
     120:	83 e1       	ldi	r24, 0x13	; 19
     122:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANIE2 = (1 << IEMOB4)|(1 << IEMOB5);		//enable interrupts on MOB 4 and 5 for receiving
     126:	80 e3       	ldi	r24, 0x30	; 48
     128:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>
	CANGIE = (1 << ENRX)|(1 << ENIT);		//enable receive interrupt; enable global CAN interrupt (all interrupts)
     12c:	80 ea       	ldi	r24, 0xA0	; 160
     12e:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	//put other initialisation functions here.

	CANGCON = (1 << ENASTB);    // Enable the CAN.
     132:	82 e0       	ldi	r24, 0x02	; 2
     134:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     138:	ff ef       	ldi	r31, 0xFF	; 255
     13a:	20 e7       	ldi	r18, 0x70	; 112
     13c:	82 e0       	ldi	r24, 0x02	; 2
     13e:	f1 50       	subi	r31, 0x01	; 1
     140:	20 40       	sbci	r18, 0x00	; 0
     142:	80 40       	sbci	r24, 0x00	; 0
     144:	e1 f7       	brne	.-8      	; 0x13e <CAN_init+0x84>
     146:	00 c0       	rjmp	.+0      	; 0x148 <CAN_init+0x8e>
     148:	00 00       	nop
	_delay_ms(50);
	if(!(CANGSTA & (1<<ENFG)))return 1;
     14a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     14e:	82 fb       	bst	r24, 2
     150:	88 27       	eor	r24, r24
     152:	80 f9       	bld	r24, 0
	return 0;
}
     154:	91 e0       	ldi	r25, 0x01	; 1
     156:	89 27       	eor	r24, r25
     158:	df 91       	pop	r29
     15a:	cf 91       	pop	r28
     15c:	1f 91       	pop	r17
     15e:	0f 91       	pop	r16
     160:	ff 90       	pop	r15
     162:	ef 90       	pop	r14
     164:	08 95       	ret

00000166 <CAN_RXInit>:

void CAN_RXInit(int8_t mob, uint8_t numBytes, uint32_t IDmsk, uint32_t ID)
{
     166:	ef 92       	push	r14
     168:	ff 92       	push	r15
     16a:	0f 93       	push	r16
     16c:	1f 93       	push	r17
	CANPAGE = ( mob << 4);		//use the mobth mob for receiving.
     16e:	82 95       	swap	r24
     170:	80 7f       	andi	r24, 0xF0	; 240
     172:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	//IDEMSK is sent with the CAN packet, we choose to not require that it be set, and instead focus on ID match
	CANIDM4 = (IDmsk<<03) & 0xF8;	//shifts the value sets RTRMSK to zero and IDEMSK to 0
     176:	82 2f       	mov	r24, r18
     178:	88 0f       	add	r24, r24
     17a:	88 0f       	add	r24, r24
     17c:	88 0f       	add	r24, r24
     17e:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	CANIDM3 = (IDmsk>>05) & 0xFF;
     182:	da 01       	movw	r26, r20
     184:	c9 01       	movw	r24, r18
     186:	68 94       	set
     188:	14 f8       	bld	r1, 4
     18a:	b6 95       	lsr	r27
     18c:	a7 95       	ror	r26
     18e:	97 95       	ror	r25
     190:	87 95       	ror	r24
     192:	16 94       	lsr	r1
     194:	d1 f7       	brne	.-12     	; 0x18a <CAN_RXInit+0x24>
     196:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
	CANIDM2 = (IDmsk>>13) & 0xFF;	
     19a:	da 01       	movw	r26, r20
     19c:	c9 01       	movw	r24, r18
     19e:	07 2e       	mov	r0, r23
     1a0:	7d e0       	ldi	r23, 0x0D	; 13
     1a2:	b6 95       	lsr	r27
     1a4:	a7 95       	ror	r26
     1a6:	97 95       	ror	r25
     1a8:	87 95       	ror	r24
     1aa:	7a 95       	dec	r23
     1ac:	d1 f7       	brne	.-12     	; 0x1a2 <CAN_RXInit+0x3c>
     1ae:	70 2d       	mov	r23, r0
     1b0:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	CANIDM1 = (IDmsk>>21) & 0xFF;
     1b4:	da 01       	movw	r26, r20
     1b6:	c9 01       	movw	r24, r18
     1b8:	07 2e       	mov	r0, r23
     1ba:	75 e1       	ldi	r23, 0x15	; 21
     1bc:	b6 95       	lsr	r27
     1be:	a7 95       	ror	r26
     1c0:	97 95       	ror	r25
     1c2:	87 95       	ror	r24
     1c4:	7a 95       	dec	r23
     1c6:	d1 f7       	brne	.-12     	; 0x1bc <CAN_RXInit+0x56>
     1c8:	70 2d       	mov	r23, r0
     1ca:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	
	CANIDT4 = (ID<<03) & 0xF8;	//shifts the value sets RTRTAG, RB1TAG and RB0TAG to 0
     1ce:	8e 2d       	mov	r24, r14
     1d0:	88 0f       	add	r24, r24
     1d2:	88 0f       	add	r24, r24
     1d4:	88 0f       	add	r24, r24
     1d6:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT3 = (ID>>05) & 0xFF;
     1da:	d8 01       	movw	r26, r16
     1dc:	c7 01       	movw	r24, r14
     1de:	68 94       	set
     1e0:	14 f8       	bld	r1, 4
     1e2:	b6 95       	lsr	r27
     1e4:	a7 95       	ror	r26
     1e6:	97 95       	ror	r25
     1e8:	87 95       	ror	r24
     1ea:	16 94       	lsr	r1
     1ec:	d1 f7       	brne	.-12     	; 0x1e2 <CAN_RXInit+0x7c>
     1ee:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	CANIDT2 = (ID>>13) & 0xFF;
     1f2:	d8 01       	movw	r26, r16
     1f4:	c7 01       	movw	r24, r14
     1f6:	07 2e       	mov	r0, r23
     1f8:	7d e0       	ldi	r23, 0x0D	; 13
     1fa:	b6 95       	lsr	r27
     1fc:	a7 95       	ror	r26
     1fe:	97 95       	ror	r25
     200:	87 95       	ror	r24
     202:	7a 95       	dec	r23
     204:	d1 f7       	brne	.-12     	; 0x1fa <CAN_RXInit+0x94>
     206:	70 2d       	mov	r23, r0
     208:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (ID>>21) & 0xFF;
     20c:	d8 01       	movw	r26, r16
     20e:	c7 01       	movw	r24, r14
     210:	07 2e       	mov	r0, r23
     212:	75 e1       	ldi	r23, 0x15	; 21
     214:	b6 95       	lsr	r27
     216:	a7 95       	ror	r26
     218:	97 95       	ror	r25
     21a:	87 95       	ror	r24
     21c:	7a 95       	dec	r23
     21e:	d1 f7       	brne	.-12     	; 0x214 <CAN_RXInit+0xae>
     220:	70 2d       	mov	r23, r0
     222:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	
	CANCDMOB = (numBytes << DLC0)|(2<<CONMOB0)|(1 << IDE);		//we are expecting only numBytes bytes; also set the mob to receive mode.
     226:	60 69       	ori	r22, 0x90	; 144
     228:	60 93 ef 00 	sts	0x00EF, r22	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
}
     22c:	1f 91       	pop	r17
     22e:	0f 91       	pop	r16
     230:	ff 90       	pop	r15
     232:	ef 90       	pop	r14
     234:	08 95       	ret

00000236 <CAN_TXMOB>:

void CAN_TXMOB(int8_t mob, uint8_t numBytes, uint8_t * data, uint32_t ID, uint8_t ms_loop_until_TXOK)
{
     236:	ef 92       	push	r14
     238:	0f 93       	push	r16
     23a:	1f 93       	push	r17
	CANPAGE = ( mob << 4);		//use the mobth mob
     23c:	82 95       	swap	r24
     23e:	80 7f       	andi	r24, 0xF0	; 240
     240:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	//IDEMSK is sent with the CAN packet, we choose to not set it, and instead the receiver will focus on ID match
	CANSTMOB &= ~(1<<TXOK);
     244:	ee ee       	ldi	r30, 0xEE	; 238
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	8f 7b       	andi	r24, 0xBF	; 191
     24c:	80 83       	st	Z, r24
	CANIDM4 = 0;
     24e:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
	
	CANIDT4 = (ID<<03) & 0xF8;	//shifts the value sets RTRTAG, RB1TAG and RB0TAG
     252:	80 2f       	mov	r24, r16
     254:	88 0f       	add	r24, r24
     256:	88 0f       	add	r24, r24
     258:	88 0f       	add	r24, r24
     25a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
	CANIDT3 = (ID>>05) & 0xFF;
     25e:	d9 01       	movw	r26, r18
     260:	c8 01       	movw	r24, r16
     262:	68 94       	set
     264:	14 f8       	bld	r1, 4
     266:	b6 95       	lsr	r27
     268:	a7 95       	ror	r26
     26a:	97 95       	ror	r25
     26c:	87 95       	ror	r24
     26e:	16 94       	lsr	r1
     270:	d1 f7       	brne	.-12     	; 0x266 <CAN_TXMOB+0x30>
     272:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	CANIDT2 = (ID>>13) & 0xFF;
     276:	d9 01       	movw	r26, r18
     278:	c8 01       	movw	r24, r16
     27a:	07 2e       	mov	r0, r23
     27c:	7d e0       	ldi	r23, 0x0D	; 13
     27e:	b6 95       	lsr	r27
     280:	a7 95       	ror	r26
     282:	97 95       	ror	r25
     284:	87 95       	ror	r24
     286:	7a 95       	dec	r23
     288:	d1 f7       	brne	.-12     	; 0x27e <CAN_TXMOB+0x48>
     28a:	70 2d       	mov	r23, r0
     28c:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (ID>>21) & 0xFF;
     290:	0f 2e       	mov	r0, r31
     292:	f5 e1       	ldi	r31, 0x15	; 21
     294:	36 95       	lsr	r19
     296:	27 95       	ror	r18
     298:	17 95       	ror	r17
     29a:	07 95       	ror	r16
     29c:	fa 95       	dec	r31
     29e:	d1 f7       	brne	.-12     	; 0x294 <CAN_TXMOB+0x5e>
     2a0:	f0 2d       	mov	r31, r0
     2a2:	00 93 f3 00 	sts	0x00F3, r16	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	for(uint8_t i = 0; i < numBytes; i++)
     2a6:	66 23       	and	r22, r22
     2a8:	71 f0       	breq	.+28     	; 0x2c6 <CAN_TXMOB+0x90>
     2aa:	fa 01       	movw	r30, r20
     2ac:	8f ef       	ldi	r24, 0xFF	; 255
     2ae:	86 0f       	add	r24, r22
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	01 96       	adiw	r24, 0x01	; 1
     2b4:	48 0f       	add	r20, r24
     2b6:	59 1f       	adc	r21, r25
	{
		CANMSG = data[i];
     2b8:	aa ef       	ldi	r26, 0xFA	; 250
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	81 91       	ld	r24, Z+
     2be:	8c 93       	st	X, r24
	
	CANIDT4 = (ID<<03) & 0xF8;	//shifts the value sets RTRTAG, RB1TAG and RB0TAG
	CANIDT3 = (ID>>05) & 0xFF;
	CANIDT2 = (ID>>13) & 0xFF;
	CANIDT1 = (ID>>21) & 0xFF;
	for(uint8_t i = 0; i < numBytes; i++)
     2c0:	e4 17       	cp	r30, r20
     2c2:	f5 07       	cpc	r31, r21
     2c4:	d9 f7       	brne	.-10     	; 0x2bc <CAN_TXMOB+0x86>
	{
		CANMSG = data[i];
	}
	CANCDMOB = (numBytes << DLC0)|(1<<CONMOB0)|(1 << IDE);		//we are expecting only numBytes bytes; also set the mob to receive mode.
     2c6:	60 65       	ori	r22, 0x50	; 80
     2c8:	60 93 ef 00 	sts	0x00EF, r22	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	for(uint8_t i = 0; i < ms_loop_until_TXOK; i++)	//loop until specified wait time is up
     2cc:	ee 20       	and	r14, r14
     2ce:	a1 f0       	breq	.+40     	; 0x2f8 <CAN_TXMOB+0xc2>
	{
		if((CANSTMOB & (1 << TXOK)))break;		//check for transmission complete
     2d0:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     2d4:	86 fd       	sbrc	r24, 6
     2d6:	10 c0       	rjmp	.+32     	; 0x2f8 <CAN_TXMOB+0xc2>
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	ee ee       	ldi	r30, 0xEE	; 238
     2dc:	f0 e0       	ldi	r31, 0x00	; 0
     2de:	03 c0       	rjmp	.+6      	; 0x2e6 <CAN_TXMOB+0xb0>
     2e0:	90 81       	ld	r25, Z
     2e2:	96 fd       	sbrc	r25, 6
     2e4:	09 c0       	rjmp	.+18     	; 0x2f8 <CAN_TXMOB+0xc2>
     2e6:	af e9       	ldi	r26, 0x9F	; 159
     2e8:	bf e0       	ldi	r27, 0x0F	; 15
     2ea:	11 97       	sbiw	r26, 0x01	; 1
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <CAN_TXMOB+0xb4>
     2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <CAN_TXMOB+0xba>
     2f0:	00 00       	nop
	{
		CANMSG = data[i];
	}
	CANCDMOB = (numBytes << DLC0)|(1<<CONMOB0)|(1 << IDE);		//we are expecting only numBytes bytes; also set the mob to receive mode.

	for(uint8_t i = 0; i < ms_loop_until_TXOK; i++)	//loop until specified wait time is up
     2f2:	8f 5f       	subi	r24, 0xFF	; 255
     2f4:	8e 11       	cpse	r24, r14
     2f6:	f4 cf       	rjmp	.-24     	; 0x2e0 <CAN_TXMOB+0xaa>
	{
		if((CANSTMOB & (1 << TXOK)))break;		//check for transmission complete
		_delay_ms(1);								//do nothing for 1 ms
	}
}
     2f8:	1f 91       	pop	r17
     2fa:	0f 91       	pop	r16
     2fc:	ef 90       	pop	r14
     2fe:	08 95       	ret

00000300 <CAN_findFreeTXMOB>:

int8_t CAN_findFreeTXMOB()
{
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
	for(uint8_t i = 0; i < 4; i++) //tx mobs are 0 to 3 (<4)
	{
		CANPAGE = ( i << 4);		//use the mobth mob
     304:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if((CANSTMOB & ((1<<TXOK)|(1<<BERR)|(1<<SERR)|(1<<FERR)|(1<<CERR)) || !(CANCDMOB & (1<<CONMOB0)))) //if the transmission is complete or the mob has not been setup yet
     308:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     30c:	8e 75       	andi	r24, 0x5E	; 94
     30e:	b1 f4       	brne	.+44     	; 0x33c <CAN_findFreeTXMOB+0x3c>
     310:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     314:	86 ff       	sbrs	r24, 6
     316:	14 c0       	rjmp	.+40     	; 0x340 <CAN_findFreeTXMOB+0x40>
     318:	81 e0       	ldi	r24, 0x01	; 1

int8_t CAN_findFreeTXMOB()
{
	for(uint8_t i = 0; i < 4; i++) //tx mobs are 0 to 3 (<4)
	{
		CANPAGE = ( i << 4);		//use the mobth mob
     31a:	ad ee       	ldi	r26, 0xED	; 237
     31c:	b0 e0       	ldi	r27, 0x00	; 0
		if((CANSTMOB & ((1<<TXOK)|(1<<BERR)|(1<<SERR)|(1<<FERR)|(1<<CERR)) || !(CANCDMOB & (1<<CONMOB0)))) //if the transmission is complete or the mob has not been setup yet
     31e:	ee ee       	ldi	r30, 0xEE	; 238
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	cf ee       	ldi	r28, 0xEF	; 239
     324:	d0 e0       	ldi	r29, 0x00	; 0

int8_t CAN_findFreeTXMOB()
{
	for(uint8_t i = 0; i < 4; i++) //tx mobs are 0 to 3 (<4)
	{
		CANPAGE = ( i << 4);		//use the mobth mob
     326:	98 2f       	mov	r25, r24
     328:	92 95       	swap	r25
     32a:	90 7f       	andi	r25, 0xF0	; 240
     32c:	9c 93       	st	X, r25
		if((CANSTMOB & ((1<<TXOK)|(1<<BERR)|(1<<SERR)|(1<<FERR)|(1<<CERR)) || !(CANCDMOB & (1<<CONMOB0)))) //if the transmission is complete or the mob has not been setup yet
     32e:	90 81       	ld	r25, Z
     330:	9e 75       	andi	r25, 0x5E	; 94
     332:	61 f4       	brne	.+24     	; 0x34c <CAN_findFreeTXMOB+0x4c>
     334:	98 81       	ld	r25, Y
     336:	96 fd       	sbrc	r25, 6
     338:	05 c0       	rjmp	.+10     	; 0x344 <CAN_findFreeTXMOB+0x44>
     33a:	08 c0       	rjmp	.+16     	; 0x34c <CAN_findFreeTXMOB+0x4c>
	}
}

int8_t CAN_findFreeTXMOB()
{
	for(uint8_t i = 0; i < 4; i++) //tx mobs are 0 to 3 (<4)
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	06 c0       	rjmp	.+12     	; 0x34c <CAN_findFreeTXMOB+0x4c>
     340:	80 e0       	ldi	r24, 0x00	; 0
	{
		CANPAGE = ( i << 4);		//use the mobth mob
		if((CANSTMOB & ((1<<TXOK)|(1<<BERR)|(1<<SERR)|(1<<FERR)|(1<<CERR)) || !(CANCDMOB & (1<<CONMOB0)))) //if the transmission is complete or the mob has not been setup yet
		{
			return i;			//send back the free mob
     342:	04 c0       	rjmp	.+8      	; 0x34c <CAN_findFreeTXMOB+0x4c>
	}
}

int8_t CAN_findFreeTXMOB()
{
	for(uint8_t i = 0; i < 4; i++) //tx mobs are 0 to 3 (<4)
     344:	8f 5f       	subi	r24, 0xFF	; 255
     346:	84 30       	cpi	r24, 0x04	; 4
     348:	71 f7       	brne	.-36     	; 0x326 <CAN_findFreeTXMOB+0x26>
		if((CANSTMOB & ((1<<TXOK)|(1<<BERR)|(1<<SERR)|(1<<FERR)|(1<<CERR)) || !(CANCDMOB & (1<<CONMOB0)))) //if the transmission is complete or the mob has not been setup yet
		{
			return i;			//send back the free mob
		}
	}
	return -1;		//otherwise, none are free
     34a:	8f ef       	ldi	r24, 0xFF	; 255
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	08 95       	ret

00000352 <IO_init>:
	cli();		//disable global interrupt
	EICRA = (1<<ISC31)|(1<<ISC30);	//0b11000000	//to enable rising edge of INT3 on PINC0 to cause an external interrupt
	EIMSK = (1<<INT3);				//this may not be legal, the data sheet said it was read only, otherwise it might be 1<<INT1 and 1<<INT0 to represent 3 (0b00000011)
	//EIFR bits INTF3..0 hold information on whether the interrupt has occurred.
	//PCICR is useful when using the level change is being used to indicate the interrupt. hi-low or low-hi maybe
	sei();		//re-enable global interrupt.
     352:	8f e9       	ldi	r24, 0x9F	; 159
     354:	8a b9       	out	0x0a, r24	; 10
     356:	86 e8       	ldi	r24, 0x86	; 134
     358:	87 b9       	out	0x07, r24	; 7
     35a:	8b e1       	ldi	r24, 0x1B	; 27
     35c:	84 b9       	out	0x04, r24	; 4
     35e:	80 ec       	ldi	r24, 0xC0	; 192
     360:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
     364:	88 e0       	ldi	r24, 0x08	; 8
     366:	8d bb       	out	0x1d, r24	; 29
     368:	78 94       	sei
     36a:	08 95       	ret

0000036c <ADC_init>:
     36c:	ec e7       	ldi	r30, 0x7C	; 124
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	80 e6       	ldi	r24, 0x60	; 96
     372:	80 83       	st	Z, r24
     374:	80 81       	ld	r24, Z
     376:	8f 7d       	andi	r24, 0xDF	; 223
     378:	80 83       	st	Z, r24
     37a:	87 e8       	ldi	r24, 0x87	; 135
     37c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     380:	08 95       	ret

00000382 <Cells_init>:
     382:	0f 93       	push	r16
     384:	1f 93       	push	r17
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
     38e:	68 97       	sbiw	r28, 0x18	; 24
     390:	0f b6       	in	r0, 0x3f	; 63
     392:	f8 94       	cli
     394:	de bf       	out	0x3e, r29	; 62
     396:	0f be       	out	0x3f, r0	; 63
     398:	cd bf       	out	0x3d, r28	; 61
     39a:	28 e0       	ldi	r18, 0x08	; 8
     39c:	ea e1       	ldi	r30, 0x1A	; 26
     39e:	f1 e0       	ldi	r31, 0x01	; 1
     3a0:	de 01       	movw	r26, r28
     3a2:	11 96       	adiw	r26, 0x01	; 1
     3a4:	01 90       	ld	r0, Z+
     3a6:	0d 92       	st	X+, r0
     3a8:	2a 95       	dec	r18
     3aa:	e1 f7       	brne	.-8      	; 0x3a4 <Cells_init+0x22>
     3ac:	28 e0       	ldi	r18, 0x08	; 8
     3ae:	e2 e2       	ldi	r30, 0x22	; 34
     3b0:	f1 e0       	ldi	r31, 0x01	; 1
     3b2:	de 01       	movw	r26, r28
     3b4:	19 96       	adiw	r26, 0x09	; 9
     3b6:	01 90       	ld	r0, Z+
     3b8:	0d 92       	st	X+, r0
     3ba:	2a 95       	dec	r18
     3bc:	e1 f7       	brne	.-8      	; 0x3b6 <Cells_init+0x34>
     3be:	28 e0       	ldi	r18, 0x08	; 8
     3c0:	ea e2       	ldi	r30, 0x2A	; 42
     3c2:	f1 e0       	ldi	r31, 0x01	; 1
     3c4:	de 01       	movw	r26, r28
     3c6:	51 96       	adiw	r26, 0x11	; 17
     3c8:	01 90       	ld	r0, Z+
     3ca:	0d 92       	st	X+, r0
     3cc:	2a 95       	dec	r18
     3ce:	e1 f7       	brne	.-8      	; 0x3c8 <Cells_init+0x46>
     3d0:	fc 01       	movw	r30, r24
     3d2:	33 96       	adiw	r30, 0x03	; 3
     3d4:	8e 01       	movw	r16, r28
     3d6:	0f 5f       	subi	r16, 0xFF	; 255
     3d8:	1f 4f       	sbci	r17, 0xFF	; 255
     3da:	ae 01       	movw	r20, r28
     3dc:	4f 5e       	subi	r20, 0xEF	; 239
     3de:	5f 4f       	sbci	r21, 0xFF	; 255
     3e0:	9e 01       	movw	r18, r28
     3e2:	27 5f       	subi	r18, 0xF7	; 247
     3e4:	3f 4f       	sbci	r19, 0xFF	; 255
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	80 83       	st	Z, r24
     3ea:	d8 01       	movw	r26, r16
     3ec:	9d 91       	ld	r25, X+
     3ee:	8d 01       	movw	r16, r26
     3f0:	bf 01       	movw	r22, r30
     3f2:	63 50       	subi	r22, 0x03	; 3
     3f4:	71 09       	sbc	r23, r1
     3f6:	db 01       	movw	r26, r22
     3f8:	9c 93       	st	X, r25
     3fa:	da 01       	movw	r26, r20
     3fc:	9d 91       	ld	r25, X+
     3fe:	ad 01       	movw	r20, r26
     400:	6f 5f       	subi	r22, 0xFF	; 255
     402:	7f 4f       	sbci	r23, 0xFF	; 255
     404:	db 01       	movw	r26, r22
     406:	9c 93       	st	X, r25
     408:	d9 01       	movw	r26, r18
     40a:	9d 91       	ld	r25, X+
     40c:	9d 01       	movw	r18, r26
     40e:	6f 5f       	subi	r22, 0xFF	; 255
     410:	7f 4f       	sbci	r23, 0xFF	; 255
     412:	db 01       	movw	r26, r22
     414:	9c 93       	st	X, r25
     416:	8f 5f       	subi	r24, 0xFF	; 255
     418:	72 96       	adiw	r30, 0x12	; 18
     41a:	88 30       	cpi	r24, 0x08	; 8
     41c:	29 f7       	brne	.-54     	; 0x3e8 <Cells_init+0x66>
     41e:	68 96       	adiw	r28, 0x18	; 24
     420:	0f b6       	in	r0, 0x3f	; 63
     422:	f8 94       	cli
     424:	de bf       	out	0x3e, r29	; 62
     426:	0f be       	out	0x3f, r0	; 63
     428:	cd bf       	out	0x3d, r28	; 61
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	1f 91       	pop	r17
     430:	0f 91       	pop	r16
     432:	08 95       	ret

00000434 <CMU_eeprom_read>:
     434:	f9 99       	sbic	0x1f, 1	; 31
     436:	fe cf       	rjmp	.-4      	; 0x434 <CMU_eeprom_read>
     438:	0e 94 d6 09 	call	0x13ac	; 0x13ac <eeprom_read_word>
     43c:	08 95       	ret

0000043e <Parameters_init>:
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 1a 02 	call	0x434	; 0x434 <CMU_eeprom_read>
     446:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <deviceID+0x1>
     44a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <deviceID>
     44e:	82 e0       	ldi	r24, 0x02	; 2
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 1a 02 	call	0x434	; 0x434 <CMU_eeprom_read>
     456:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <ADC_SAMPLES+0x1>
     45a:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <ADC_SAMPLES>
     45e:	84 e0       	ldi	r24, 0x04	; 4
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	0e 94 1a 02 	call	0x434	; 0x434 <CMU_eeprom_read>
     466:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <fw_version+0x1>
     46a:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <fw_version>
     46e:	80 e4       	ldi	r24, 0x40	; 64
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0e 94 1a 02 	call	0x434	; 0x434 <CMU_eeprom_read>
     476:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <CELL_V_DIFF_MAX_THRESHOLD+0x1>
     47a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <CELL_V_DIFF_MAX_THRESHOLD>
     47e:	82 e4       	ldi	r24, 0x42	; 66
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	0e 94 1a 02 	call	0x434	; 0x434 <CMU_eeprom_read>
     486:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <CELL_V_DIFF_MIN_THRESHOLD+0x1>
     48a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <CELL_V_DIFF_MIN_THRESHOLD>
     48e:	88 e4       	ldi	r24, 0x48	; 72
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0e 94 1a 02 	call	0x434	; 0x434 <CMU_eeprom_read>
     496:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <DISCHARGE_SCALE+0x1>
     49a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <DISCHARGE_SCALE>
     49e:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <EEPROMWriteComplete>
     4a2:	08 95       	ret

000004a4 <CMU_eeprom_write>:
     4a4:	f9 99       	sbic	0x1f, 1	; 31
     4a6:	fe cf       	rjmp	.-4      	; 0x4a4 <CMU_eeprom_write>
     4a8:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <eeprom_write_word>
     4ac:	08 95       	ret

000004ae <ADC_read>:
     4ae:	ec e7       	ldi	r30, 0x7C	; 124
     4b0:	f0 e0       	ldi	r31, 0x00	; 0
     4b2:	90 81       	ld	r25, Z
     4b4:	8f 71       	andi	r24, 0x1F	; 31
     4b6:	90 7e       	andi	r25, 0xE0	; 224
     4b8:	89 2b       	or	r24, r25
     4ba:	80 83       	st	Z, r24
     4bc:	ea e7       	ldi	r30, 0x7A	; 122
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	80 81       	ld	r24, Z
     4c2:	80 64       	ori	r24, 0x40	; 64
     4c4:	80 83       	st	Z, r24
     4c6:	80 81       	ld	r24, Z
     4c8:	84 ff       	sbrs	r24, 4
     4ca:	fd cf       	rjmp	.-6      	; 0x4c6 <ADC_read+0x18>
     4cc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     4d0:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     4d4:	ea e7       	ldi	r30, 0x7A	; 122
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	90 81       	ld	r25, Z
     4da:	90 61       	ori	r25, 0x10	; 16
     4dc:	90 83       	st	Z, r25
     4de:	23 70       	andi	r18, 0x03	; 3
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	92 2b       	or	r25, r18
     4e4:	08 95       	ret

000004e6 <LED_flash>:
     4e6:	86 95       	lsr	r24
     4e8:	38 9a       	sbi	0x07, 0	; 7
     4ea:	40 9a       	sbi	0x08, 0	; 8
     4ec:	a9 f0       	breq	.+42     	; 0x518 <LED_flash+0x32>
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	eb e8       	ldi	r30, 0x8B	; 139
     4f2:	ff e0       	ldi	r31, 0x0F	; 15
     4f4:	31 97       	sbiw	r30, 0x01	; 1
     4f6:	f1 f7       	brne	.-4      	; 0x4f4 <LED_flash+0xe>
     4f8:	00 c0       	rjmp	.+0      	; 0x4fa <LED_flash+0x14>
     4fa:	00 00       	nop
     4fc:	9f 5f       	subi	r25, 0xFF	; 255
     4fe:	98 13       	cpse	r25, r24
     500:	f7 cf       	rjmp	.-18     	; 0x4f0 <LED_flash+0xa>
     502:	0d c0       	rjmp	.+26     	; 0x51e <LED_flash+0x38>
     504:	eb e8       	ldi	r30, 0x8B	; 139
     506:	ff e0       	ldi	r31, 0x0F	; 15
     508:	31 97       	sbiw	r30, 0x01	; 1
     50a:	f1 f7       	brne	.-4      	; 0x508 <LED_flash+0x22>
     50c:	00 c0       	rjmp	.+0      	; 0x50e <LED_flash+0x28>
     50e:	00 00       	nop
     510:	9f 5f       	subi	r25, 0xFF	; 255
     512:	98 13       	cpse	r25, r24
     514:	f7 cf       	rjmp	.-18     	; 0x504 <LED_flash+0x1e>
     516:	08 95       	ret
     518:	40 98       	cbi	0x08, 0	; 8
     51a:	38 98       	cbi	0x07, 0	; 7
     51c:	08 95       	ret
     51e:	40 98       	cbi	0x08, 0	; 8
     520:	38 98       	cbi	0x07, 0	; 7
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	ef cf       	rjmp	.-34     	; 0x504 <LED_flash+0x1e>

00000526 <LED_on>:
     526:	38 9a       	sbi	0x07, 0	; 7
     528:	40 9a       	sbi	0x08, 0	; 8
     52a:	08 95       	ret

0000052c <LED_off>:
     52c:	40 98       	cbi	0x08, 0	; 8
     52e:	38 98       	cbi	0x07, 0	; 7
     530:	08 95       	ret

00000532 <Convert_ADCtoMilliVolts>:
     532:	9c 01       	movw	r18, r24
     534:	24 51       	subi	r18, 0x14	; 20
     536:	31 09       	sbc	r19, r1
     538:	2b 3e       	cpi	r18, 0xEB	; 235
     53a:	33 40       	sbci	r19, 0x03	; 3
     53c:	d8 f4       	brcc	.+54     	; 0x574 <Convert_ADCtoMilliVolts+0x42>
     53e:	bc 01       	movw	r22, r24
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 b9 08 	call	0x1172	; 0x1172 <__floatunsisf>
     548:	27 e0       	ldi	r18, 0x07	; 7
     54a:	30 e2       	ldi	r19, 0x20	; 32
     54c:	40 e8       	ldi	r20, 0x80	; 128
     54e:	5a e3       	ldi	r21, 0x3A	; 58
     550:	0e 94 47 09 	call	0x128e	; 0x128e <__mulsf3>
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	30 e4       	ldi	r19, 0x40	; 64
     558:	4c e9       	ldi	r20, 0x9C	; 156
     55a:	55 e4       	ldi	r21, 0x45	; 69
     55c:	0e 94 47 09 	call	0x128e	; 0x128e <__mulsf3>
     560:	20 e0       	ldi	r18, 0x00	; 0
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	48 e7       	ldi	r20, 0x78	; 120
     566:	52 e4       	ldi	r21, 0x42	; 66
     568:	0e 94 1d 08 	call	0x103a	; 0x103a <__subsf3>
     56c:	0e 94 8a 08 	call	0x1114	; 0x1114 <__fixunssfsi>
     570:	cb 01       	movw	r24, r22
     572:	08 95       	ret
     574:	8f ef       	ldi	r24, 0xFF	; 255
     576:	9f ef       	ldi	r25, 0xFF	; 255
     578:	08 95       	ret

0000057a <Read_voltage>:
     57a:	cf 92       	push	r12
     57c:	df 92       	push	r13
     57e:	ef 92       	push	r14
     580:	ff 92       	push	r15
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	8c 01       	movw	r16, r24
     58a:	c5 e0       	ldi	r28, 0x05	; 5
     58c:	c1 2c       	mov	r12, r1
     58e:	d1 2c       	mov	r13, r1
     590:	76 01       	movw	r14, r12
     592:	f8 01       	movw	r30, r16
     594:	81 81       	ldd	r24, Z+1	; 0x01
     596:	0e 94 57 02 	call	0x4ae	; 0x4ae <ADC_read>
     59a:	0e 94 99 02 	call	0x532	; 0x532 <Convert_ADCtoMilliVolts>
     59e:	c8 0e       	add	r12, r24
     5a0:	d9 1e       	adc	r13, r25
     5a2:	e1 1c       	adc	r14, r1
     5a4:	f1 1c       	adc	r15, r1
     5a6:	c1 50       	subi	r28, 0x01	; 1
     5a8:	a1 f7       	brne	.-24     	; 0x592 <Read_voltage+0x18>
     5aa:	c7 01       	movw	r24, r14
     5ac:	b6 01       	movw	r22, r12
     5ae:	25 e0       	ldi	r18, 0x05	; 5
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	40 e0       	ldi	r20, 0x00	; 0
     5b4:	50 e0       	ldi	r21, 0x00	; 0
     5b6:	0e 94 b4 09 	call	0x1368	; 0x1368 <__udivmodsi4>
     5ba:	c9 01       	movw	r24, r18
     5bc:	cf 91       	pop	r28
     5be:	1f 91       	pop	r17
     5c0:	0f 91       	pop	r16
     5c2:	ff 90       	pop	r15
     5c4:	ef 90       	pop	r14
     5c6:	df 90       	pop	r13
     5c8:	cf 90       	pop	r12
     5ca:	08 95       	ret

000005cc <Read_all_voltages>:
     5cc:	0f 93       	push	r16
     5ce:	1f 93       	push	r17
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	ec 01       	movw	r28, r24
     5d6:	8c 01       	movw	r16, r24
     5d8:	00 57       	subi	r16, 0x70	; 112
     5da:	1f 4f       	sbci	r17, 0xFF	; 255
     5dc:	ce 01       	movw	r24, r28
     5de:	0e 94 bd 02 	call	0x57a	; 0x57a <Read_voltage>
     5e2:	9f 83       	std	Y+7, r25	; 0x07
     5e4:	8e 83       	std	Y+6, r24	; 0x06
     5e6:	62 96       	adiw	r28, 0x12	; 18
     5e8:	c0 17       	cp	r28, r16
     5ea:	d1 07       	cpc	r29, r17
     5ec:	b9 f7       	brne	.-18     	; 0x5dc <Read_all_voltages+0x10>
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	08 95       	ret

000005f8 <TX_cellVoltage>:
     5f8:	af 92       	push	r10
     5fa:	bf 92       	push	r11
     5fc:	cf 92       	push	r12
     5fe:	df 92       	push	r13
     600:	ef 92       	push	r14
     602:	0f 93       	push	r16
     604:	1f 93       	push	r17
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
     60e:	28 97       	sbiw	r28, 0x08	; 8
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	de bf       	out	0x3e, r29	; 62
     616:	0f be       	out	0x3f, r0	; 63
     618:	cd bf       	out	0x3d, r28	; 61
     61a:	5c 01       	movw	r10, r24
     61c:	bc 01       	movw	r22, r24
     61e:	6a 5f       	subi	r22, 0xFA	; 250
     620:	7f 4f       	sbci	r23, 0xFF	; 255
     622:	6e 01       	movw	r12, r28
     624:	82 e0       	ldi	r24, 0x02	; 2
     626:	c8 0e       	add	r12, r24
     628:	d1 1c       	adc	r13, r1
     62a:	ae 01       	movw	r20, r28
     62c:	46 5f       	subi	r20, 0xF6	; 246
     62e:	5f 4f       	sbci	r21, 0xFF	; 255
     630:	f6 01       	movw	r30, r12
     632:	db 01       	movw	r26, r22
     634:	8c 91       	ld	r24, X
     636:	11 96       	adiw	r26, 0x01	; 1
     638:	9c 91       	ld	r25, X
     63a:	9f 01       	movw	r18, r30
     63c:	21 50       	subi	r18, 0x01	; 1
     63e:	31 09       	sbc	r19, r1
     640:	d9 01       	movw	r26, r18
     642:	9c 93       	st	X, r25
     644:	80 83       	st	Z, r24
     646:	6e 5e       	subi	r22, 0xEE	; 238
     648:	7f 4f       	sbci	r23, 0xFF	; 255
     64a:	32 96       	adiw	r30, 0x02	; 2
     64c:	e4 17       	cp	r30, r20
     64e:	f5 07       	cpc	r31, r21
     650:	81 f7       	brne	.-32     	; 0x632 <TX_cellVoltage+0x3a>
     652:	0e 94 80 01 	call	0x300	; 0x300 <CAN_findFreeTXMOB>
     656:	88 23       	and	r24, r24
     658:	0c f4       	brge	.+2      	; 0x65c <TX_cellVoltage+0x64>
     65a:	5a c0       	rjmp	.+180    	; 0x710 <TX_cellVoltage+0x118>
     65c:	00 91 0c 01 	lds	r16, 0x010C	; 0x80010c <deviceID>
     660:	10 91 0d 01 	lds	r17, 0x010D	; 0x80010d <deviceID+0x1>
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	0f 2e       	mov	r0, r31
     66a:	f2 e1       	ldi	r31, 0x12	; 18
     66c:	00 0f       	add	r16, r16
     66e:	11 1f       	adc	r17, r17
     670:	22 1f       	adc	r18, r18
     672:	33 1f       	adc	r19, r19
     674:	fa 95       	dec	r31
     676:	d1 f7       	brne	.-12     	; 0x66c <TX_cellVoltage+0x74>
     678:	f0 2d       	mov	r31, r0
     67a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <AMUID>
     67e:	19 2b       	or	r17, r25
     680:	01 60       	ori	r16, 0x01	; 1
     682:	e1 2c       	mov	r14, r1
     684:	ae 01       	movw	r20, r28
     686:	4f 5f       	subi	r20, 0xFF	; 255
     688:	5f 4f       	sbci	r21, 0xFF	; 255
     68a:	68 e0       	ldi	r22, 0x08	; 8
     68c:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_TXMOB>
     690:	8f e1       	ldi	r24, 0x1F	; 31
     692:	9e e4       	ldi	r25, 0x4E	; 78
     694:	01 97       	sbiw	r24, 0x01	; 1
     696:	f1 f7       	brne	.-4      	; 0x694 <TX_cellVoltage+0x9c>
     698:	00 c0       	rjmp	.+0      	; 0x69a <TX_cellVoltage+0xa2>
     69a:	00 00       	nop
     69c:	f5 01       	movw	r30, r10
     69e:	e2 5b       	subi	r30, 0xB2	; 178
     6a0:	ff 4f       	sbci	r31, 0xFF	; 255
     6a2:	96 e9       	ldi	r25, 0x96	; 150
     6a4:	a9 0e       	add	r10, r25
     6a6:	b1 1c       	adc	r11, r1
     6a8:	80 81       	ld	r24, Z
     6aa:	91 81       	ldd	r25, Z+1	; 0x01
     6ac:	d6 01       	movw	r26, r12
     6ae:	11 97       	sbiw	r26, 0x01	; 1
     6b0:	9c 93       	st	X, r25
     6b2:	d6 01       	movw	r26, r12
     6b4:	8c 93       	st	X, r24
     6b6:	72 96       	adiw	r30, 0x12	; 18
     6b8:	b2 e0       	ldi	r27, 0x02	; 2
     6ba:	cb 0e       	add	r12, r27
     6bc:	d1 1c       	adc	r13, r1
     6be:	ea 15       	cp	r30, r10
     6c0:	fb 05       	cpc	r31, r11
     6c2:	91 f7       	brne	.-28     	; 0x6a8 <TX_cellVoltage+0xb0>
     6c4:	0e 94 80 01 	call	0x300	; 0x300 <CAN_findFreeTXMOB>
     6c8:	88 23       	and	r24, r24
     6ca:	24 f1       	brlt	.+72     	; 0x714 <TX_cellVoltage+0x11c>
     6cc:	00 91 0c 01 	lds	r16, 0x010C	; 0x80010c <deviceID>
     6d0:	10 91 0d 01 	lds	r17, 0x010D	; 0x80010d <deviceID+0x1>
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	0f 2e       	mov	r0, r31
     6da:	f2 e1       	ldi	r31, 0x12	; 18
     6dc:	00 0f       	add	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	22 1f       	adc	r18, r18
     6e2:	33 1f       	adc	r19, r19
     6e4:	fa 95       	dec	r31
     6e6:	d1 f7       	brne	.-12     	; 0x6dc <TX_cellVoltage+0xe4>
     6e8:	f0 2d       	mov	r31, r0
     6ea:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <AMUID>
     6ee:	19 2b       	or	r17, r25
     6f0:	02 60       	ori	r16, 0x02	; 2
     6f2:	e1 2c       	mov	r14, r1
     6f4:	ae 01       	movw	r20, r28
     6f6:	4f 5f       	subi	r20, 0xFF	; 255
     6f8:	5f 4f       	sbci	r21, 0xFF	; 255
     6fa:	68 e0       	ldi	r22, 0x08	; 8
     6fc:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_TXMOB>
     700:	8f e1       	ldi	r24, 0x1F	; 31
     702:	9e e4       	ldi	r25, 0x4E	; 78
     704:	01 97       	sbiw	r24, 0x01	; 1
     706:	f1 f7       	brne	.-4      	; 0x704 <TX_cellVoltage+0x10c>
     708:	00 c0       	rjmp	.+0      	; 0x70a <TX_cellVoltage+0x112>
     70a:	00 00       	nop
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	03 c0       	rjmp	.+6      	; 0x716 <TX_cellVoltage+0x11e>
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	01 c0       	rjmp	.+2      	; 0x716 <TX_cellVoltage+0x11e>
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	28 96       	adiw	r28, 0x08	; 8
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	f8 94       	cli
     71c:	de bf       	out	0x3e, r29	; 62
     71e:	0f be       	out	0x3f, r0	; 63
     720:	cd bf       	out	0x3d, r28	; 61
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	1f 91       	pop	r17
     728:	0f 91       	pop	r16
     72a:	ef 90       	pop	r14
     72c:	df 90       	pop	r13
     72e:	cf 90       	pop	r12
     730:	bf 90       	pop	r11
     732:	af 90       	pop	r10
     734:	08 95       	ret

00000736 <Convert_ADCtoCelsius>:
     736:	9c 01       	movw	r18, r24
     738:	8b 5b       	subi	r24, 0xBB	; 187
     73a:	91 09       	sbc	r25, r1
     73c:	84 34       	cpi	r24, 0x44	; 68
     73e:	93 40       	sbci	r25, 0x03	; 3
     740:	b0 f4       	brcc	.+44     	; 0x76e <Convert_ADCtoCelsius+0x38>
     742:	2a 3a       	cpi	r18, 0xAA	; 170
     744:	83 e0       	ldi	r24, 0x03	; 3
     746:	38 07       	cpc	r19, r24
     748:	70 f4       	brcc	.+28     	; 0x766 <Convert_ADCtoCelsius+0x30>
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	9f 5f       	subi	r25, 0xFF	; 255
     74e:	e9 2f       	mov	r30, r25
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	ee 0f       	add	r30, r30
     754:	ff 1f       	adc	r31, r31
     756:	ee 5c       	subi	r30, 0xCE	; 206
     758:	fe 4f       	sbci	r31, 0xFE	; 254
     75a:	40 81       	ld	r20, Z
     75c:	51 81       	ldd	r21, Z+1	; 0x01
     75e:	24 17       	cp	r18, r20
     760:	35 07       	cpc	r19, r21
     762:	a0 f3       	brcs	.-24     	; 0x74c <Convert_ADCtoCelsius+0x16>
     764:	01 c0       	rjmp	.+2      	; 0x768 <Convert_ADCtoCelsius+0x32>
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	89 2f       	mov	r24, r25
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	08 95       	ret
     76e:	8f ef       	ldi	r24, 0xFF	; 255
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	08 95       	ret

00000774 <Read_temp>:
     774:	cf 92       	push	r12
     776:	df 92       	push	r13
     778:	ef 92       	push	r14
     77a:	ff 92       	push	r15
     77c:	cf 93       	push	r28
     77e:	fc 01       	movw	r30, r24
     780:	9b b1       	in	r25, 0x0b	; 11
     782:	80 81       	ld	r24, Z
     784:	88 0f       	add	r24, r24
     786:	88 0f       	add	r24, r24
     788:	28 2f       	mov	r18, r24
     78a:	2c 71       	andi	r18, 0x1C	; 28
     78c:	89 2f       	mov	r24, r25
     78e:	83 7e       	andi	r24, 0xE3	; 227
     790:	82 2b       	or	r24, r18
     792:	8b b9       	out	0x0b, r24	; 11
     794:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <ADC_SAMPLES>
     798:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <ADC_SAMPLES+0x1>
     79c:	89 2b       	or	r24, r25
     79e:	c1 f0       	breq	.+48     	; 0x7d0 <Read_temp+0x5c>
     7a0:	c0 e0       	ldi	r28, 0x00	; 0
     7a2:	c1 2c       	mov	r12, r1
     7a4:	d1 2c       	mov	r13, r1
     7a6:	76 01       	movw	r14, r12
     7a8:	82 e0       	ldi	r24, 0x02	; 2
     7aa:	0e 94 57 02 	call	0x4ae	; 0x4ae <ADC_read>
     7ae:	0e 94 9b 03 	call	0x736	; 0x736 <Convert_ADCtoCelsius>
     7b2:	c8 0e       	add	r12, r24
     7b4:	d9 1e       	adc	r13, r25
     7b6:	e1 1c       	adc	r14, r1
     7b8:	f1 1c       	adc	r15, r1
     7ba:	cf 5f       	subi	r28, 0xFF	; 255
     7bc:	2c 2f       	mov	r18, r28
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <ADC_SAMPLES>
     7c4:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <ADC_SAMPLES+0x1>
     7c8:	28 17       	cp	r18, r24
     7ca:	39 07       	cpc	r19, r25
     7cc:	68 f3       	brcs	.-38     	; 0x7a8 <Read_temp+0x34>
     7ce:	03 c0       	rjmp	.+6      	; 0x7d6 <Read_temp+0x62>
     7d0:	c1 2c       	mov	r12, r1
     7d2:	d1 2c       	mov	r13, r1
     7d4:	76 01       	movw	r14, r12
     7d6:	c7 01       	movw	r24, r14
     7d8:	b6 01       	movw	r22, r12
     7da:	25 e0       	ldi	r18, 0x05	; 5
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	40 e0       	ldi	r20, 0x00	; 0
     7e0:	50 e0       	ldi	r21, 0x00	; 0
     7e2:	0e 94 b4 09 	call	0x1368	; 0x1368 <__udivmodsi4>
     7e6:	c9 01       	movw	r24, r18
     7e8:	cf 91       	pop	r28
     7ea:	ff 90       	pop	r15
     7ec:	ef 90       	pop	r14
     7ee:	df 90       	pop	r13
     7f0:	cf 90       	pop	r12
     7f2:	08 95       	ret

000007f4 <Read_all_temps>:
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	ec 01       	movw	r28, r24
     7fe:	8c 01       	movw	r16, r24
     800:	00 57       	subi	r16, 0x70	; 112
     802:	1f 4f       	sbci	r17, 0xFF	; 255
     804:	ce 01       	movw	r24, r28
     806:	0e 94 ba 03 	call	0x774	; 0x774 <Read_temp>
     80a:	9d 83       	std	Y+5, r25	; 0x05
     80c:	8c 83       	std	Y+4, r24	; 0x04
     80e:	62 96       	adiw	r28, 0x12	; 18
     810:	c0 17       	cp	r28, r16
     812:	d1 07       	cpc	r29, r17
     814:	b9 f7       	brne	.-18     	; 0x804 <Read_all_temps+0x10>
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	1f 91       	pop	r17
     81c:	0f 91       	pop	r16
     81e:	08 95       	ret

00000820 <TX_cellTemps>:
     820:	af 92       	push	r10
     822:	bf 92       	push	r11
     824:	cf 92       	push	r12
     826:	df 92       	push	r13
     828:	ef 92       	push	r14
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	cd b7       	in	r28, 0x3d	; 61
     834:	de b7       	in	r29, 0x3e	; 62
     836:	28 97       	sbiw	r28, 0x08	; 8
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	f8 94       	cli
     83c:	de bf       	out	0x3e, r29	; 62
     83e:	0f be       	out	0x3f, r0	; 63
     840:	cd bf       	out	0x3d, r28	; 61
     842:	5c 01       	movw	r10, r24
     844:	bc 01       	movw	r22, r24
     846:	6c 5f       	subi	r22, 0xFC	; 252
     848:	7f 4f       	sbci	r23, 0xFF	; 255
     84a:	6e 01       	movw	r12, r28
     84c:	82 e0       	ldi	r24, 0x02	; 2
     84e:	c8 0e       	add	r12, r24
     850:	d1 1c       	adc	r13, r1
     852:	ae 01       	movw	r20, r28
     854:	46 5f       	subi	r20, 0xF6	; 246
     856:	5f 4f       	sbci	r21, 0xFF	; 255
     858:	f6 01       	movw	r30, r12
     85a:	db 01       	movw	r26, r22
     85c:	8c 91       	ld	r24, X
     85e:	11 96       	adiw	r26, 0x01	; 1
     860:	9c 91       	ld	r25, X
     862:	9f 01       	movw	r18, r30
     864:	21 50       	subi	r18, 0x01	; 1
     866:	31 09       	sbc	r19, r1
     868:	d9 01       	movw	r26, r18
     86a:	9c 93       	st	X, r25
     86c:	80 83       	st	Z, r24
     86e:	6e 5e       	subi	r22, 0xEE	; 238
     870:	7f 4f       	sbci	r23, 0xFF	; 255
     872:	32 96       	adiw	r30, 0x02	; 2
     874:	e4 17       	cp	r30, r20
     876:	f5 07       	cpc	r31, r21
     878:	81 f7       	brne	.-32     	; 0x85a <TX_cellTemps+0x3a>
     87a:	0e 94 80 01 	call	0x300	; 0x300 <CAN_findFreeTXMOB>
     87e:	88 23       	and	r24, r24
     880:	0c f4       	brge	.+2      	; 0x884 <TX_cellTemps+0x64>
     882:	5a c0       	rjmp	.+180    	; 0x938 <TX_cellTemps+0x118>
     884:	00 91 0c 01 	lds	r16, 0x010C	; 0x80010c <deviceID>
     888:	10 91 0d 01 	lds	r17, 0x010D	; 0x80010d <deviceID+0x1>
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	0f 2e       	mov	r0, r31
     892:	f2 e1       	ldi	r31, 0x12	; 18
     894:	00 0f       	add	r16, r16
     896:	11 1f       	adc	r17, r17
     898:	22 1f       	adc	r18, r18
     89a:	33 1f       	adc	r19, r19
     89c:	fa 95       	dec	r31
     89e:	d1 f7       	brne	.-12     	; 0x894 <TX_cellTemps+0x74>
     8a0:	f0 2d       	mov	r31, r0
     8a2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <AMUID>
     8a6:	19 2b       	or	r17, r25
     8a8:	04 60       	ori	r16, 0x04	; 4
     8aa:	e1 2c       	mov	r14, r1
     8ac:	ae 01       	movw	r20, r28
     8ae:	4f 5f       	subi	r20, 0xFF	; 255
     8b0:	5f 4f       	sbci	r21, 0xFF	; 255
     8b2:	68 e0       	ldi	r22, 0x08	; 8
     8b4:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_TXMOB>
     8b8:	8f e1       	ldi	r24, 0x1F	; 31
     8ba:	9e e4       	ldi	r25, 0x4E	; 78
     8bc:	01 97       	sbiw	r24, 0x01	; 1
     8be:	f1 f7       	brne	.-4      	; 0x8bc <TX_cellTemps+0x9c>
     8c0:	00 c0       	rjmp	.+0      	; 0x8c2 <TX_cellTemps+0xa2>
     8c2:	00 00       	nop
     8c4:	f5 01       	movw	r30, r10
     8c6:	e4 5b       	subi	r30, 0xB4	; 180
     8c8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ca:	94 e9       	ldi	r25, 0x94	; 148
     8cc:	a9 0e       	add	r10, r25
     8ce:	b1 1c       	adc	r11, r1
     8d0:	80 81       	ld	r24, Z
     8d2:	91 81       	ldd	r25, Z+1	; 0x01
     8d4:	d6 01       	movw	r26, r12
     8d6:	11 97       	sbiw	r26, 0x01	; 1
     8d8:	9c 93       	st	X, r25
     8da:	d6 01       	movw	r26, r12
     8dc:	8c 93       	st	X, r24
     8de:	72 96       	adiw	r30, 0x12	; 18
     8e0:	b2 e0       	ldi	r27, 0x02	; 2
     8e2:	cb 0e       	add	r12, r27
     8e4:	d1 1c       	adc	r13, r1
     8e6:	ea 15       	cp	r30, r10
     8e8:	fb 05       	cpc	r31, r11
     8ea:	91 f7       	brne	.-28     	; 0x8d0 <TX_cellTemps+0xb0>
     8ec:	0e 94 80 01 	call	0x300	; 0x300 <CAN_findFreeTXMOB>
     8f0:	88 23       	and	r24, r24
     8f2:	24 f1       	brlt	.+72     	; 0x93c <TX_cellTemps+0x11c>
     8f4:	00 91 0c 01 	lds	r16, 0x010C	; 0x80010c <deviceID>
     8f8:	10 91 0d 01 	lds	r17, 0x010D	; 0x80010d <deviceID+0x1>
     8fc:	20 e0       	ldi	r18, 0x00	; 0
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	0f 2e       	mov	r0, r31
     902:	f2 e1       	ldi	r31, 0x12	; 18
     904:	00 0f       	add	r16, r16
     906:	11 1f       	adc	r17, r17
     908:	22 1f       	adc	r18, r18
     90a:	33 1f       	adc	r19, r19
     90c:	fa 95       	dec	r31
     90e:	d1 f7       	brne	.-12     	; 0x904 <TX_cellTemps+0xe4>
     910:	f0 2d       	mov	r31, r0
     912:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <AMUID>
     916:	19 2b       	or	r17, r25
     918:	05 60       	ori	r16, 0x05	; 5
     91a:	e1 2c       	mov	r14, r1
     91c:	ae 01       	movw	r20, r28
     91e:	4f 5f       	subi	r20, 0xFF	; 255
     920:	5f 4f       	sbci	r21, 0xFF	; 255
     922:	68 e0       	ldi	r22, 0x08	; 8
     924:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_TXMOB>
     928:	8f e1       	ldi	r24, 0x1F	; 31
     92a:	9e e4       	ldi	r25, 0x4E	; 78
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	f1 f7       	brne	.-4      	; 0x92c <TX_cellTemps+0x10c>
     930:	00 c0       	rjmp	.+0      	; 0x932 <TX_cellTemps+0x112>
     932:	00 00       	nop
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	03 c0       	rjmp	.+6      	; 0x93e <TX_cellTemps+0x11e>
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	01 c0       	rjmp	.+2      	; 0x93e <TX_cellTemps+0x11e>
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	28 96       	adiw	r28, 0x08	; 8
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	f8 94       	cli
     944:	de bf       	out	0x3e, r29	; 62
     946:	0f be       	out	0x3f, r0	; 63
     948:	cd bf       	out	0x3d, r28	; 61
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	ef 90       	pop	r14
     954:	df 90       	pop	r13
     956:	cf 90       	pop	r12
     958:	bf 90       	pop	r11
     95a:	af 90       	pop	r10
     95c:	08 95       	ret

0000095e <Balance_on>:
     95e:	14 bc       	out	0x24, r1	; 36
     960:	82 e0       	ldi	r24, 0x02	; 2
     962:	85 bd       	out	0x25, r24	; 37
     964:	98 ec       	ldi	r25, 0xC8	; 200
     966:	97 bd       	out	0x27, r25	; 39
     968:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
     96c:	08 95       	ret

0000096e <Balance_off>:
     96e:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
     972:	85 b1       	in	r24, 0x05	; 5
     974:	84 7e       	andi	r24, 0xE4	; 228
     976:	85 b9       	out	0x05, r24	; 5
     978:	88 b1       	in	r24, 0x08	; 8
     97a:	8d 77       	andi	r24, 0x7D	; 125
     97c:	88 b9       	out	0x08, r24	; 8
     97e:	8b b1       	in	r24, 0x0b	; 11
     980:	8d 77       	andi	r24, 0x7D	; 125
     982:	8b b9       	out	0x0b, r24	; 11
     984:	0e 94 96 02 	call	0x52c	; 0x52c <LED_off>
     988:	08 95       	ret

0000098a <Balance_init>:
     98a:	bf 92       	push	r11
     98c:	cf 92       	push	r12
     98e:	df 92       	push	r13
     990:	ef 92       	push	r14
     992:	ff 92       	push	r15
     994:	0f 93       	push	r16
     996:	1f 93       	push	r17
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	fc 01       	movw	r30, r24
     99e:	03 81       	ldd	r16, Z+3	; 0x03
     9a0:	46 81       	ldd	r20, Z+6	; 0x06
     9a2:	57 81       	ldd	r21, Z+7	; 0x07
     9a4:	9a 01       	movw	r18, r20
     9a6:	e0 90 10 01 	lds	r14, 0x0110	; 0x800110 <CELL_V_ERR_MAX>
     9aa:	f0 90 11 01 	lds	r15, 0x0111	; 0x800111 <CELL_V_ERR_MAX+0x1>
     9ae:	4e 15       	cp	r20, r14
     9b0:	5f 05       	cpc	r21, r15
     9b2:	08 f0       	brcs	.+2      	; 0x9b6 <Balance_init+0x2c>
     9b4:	7d c0       	rjmp	.+250    	; 0xab0 <Balance_init+0x126>
     9b6:	c0 90 12 01 	lds	r12, 0x0112	; 0x800112 <CELL_V_ERR_MIN>
     9ba:	d0 90 13 01 	lds	r13, 0x0113	; 0x800113 <CELL_V_ERR_MIN+0x1>
     9be:	c4 16       	cp	r12, r20
     9c0:	d5 06       	cpc	r13, r21
     9c2:	08 f0       	brcs	.+2      	; 0x9c6 <Balance_init+0x3c>
     9c4:	75 c0       	rjmp	.+234    	; 0xab0 <Balance_init+0x126>
     9c6:	dc 01       	movw	r26, r24
     9c8:	13 96       	adiw	r26, 0x03	; 3
     9ca:	bc 01       	movw	r22, r24
     9cc:	6f 57       	subi	r22, 0x7F	; 127
     9ce:	7f 4f       	sbci	r23, 0xFF	; 255
     9d0:	fd 01       	movw	r30, r26
     9d2:	ea 01       	movw	r28, r20
     9d4:	10 2f       	mov	r17, r16
     9d6:	0b c0       	rjmp	.+22     	; 0x9ee <Balance_init+0x64>
     9d8:	25 89       	ldd	r18, Z+21	; 0x15
     9da:	36 89       	ldd	r19, Z+22	; 0x16
     9dc:	2e 15       	cp	r18, r14
     9de:	3f 05       	cpc	r19, r15
     9e0:	08 f0       	brcs	.+2      	; 0x9e4 <Balance_init+0x5a>
     9e2:	66 c0       	rjmp	.+204    	; 0xab0 <Balance_init+0x126>
     9e4:	72 96       	adiw	r30, 0x12	; 18
     9e6:	c2 16       	cp	r12, r18
     9e8:	d3 06       	cpc	r13, r19
     9ea:	08 f0       	brcs	.+2      	; 0x9ee <Balance_init+0x64>
     9ec:	61 c0       	rjmp	.+194    	; 0xab0 <Balance_init+0x126>
     9ee:	42 17       	cp	r20, r18
     9f0:	53 07       	cpc	r21, r19
     9f2:	10 f0       	brcs	.+4      	; 0x9f8 <Balance_init+0x6e>
     9f4:	00 81       	ld	r16, Z
     9f6:	a9 01       	movw	r20, r18
     9f8:	c2 17       	cp	r28, r18
     9fa:	d3 07       	cpc	r29, r19
     9fc:	10 f4       	brcc	.+4      	; 0xa02 <Balance_init+0x78>
     9fe:	10 81       	ld	r17, Z
     a00:	e9 01       	movw	r28, r18
     a02:	e6 17       	cp	r30, r22
     a04:	f7 07       	cpc	r31, r23
     a06:	41 f7       	brne	.-48     	; 0x9d8 <Balance_init+0x4e>
     a08:	fc 01       	movw	r30, r24
     a0a:	26 81       	ldd	r18, Z+6	; 0x06
     a0c:	37 81       	ldd	r19, Z+7	; 0x07
     a0e:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <CELL_V_DIFF_MAX_THRESHOLD>
     a12:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <CELL_V_DIFF_MAX_THRESHOLD+0x1>
     a16:	7a 01       	movw	r14, r20
     a18:	ee 0e       	add	r14, r30
     a1a:	ff 1e       	adc	r15, r31
     a1c:	e2 16       	cp	r14, r18
     a1e:	f3 06       	cpc	r15, r19
     a20:	08 f4       	brcc	.+2      	; 0xa24 <Balance_init+0x9a>
     a22:	46 c0       	rjmp	.+140    	; 0xab0 <Balance_init+0x126>
     a24:	6a 01       	movw	r12, r20
     a26:	ce 1a       	sub	r12, r30
     a28:	df 0a       	sbc	r13, r31
     a2a:	2c 15       	cp	r18, r12
     a2c:	3d 05       	cpc	r19, r13
     a2e:	08 f4       	brcc	.+2      	; 0xa32 <Balance_init+0xa8>
     a30:	3f c0       	rjmp	.+126    	; 0xab0 <Balance_init+0x126>
     a32:	fd 01       	movw	r30, r26
     a34:	ea 01       	movw	r28, r20
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <Balance_init+0xc0>
     a38:	25 89       	ldd	r18, Z+21	; 0x15
     a3a:	36 89       	ldd	r19, Z+22	; 0x16
     a3c:	e2 16       	cp	r14, r18
     a3e:	f3 06       	cpc	r15, r19
     a40:	b8 f1       	brcs	.+110    	; 0xab0 <Balance_init+0x126>
     a42:	72 96       	adiw	r30, 0x12	; 18
     a44:	2c 15       	cp	r18, r12
     a46:	3d 05       	cpc	r19, r13
     a48:	98 f1       	brcs	.+102    	; 0xab0 <Balance_init+0x126>
     a4a:	2c 17       	cp	r18, r28
     a4c:	3d 07       	cpc	r19, r29
     a4e:	28 f0       	brcs	.+10     	; 0xa5a <Balance_init+0xd0>
     a50:	b0 80       	ld	r11, Z
     a52:	1b 15       	cp	r17, r11
     a54:	11 f0       	breq	.+4      	; 0xa5a <Balance_init+0xd0>
     a56:	e9 01       	movw	r28, r18
     a58:	0b 2d       	mov	r16, r11
     a5a:	6e 17       	cp	r22, r30
     a5c:	7f 07       	cpc	r23, r31
     a5e:	61 f7       	brne	.-40     	; 0xa38 <Balance_init+0xae>
     a60:	8d 56       	subi	r24, 0x6D	; 109
     a62:	9f 4f       	sbci	r25, 0xFF	; 255
     a64:	fd 01       	movw	r30, r26
     a66:	23 81       	ldd	r18, Z+3	; 0x03
     a68:	34 81       	ldd	r19, Z+4	; 0x04
     a6a:	24 17       	cp	r18, r20
     a6c:	35 07       	cpc	r19, r21
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <Balance_init+0xf0>
     a70:	60 81       	ld	r22, Z
     a72:	16 17       	cp	r17, r22
     a74:	11 f0       	breq	.+4      	; 0xa7a <Balance_init+0xf0>
     a76:	60 13       	cpse	r22, r16
     a78:	a9 01       	movw	r20, r18
     a7a:	72 96       	adiw	r30, 0x12	; 18
     a7c:	e8 17       	cp	r30, r24
     a7e:	f9 07       	cpc	r31, r25
     a80:	91 f7       	brne	.-28     	; 0xa66 <Balance_init+0xdc>
     a82:	13 96       	adiw	r26, 0x03	; 3
     a84:	4d 91       	ld	r20, X+
     a86:	5c 91       	ld	r21, X
     a88:	14 97       	sbiw	r26, 0x04	; 4
     a8a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <BALANCE_TARGET_VOLTAGE>
     a8e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <BALANCE_TARGET_VOLTAGE+0x1>
     a92:	24 17       	cp	r18, r20
     a94:	35 07       	cpc	r19, r21
     a96:	40 f4       	brcc	.+16     	; 0xaa8 <Balance_init+0x11e>
     a98:	ec 91       	ld	r30, X
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	ed 5f       	subi	r30, 0xFD	; 253
     a9e:	fe 4f       	sbci	r31, 0xFE	; 254
     aa0:	30 81       	ld	r19, Z
     aa2:	2e b3       	in	r18, 0x1e	; 30
     aa4:	23 2b       	or	r18, r19
     aa6:	2e bb       	out	0x1e, r18	; 30
     aa8:	52 96       	adiw	r26, 0x12	; 18
     aaa:	8a 17       	cp	r24, r26
     aac:	9b 07       	cpc	r25, r27
     aae:	49 f7       	brne	.-46     	; 0xa82 <Balance_init+0xf8>
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	1f 91       	pop	r17
     ab6:	0f 91       	pop	r16
     ab8:	ff 90       	pop	r15
     aba:	ef 90       	pop	r14
     abc:	df 90       	pop	r13
     abe:	cf 90       	pop	r12
     ac0:	bf 90       	pop	r11
     ac2:	08 95       	ret

00000ac4 <Wake_Set>:
     ac4:	58 9a       	sbi	0x0b, 0	; 11
     ac6:	08 95       	ret

00000ac8 <Wake_Unset>:
     ac8:	58 98       	cbi	0x0b, 0	; 11
     aca:	08 95       	ret

00000acc <PowerDown>:

void PowerDown()
{

	//SMCR = (1<<SM1)|(1<<SE);	//0b00000101	//power down mode //also known as SLEEP_MODE_PWR_DOWN. This also enables the mode with 1<<SE.
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);		//power down shuts the main clock down.
     acc:	83 b7       	in	r24, 0x33	; 51
     ace:	81 7f       	andi	r24, 0xF1	; 241
     ad0:	84 60       	ori	r24, 0x04	; 4
     ad2:	83 bf       	out	0x33, r24	; 51
	sleep_enable();
     ad4:	83 b7       	in	r24, 0x33	; 51
     ad6:	81 60       	ori	r24, 0x01	; 1
     ad8:	83 bf       	out	0x33, r24	; 51
	sleep_cpu();				//enter the sleep state.
     ada:	88 95       	sleep
     adc:	08 95       	ret

00000ade <main>:

}

int main(void)
{
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
     ae2:	cd b7       	in	r28, 0x3d	; 61
     ae4:	de b7       	in	r29, 0x3e	; 62
     ae6:	c0 59       	subi	r28, 0x90	; 144
     ae8:	d1 09       	sbc	r29, r1
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	f8 94       	cli
     aee:	de bf       	out	0x3e, r29	; 62
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	cd bf       	out	0x3d, r28	; 61
     af4:	8f e3       	ldi	r24, 0x3F	; 63
     af6:	9c e9       	ldi	r25, 0x9C	; 156
     af8:	01 97       	sbiw	r24, 0x01	; 1
     afa:	f1 f7       	brne	.-4      	; 0xaf8 <main+0x1a>
     afc:	00 c0       	rjmp	.+0      	; 0xafe <main+0x20>
     afe:	00 00       	nop
	_delay_ms(10);
	
	
	CMU_eeprom_write(EEPROM_DEVICE_ID, 6);
     b00:	66 e0       	ldi	r22, 0x06	; 6
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	0e 94 52 02 	call	0x4a4	; 0x4a4 <CMU_eeprom_write>
	CMU_eeprom_write(EEPROM_ADC_SAMPLES, 3);
     b0c:	63 e0       	ldi	r22, 0x03	; 3
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	82 e0       	ldi	r24, 0x02	; 2
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	0e 94 52 02 	call	0x4a4	; 0x4a4 <CMU_eeprom_write>
	CMU_eeprom_write(EEPROM_FW_VERSION, 1003);
     b18:	6b ee       	ldi	r22, 0xEB	; 235
     b1a:	73 e0       	ldi	r23, 0x03	; 3
     b1c:	84 e0       	ldi	r24, 0x04	; 4
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	0e 94 52 02 	call	0x4a4	; 0x4a4 <CMU_eeprom_write>
	CMU_eeprom_write(EEPROM_CELL_V_DIFF_MAX_THRESHOLD, 500);
     b24:	64 ef       	ldi	r22, 0xF4	; 244
     b26:	71 e0       	ldi	r23, 0x01	; 1
     b28:	80 e4       	ldi	r24, 0x40	; 64
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <CMU_eeprom_write>
	CMU_eeprom_write(EEPROM_CELL_V_DIFF_MIN_THRESHOLD, 500);
     b30:	64 ef       	ldi	r22, 0xF4	; 244
     b32:	71 e0       	ldi	r23, 0x01	; 1
     b34:	82 e4       	ldi	r24, 0x42	; 66
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	0e 94 52 02 	call	0x4a4	; 0x4a4 <CMU_eeprom_write>
	CMU_eeprom_write(EEPROM_DISCHARGE_SCALE, 200);
     b3c:	68 ec       	ldi	r22, 0xC8	; 200
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	88 e4       	ldi	r24, 0x48	; 72
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 52 02 	call	0x4a4	; 0x4a4 <CMU_eeprom_write>
	
	EEPROMWriteComplete = 0;
     b48:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <EEPROMWriteComplete>
	
	IO_init();		//initialise IO and INT3 for waking up from power down mode
     b4c:	0e 94 a9 01 	call	0x352	; 0x352 <IO_init>
	//Wake_Set();
	ADC_init();		//initialises ADC
     b50:	0e 94 b6 01 	call	0x36c	; 0x36c <ADC_init>
	CAN_init();		//initialises CAN, without enabling any receive MOBs
     b54:	0e 94 5d 00 	call	0xba	; 0xba <CAN_init>
	CAN_RXInit(4, 0, 0, 0);	//set mob up for listening to audit requests
     b58:	e1 2c       	mov	r14, r1
     b5a:	f1 2c       	mov	r15, r1
     b5c:	87 01       	movw	r16, r14
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	a9 01       	movw	r20, r18
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	84 e0       	ldi	r24, 0x04	; 4
     b68:	0e 94 b3 00 	call	0x166	; 0x166 <CAN_RXInit>
	
	
	
	//srand(ADC_read(0));
	Parameters_init();	//disable this until we have the parameters on the eeprom
     b6c:	0e 94 1f 02 	call	0x43e	; 0x43e <Parameters_init>
	
	PowerDown();		//shutdown until woken for the first time
     b70:	0e 94 66 05 	call	0xacc	; 0xacc <PowerDown>
     b74:	9f ef       	ldi	r25, 0xFF	; 255
     b76:	e3 ec       	ldi	r30, 0xC3	; 195
     b78:	f9 e0       	ldi	r31, 0x09	; 9
     b7a:	91 50       	subi	r25, 0x01	; 1
     b7c:	e0 40       	sbci	r30, 0x00	; 0
     b7e:	f0 40       	sbci	r31, 0x00	; 0
     b80:	e1 f7       	brne	.-8      	; 0xb7a <main+0x9c>
     b82:	00 c0       	rjmp	.+0      	; 0xb84 <main+0xa6>
     b84:	00 00       	nop
	
	//
	_delay_ms(200);	//await registration messages which will be automatically handled in interrupts
	
	if(!registered)_delay_ms(800);
     b86:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <registered>
     b8a:	81 11       	cpse	r24, r1
     b8c:	b1 c0       	rjmp	.+354    	; 0xcf0 <main+0x212>
     b8e:	2f ef       	ldi	r18, 0xFF	; 255
     b90:	8f e0       	ldi	r24, 0x0F	; 15
     b92:	97 e2       	ldi	r25, 0x27	; 39
     b94:	21 50       	subi	r18, 0x01	; 1
     b96:	80 40       	sbci	r24, 0x00	; 0
     b98:	90 40       	sbci	r25, 0x00	; 0
     b9a:	e1 f7       	brne	.-8      	; 0xb94 <main+0xb6>
     b9c:	00 c0       	rjmp	.+0      	; 0xb9e <main+0xc0>
     b9e:	00 00       	nop
	//while(WAKE_IN_PIN);
	if (WAKE_IN_PIN && !registered) //if the wake in pin is still high and we aren't registered, there is a problem
     ba0:	30 9b       	sbis	0x06, 0	; 6
     ba2:	17 c0       	rjmp	.+46     	; 0xbd2 <main+0xf4>
     ba4:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <registered>
     ba8:	81 11       	cpse	r24, r1
     baa:	13 c0       	rjmp	.+38     	; 0xbd2 <main+0xf4>
	{
		while(1)					//loop endlessly
		{
			LED_flash(50);			//flashing LED 3 times
     bac:	82 e3       	ldi	r24, 0x32	; 50
     bae:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LED_flash>
			LED_flash(50);
     bb2:	82 e3       	ldi	r24, 0x32	; 50
     bb4:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LED_flash>
			LED_flash(50);
     bb8:	82 e3       	ldi	r24, 0x32	; 50
     bba:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LED_flash>
     bbe:	ef ef       	ldi	r30, 0xFF	; 255
     bc0:	f7 ea       	ldi	r31, 0xA7	; 167
     bc2:	21 e6       	ldi	r18, 0x61	; 97
     bc4:	e1 50       	subi	r30, 0x01	; 1
     bc6:	f0 40       	sbci	r31, 0x00	; 0
     bc8:	20 40       	sbci	r18, 0x00	; 0
     bca:	e1 f7       	brne	.-8      	; 0xbc4 <main+0xe6>
     bcc:	00 c0       	rjmp	.+0      	; 0xbce <main+0xf0>
     bce:	00 00       	nop
     bd0:	ed cf       	rjmp	.-38     	; 0xbac <main+0xce>
			_delay_ms(2000);		//every two seconds.
			
		}	
	}
	
	CAN_RXInit(5, 0, ADMINmsk, ADMIN );				//set mob up for listening to admin messages
     bd2:	e1 2c       	mov	r14, r1
     bd4:	f1 2c       	mov	r15, r1
     bd6:	00 e0       	ldi	r16, 0x00	; 0
     bd8:	10 e1       	ldi	r17, 0x10	; 16
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	40 e0       	ldi	r20, 0x00	; 0
     be0:	50 e1       	ldi	r21, 0x10	; 16
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	85 e0       	ldi	r24, 0x05	; 5
     be6:	0e 94 b3 00 	call	0x166	; 0x166 <CAN_RXInit>
	cell cells[8];					//create primary cell array. this will hold all configuration and collected data on the cells.
    Cells_init(cells);
     bea:	ce 01       	movw	r24, r28
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	0e 94 c1 01 	call	0x382	; 0x382 <Cells_init>
	CellBalanceMode = 0;
     bf2:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <CellBalanceMode>
	//uint16_t x = 0;
	//double temp = 0.00;
	Wake_Set();
     bf6:	0e 94 62 05 	call	0xac4	; 0xac4 <Wake_Set>
	while(WAKE_IN_PIN);
     bfa:	30 99       	sbic	0x06, 0	; 6
     bfc:	fe cf       	rjmp	.-4      	; 0xbfa <main+0x11c>
	Wake_Unset();
     bfe:	0e 94 64 05 	call	0xac8	; 0xac8 <Wake_Unset>
	PowerDown();
     c02:	0e 94 66 05 	call	0xacc	; 0xacc <PowerDown>
			//LED_on();
		}
		else
		{
			_delay_ms(200);
			CANPAGE = (4 << 4);
     c06:	0f 2e       	mov	r0, r31
     c08:	fd ee       	ldi	r31, 0xED	; 237
     c0a:	af 2e       	mov	r10, r31
     c0c:	b1 2c       	mov	r11, r1
     c0e:	f0 2d       	mov	r31, r0
     c10:	68 94       	set
     c12:	99 24       	eor	r9, r9
     c14:	96 f8       	bld	r9, 6
			CANSTMOB &= ~(1 << RXOK);	//unset the RXOK bit to clear the interrupt.
     c16:	0f 2e       	mov	r0, r31
     c18:	fe ee       	ldi	r31, 0xEE	; 238
     c1a:	cf 2e       	mov	r12, r31
     c1c:	d1 2c       	mov	r13, r1
     c1e:	f0 2d       	mov	r31, r0
	while(1)
    {
		//mob = CAN_findFreeTXMOB();
		//if(mob>=0)CAN_TXMOB(mob, 0, 0, ((uint32_t)deviceID<<18)|((uint32_t)AMUID<<8)|AUDIT_RESPONSE, 0); //transmit registration and do not wait for finish
		//
		LED_on();
     c20:	0e 94 93 02 	call	0x526	; 0x526 <LED_on>
     c24:	8f e1       	ldi	r24, 0x1F	; 31
     c26:	9e e4       	ldi	r25, 0x4E	; 78
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	f1 f7       	brne	.-4      	; 0xc28 <main+0x14a>
     c2c:	00 c0       	rjmp	.+0      	; 0xc2e <main+0x150>
     c2e:	00 00       	nop
		
		//temp = 0.0000004*pow(x,3) -0.006*pow(x,2) +0.3424*x -37.7329;
		
		
		
		CellBalanceMode = 0;		//after one balance process, ensure that balancing is turned off. this is to ensure that if no contact is received from the AMU, things won't blow up
     c30:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <CellBalanceMode>

		Balance_off();
     c34:	0e 94 b7 04 	call	0x96e	; 0x96e <Balance_off>
		Read_all_voltages(cells);	//Reads all voltages, 3.7ms
     c38:	ce 01       	movw	r24, r28
     c3a:	01 96       	adiw	r24, 0x01	; 1
     c3c:	0e 94 e6 02 	call	0x5cc	; 0x5cc <Read_all_voltages>
		if(!(TX_cellVoltage(cells)))LED_flash(20); 
     c40:	ce 01       	movw	r24, r28
     c42:	01 96       	adiw	r24, 0x01	; 1
     c44:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <TX_cellVoltage>
     c48:	81 11       	cpse	r24, r1
     c4a:	03 c0       	rjmp	.+6      	; 0xc52 <main+0x174>
     c4c:	84 e1       	ldi	r24, 0x14	; 20
     c4e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LED_flash>
		Read_all_temps(cells);
     c52:	ce 01       	movw	r24, r28
     c54:	01 96       	adiw	r24, 0x01	; 1
     c56:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <Read_all_temps>
		//cells[3].temperature = (uint16_t)temp;
		
		if(!(TX_cellTemps(cells)))LED_flash(20);
     c5a:	ce 01       	movw	r24, r28
     c5c:	01 96       	adiw	r24, 0x01	; 1
     c5e:	0e 94 10 04 	call	0x820	; 0x820 <TX_cellTemps>
     c62:	81 11       	cpse	r24, r1
     c64:	03 c0       	rjmp	.+6      	; 0xc6c <main+0x18e>
     c66:	84 e1       	ldi	r24, 0x14	; 20
     c68:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LED_flash>
		//_delay_ms(10);
		Wake_Set();
     c6c:	0e 94 62 05 	call	0xac4	; 0xac4 <Wake_Set>
			
		
		if(CellBalanceMode)
     c70:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <CellBalanceMode>
     c74:	88 23       	and	r24, r24
     c76:	59 f0       	breq	.+22     	; 0xc8e <main+0x1b0>
		{
			LED_off();
     c78:	0e 94 96 02 	call	0x52c	; 0x52c <LED_off>
			Balance_init(cells);
     c7c:	ce 01       	movw	r24, r28
     c7e:	01 96       	adiw	r24, 0x01	; 1
     c80:	0e 94 c5 04 	call	0x98a	; 0x98a <Balance_init>
			Balance_on();
     c84:	0e 94 af 04 	call	0x95e	; 0x95e <Balance_on>
			LED_flash(50);
     c88:	82 e3       	ldi	r24, 0x32	; 50
     c8a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LED_flash>
		}
		
		if(!(WAKE_IN_PIN))
     c8e:	30 99       	sbic	0x06, 0	; 6
     c90:	0d c0       	rjmp	.+26     	; 0xcac <main+0x1ce>
		{
			LED_off();
     c92:	0e 94 96 02 	call	0x52c	; 0x52c <LED_off>
     c96:	ef e9       	ldi	r30, 0x9F	; 159
     c98:	ff e0       	ldi	r31, 0x0F	; 15
     c9a:	31 97       	sbiw	r30, 0x01	; 1
     c9c:	f1 f7       	brne	.-4      	; 0xc9a <main+0x1bc>
     c9e:	00 c0       	rjmp	.+0      	; 0xca0 <main+0x1c2>
     ca0:	00 00       	nop
			_delay_ms(1);
			Wake_Unset();
     ca2:	0e 94 64 05 	call	0xac8	; 0xac8 <Wake_Unset>
			PowerDown();
     ca6:	0e 94 66 05 	call	0xacc	; 0xacc <PowerDown>
     caa:	0f c0       	rjmp	.+30     	; 0xcca <main+0x1ec>
     cac:	ff ef       	ldi	r31, 0xFF	; 255
     cae:	23 ec       	ldi	r18, 0xC3	; 195
     cb0:	89 e0       	ldi	r24, 0x09	; 9
     cb2:	f1 50       	subi	r31, 0x01	; 1
     cb4:	20 40       	sbci	r18, 0x00	; 0
     cb6:	80 40       	sbci	r24, 0x00	; 0
     cb8:	e1 f7       	brne	.-8      	; 0xcb2 <main+0x1d4>
     cba:	00 c0       	rjmp	.+0      	; 0xcbc <main+0x1de>
     cbc:	00 00       	nop
			//LED_on();
		}
		else
		{
			_delay_ms(200);
			CANPAGE = (4 << 4);
     cbe:	f5 01       	movw	r30, r10
     cc0:	90 82       	st	Z, r9
			CANSTMOB &= ~(1 << RXOK);	//unset the RXOK bit to clear the interrupt.
     cc2:	f6 01       	movw	r30, r12
     cc4:	80 81       	ld	r24, Z
     cc6:	8f 7d       	andi	r24, 0xDF	; 223
     cc8:	80 83       	st	Z, r24
		}
		CANPAGE = (4 << 4);
     cca:	f5 01       	movw	r30, r10
     ccc:	90 82       	st	Z, r9
		CANSTMOB &= ~(1 << RXOK);	//unset the RXOK bit to clear the interrupt.
     cce:	f6 01       	movw	r30, r12
     cd0:	80 81       	ld	r24, Z
     cd2:	8f 7d       	andi	r24, 0xDF	; 223
     cd4:	80 83       	st	Z, r24
		CAN_RXInit(4,0,AMUmsk, AMU);	//set mob up for listening to the AMU
     cd6:	e1 2c       	mov	r14, r1
     cd8:	f1 2c       	mov	r15, r1
     cda:	00 e0       	ldi	r16, 0x00	; 0
     cdc:	18 e0       	ldi	r17, 0x08	; 8
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	40 e0       	ldi	r20, 0x00	; 0
     ce4:	58 e0       	ldi	r21, 0x08	; 8
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	84 e0       	ldi	r24, 0x04	; 4
     cea:	0e 94 b3 00 	call	0x166	; 0x166 <CAN_RXInit>
		//Balance_cells(cells);
		//Read_all_temps(cells);		//Reads all temperatures, 2.9ms

		
		//PORTD |= (1<<PIND7);		//send wake out, halfway through sending our data back to the AMU.
    }
     cee:	98 cf       	rjmp	.-208    	; 0xc20 <main+0x142>
	//
	_delay_ms(200);	//await registration messages which will be automatically handled in interrupts
	
	if(!registered)_delay_ms(800);
	//while(WAKE_IN_PIN);
	if (WAKE_IN_PIN && !registered) //if the wake in pin is still high and we aren't registered, there is a problem
     cf0:	86 b1       	in	r24, 0x06	; 6
     cf2:	6f cf       	rjmp	.-290    	; 0xbd2 <main+0xf4>

00000cf4 <__vector_10>:
		//PORTD |= (1<<PIND7);		//send wake out, halfway through sending our data back to the AMU.
    }
}

ISR(INT3_vect)
{
     cf4:	1f 92       	push	r1
     cf6:	0f 92       	push	r0
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	0f 92       	push	r0
     cfc:	11 24       	eor	r1, r1
     cfe:	8f 93       	push	r24
	SMCR = (0<<SM2)|(0<<SM1)|(1<<SM0)|(0<<SE);		//disable the mode, and disable the enable bit.
     d00:	82 e0       	ldi	r24, 0x02	; 2
     d02:	83 bf       	out	0x33, r24	; 51
}
     d04:	8f 91       	pop	r24
     d06:	0f 90       	pop	r0
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	0f 90       	pop	r0
     d0c:	1f 90       	pop	r1
     d0e:	18 95       	reti

00000d10 <__vector_18>:

ISR(CAN_INT_vect)
{
     d10:	1f 92       	push	r1
     d12:	0f 92       	push	r0
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	0f 92       	push	r0
     d18:	11 24       	eor	r1, r1
     d1a:	ef 92       	push	r14
     d1c:	ff 92       	push	r15
     d1e:	0f 93       	push	r16
     d20:	1f 93       	push	r17
     d22:	2f 93       	push	r18
     d24:	3f 93       	push	r19
     d26:	4f 93       	push	r20
     d28:	5f 93       	push	r21
     d2a:	6f 93       	push	r22
     d2c:	7f 93       	push	r23
     d2e:	8f 93       	push	r24
     d30:	9f 93       	push	r25
     d32:	af 93       	push	r26
     d34:	bf 93       	push	r27
     d36:	ef 93       	push	r30
     d38:	ff 93       	push	r31
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	00 d0       	rcall	.+0      	; 0xd40 <__vector_18+0x30>
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
	//uint8_t authority;
	int8_t mob;	
	
	if((CANSIT2 & (1 << SIT4)))	//we received a CAN message on mob 5, which is set up to receive exclusively from the AMU.
     d44:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
     d48:	84 ff       	sbrs	r24, 4
     d4a:	c5 c0       	rjmp	.+394    	; 0xed6 <__vector_18+0x1c6>
	{
		
		CANPAGE = (4 << 4);			//set the canpage to the receiver MOB
     d4c:	80 e4       	ldi	r24, 0x40	; 64
     d4e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		if((CANIDT4 >> 3) == AUDIT_REQUEST && !registered )	//if the received ID has packet type audit request, and we are not already registered, we will send a registration request.
     d52:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     d56:	86 95       	lsr	r24
     d58:	86 95       	lsr	r24
     d5a:	86 95       	lsr	r24
     d5c:	81 31       	cpi	r24, 0x11	; 17
     d5e:	09 f0       	breq	.+2      	; 0xd62 <__vector_18+0x52>
     d60:	40 c0       	rjmp	.+128    	; 0xde2 <__vector_18+0xd2>
     d62:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <registered>
     d66:	81 11       	cpse	r24, r1
     d68:	c1 c0       	rjmp	.+386    	; 0xeec <__vector_18+0x1dc>
		{
			mob = CAN_findFreeTXMOB();
     d6a:	0e 94 80 01 	call	0x300	; 0x300 <CAN_findFreeTXMOB>
			AMUID =  ((CANIDT2 >> 5) & 0b00000111);	//last 5 bits of CANIDT3 contain the lower 5 bits of the sender ID
     d6e:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     d72:	92 95       	swap	r25
     d74:	96 95       	lsr	r25
     d76:	97 70       	andi	r25, 0x07	; 7
     d78:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <AMUID>
			AMUID |= ((CANIDT1 << 3) & 0b11111000);	//first 3 bits of CANIDT2 contain the last 3 bits of the sender ID
     d7c:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     d80:	22 0f       	add	r18, r18
     d82:	22 0f       	add	r18, r18
     d84:	22 0f       	add	r18, r18
     d86:	92 2b       	or	r25, r18
     d88:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <AMUID>
			uint8_t data[2] = {(fw_version>>8) & 0xFF, fw_version & 0xFF};
     d8c:	20 91 4f 02 	lds	r18, 0x024F	; 0x80024f <fw_version>
     d90:	30 91 50 02 	lds	r19, 0x0250	; 0x800250 <fw_version+0x1>
     d94:	39 83       	std	Y+1, r19	; 0x01
     d96:	2a 83       	std	Y+2, r18	; 0x02
			if(mob>=0)CAN_TXMOB(mob, 2, data, ((uint32_t)deviceID<<18)|((uint32_t)AMUID<<8)|AUDIT_RESPONSE, 0); //transmit registration and do not wait for finish	
     d98:	88 23       	and	r24, r24
     d9a:	0c f4       	brge	.+2      	; 0xd9e <__vector_18+0x8e>
     d9c:	90 c0       	rjmp	.+288    	; 0xebe <__vector_18+0x1ae>
     d9e:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <deviceID>
     da2:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <deviceID+0x1>
     da6:	8a 01       	movw	r16, r20
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	0f 2e       	mov	r0, r31
     dae:	f2 e1       	ldi	r31, 0x12	; 18
     db0:	00 0f       	add	r16, r16
     db2:	11 1f       	adc	r17, r17
     db4:	22 1f       	adc	r18, r18
     db6:	33 1f       	adc	r19, r19
     db8:	fa 95       	dec	r31
     dba:	d1 f7       	brne	.-12     	; 0xdb0 <__vector_18+0xa0>
     dbc:	f0 2d       	mov	r31, r0
     dbe:	54 2f       	mov	r21, r20
     dc0:	44 27       	eor	r20, r20
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	70 e0       	ldi	r23, 0x00	; 0
     dc6:	04 2b       	or	r16, r20
     dc8:	15 2b       	or	r17, r21
     dca:	26 2b       	or	r18, r22
     dcc:	37 2b       	or	r19, r23
     dce:	03 61       	ori	r16, 0x13	; 19
     dd0:	19 2b       	or	r17, r25
     dd2:	e1 2c       	mov	r14, r1
     dd4:	ae 01       	movw	r20, r28
     dd6:	4f 5f       	subi	r20, 0xFF	; 255
     dd8:	5f 4f       	sbci	r21, 0xFF	; 255
     dda:	62 e0       	ldi	r22, 0x02	; 2
     ddc:	0e 94 1b 01 	call	0x236	; 0x236 <CAN_TXMOB>
	if((CANSIT2 & (1 << SIT4)))	//we received a CAN message on mob 5, which is set up to receive exclusively from the AMU.
	{
		
		CANPAGE = (4 << 4);			//set the canpage to the receiver MOB
		if((CANIDT4 >> 3) == AUDIT_REQUEST && !registered )	//if the received ID has packet type audit request, and we are not already registered, we will send a registration request.
		{
     de0:	6e c0       	rjmp	.+220    	; 0xebe <__vector_18+0x1ae>
			AMUID |= ((CANIDT1 << 3) & 0b11111000);	//first 3 bits of CANIDT2 contain the last 3 bits of the sender ID
			uint8_t data[2] = {(fw_version>>8) & 0xFF, fw_version & 0xFF};
			if(mob>=0)CAN_TXMOB(mob, 2, data, ((uint32_t)deviceID<<18)|((uint32_t)AMUID<<8)|AUDIT_RESPONSE, 0); //transmit registration and do not wait for finish	
			
		}
		else if((CANIDT4 >> 3)== READ_RECEIPT && !registered )
     de2:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     de6:	86 95       	lsr	r24
     de8:	86 95       	lsr	r24
     dea:	86 95       	lsr	r24
     dec:	82 31       	cpi	r24, 0x12	; 18
     dee:	51 f4       	brne	.+20     	; 0xe04 <__vector_18+0xf4>
     df0:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <registered>
     df4:	81 11       	cpse	r24, r1
     df6:	06 c0       	rjmp	.+12     	; 0xe04 <__vector_18+0xf4>
		{
			Wake_Set();
     df8:	0e 94 62 05 	call	0xac4	; 0xac4 <Wake_Set>
			registered = 1;
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <registered>
     e02:	5d c0       	rjmp	.+186    	; 0xebe <__vector_18+0x1ae>
		}
		else if((CANIDT4 >> 3)== BALANCE_ON && (CANCDMOB & 0b1111) == BALANCE_NPACKETS)
     e04:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     e08:	86 95       	lsr	r24
     e0a:	86 95       	lsr	r24
     e0c:	86 95       	lsr	r24
     e0e:	84 31       	cpi	r24, 0x14	; 20
     e10:	09 f0       	breq	.+2      	; 0xe14 <__vector_18+0x104>
     e12:	4c c0       	rjmp	.+152    	; 0xeac <__vector_18+0x19c>
     e14:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     e18:	8f 70       	andi	r24, 0x0F	; 15
     e1a:	85 30       	cpi	r24, 0x05	; 5
     e1c:	09 f0       	breq	.+2      	; 0xe20 <__vector_18+0x110>
     e1e:	46 c0       	rjmp	.+140    	; 0xeac <__vector_18+0x19c>
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <__vector_18+0x116>
     e22:	9f 5f       	subi	r25, 0xFF	; 255
     e24:	03 c0       	rjmp	.+6      	; 0xe2c <__vector_18+0x11c>
     e26:	91 e0       	ldi	r25, 0x01	; 1
						break;
					case 1:
						BALANCE_TARGET_VOLTAGE |= CANMSG;					//CAN byte 2
						break;
					case 2:
						BALANCE_DUTY_CYCLE = CANMSG;						//CAN byte 3
     e28:	ea ef       	ldi	r30, 0xFA	; 250
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	8f ef       	ldi	r24, 0xFF	; 255
     e2e:	89 0f       	add	r24, r25
		else if((CANIDT4 >> 3)== BALANCE_ON && (CANCDMOB & 0b1111) == BALANCE_NPACKETS)
		{
			//this packet processing is important, so we need to do it in here.
			for(uint8_t i = 0; i < BALANCE_NPACKETS; i++)
			{
				switch(i)
     e30:	82 30       	cpi	r24, 0x02	; 2
     e32:	e1 f0       	breq	.+56     	; 0xe6c <__vector_18+0x15c>
     e34:	28 f4       	brcc	.+10     	; 0xe40 <__vector_18+0x130>
     e36:	88 23       	and	r24, r24
     e38:	41 f0       	breq	.+16     	; 0xe4a <__vector_18+0x13a>
     e3a:	81 30       	cpi	r24, 0x01	; 1
     e3c:	61 f0       	breq	.+24     	; 0xe56 <__vector_18+0x146>
     e3e:	23 c0       	rjmp	.+70     	; 0xe86 <__vector_18+0x176>
     e40:	83 30       	cpi	r24, 0x03	; 3
     e42:	c1 f0       	breq	.+48     	; 0xe74 <__vector_18+0x164>
     e44:	84 30       	cpi	r24, 0x04	; 4
     e46:	d1 f0       	breq	.+52     	; 0xe7c <__vector_18+0x16c>
     e48:	1e c0       	rjmp	.+60     	; 0xe86 <__vector_18+0x176>
				{
					case 0:
						BALANCE_TARGET_VOLTAGE = (uint16_t)(CANMSG<<8);		//CAN byte 1
     e4a:	80 81       	ld	r24, Z
     e4c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <BALANCE_TARGET_VOLTAGE>
     e50:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <BALANCE_TARGET_VOLTAGE+0x1>
						break;
     e54:	e6 cf       	rjmp	.-52     	; 0xe22 <__vector_18+0x112>
					case 1:
						BALANCE_TARGET_VOLTAGE |= CANMSG;					//CAN byte 2
     e56:	80 81       	ld	r24, Z
     e58:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <BALANCE_TARGET_VOLTAGE>
     e5c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <BALANCE_TARGET_VOLTAGE+0x1>
     e60:	28 2b       	or	r18, r24
     e62:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <BALANCE_TARGET_VOLTAGE+0x1>
     e66:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <BALANCE_TARGET_VOLTAGE>
						break;
     e6a:	db cf       	rjmp	.-74     	; 0xe22 <__vector_18+0x112>
					case 2:
						BALANCE_DUTY_CYCLE = CANMSG;						//CAN byte 3
     e6c:	80 81       	ld	r24, Z
     e6e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <BALANCE_DUTY_CYCLE>
						break;
     e72:	d7 cf       	rjmp	.-82     	; 0xe22 <__vector_18+0x112>
					case 3:
						BALANCE_RESERVED1 = CANMSG;							//CAN byte 4
     e74:	80 81       	ld	r24, Z
     e76:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <BALANCE_RESERVED1>
						break;
     e7a:	d3 cf       	rjmp	.-90     	; 0xe22 <__vector_18+0x112>
					case 4:
						BALANCE_RESERVED2 = CANMSG;							//CAN byte 5
     e7c:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     e80:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <__data_end>
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <__vector_18+0x17a>
			registered = 1;
		}
		else if((CANIDT4 >> 3)== BALANCE_ON && (CANCDMOB & 0b1111) == BALANCE_NPACKETS)
		{
			//this packet processing is important, so we need to do it in here.
			for(uint8_t i = 0; i < BALANCE_NPACKETS; i++)
     e86:	95 30       	cpi	r25, 0x05	; 5
     e88:	60 f2       	brcs	.-104    	; 0xe22 <__vector_18+0x112>
					default:
						break;
						
				}
			}
			if(BALANCE_TARGET_VOLTAGE > 3200 && BALANCE_TARGET_VOLTAGE < 4200 && BALANCE_DUTY_CYCLE < 50) CellBalanceMode = 1;		//only if the packets we have received are valid, will we turn balancing on
     e8a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <BALANCE_TARGET_VOLTAGE>
     e8e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <BALANCE_TARGET_VOLTAGE+0x1>
     e92:	81 58       	subi	r24, 0x81	; 129
     e94:	9c 40       	sbci	r25, 0x0C	; 12
     e96:	87 3e       	cpi	r24, 0xE7	; 231
     e98:	93 40       	sbci	r25, 0x03	; 3
     e9a:	88 f4       	brcc	.+34     	; 0xebe <__vector_18+0x1ae>
     e9c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <BALANCE_DUTY_CYCLE>
     ea0:	82 33       	cpi	r24, 0x32	; 50
     ea2:	68 f4       	brcc	.+26     	; 0xebe <__vector_18+0x1ae>
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <CellBalanceMode>
     eaa:	09 c0       	rjmp	.+18     	; 0xebe <__vector_18+0x1ae>
		}
		else if((CANIDT4 >> 3)== BALANCE_OFF )
     eac:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     eb0:	86 95       	lsr	r24
     eb2:	86 95       	lsr	r24
     eb4:	86 95       	lsr	r24
     eb6:	85 31       	cpi	r24, 0x15	; 21
     eb8:	11 f4       	brne	.+4      	; 0xebe <__vector_18+0x1ae>
		{
			CellBalanceMode = 0;
     eba:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <CellBalanceMode>
		}
		CAN_RXInit(4,0,AMUmsk, AMU);	//set mob up for listening to the AMU
     ebe:	e1 2c       	mov	r14, r1
     ec0:	f1 2c       	mov	r15, r1
     ec2:	00 e0       	ldi	r16, 0x00	; 0
     ec4:	18 e0       	ldi	r17, 0x08	; 8
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	40 e0       	ldi	r20, 0x00	; 0
     ecc:	58 e0       	ldi	r21, 0x08	; 8
     ece:	60 e0       	ldi	r22, 0x00	; 0
     ed0:	84 e0       	ldi	r24, 0x04	; 4
     ed2:	0e 94 b3 00 	call	0x166	; 0x166 <CAN_RXInit>
		
		
	}
	

	CANPAGE = (4 << 4);
     ed6:	80 e4       	ldi	r24, 0x40	; 64
     ed8:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	CANSTMOB &= ~(1 << RXOK);	//unset the RXOK bit to clear the interrupt.
     edc:	ee ee       	ldi	r30, 0xEE	; 238
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	8f 7d       	andi	r24, 0xDF	; 223
     ee4:	80 83       	st	Z, r24
	LED_off();
     ee6:	0e 94 96 02 	call	0x52c	; 0x52c <LED_off>
     eea:	03 c0       	rjmp	.+6      	; 0xef2 <__vector_18+0x1e2>
			AMUID |= ((CANIDT1 << 3) & 0b11111000);	//first 3 bits of CANIDT2 contain the last 3 bits of the sender ID
			uint8_t data[2] = {(fw_version>>8) & 0xFF, fw_version & 0xFF};
			if(mob>=0)CAN_TXMOB(mob, 2, data, ((uint32_t)deviceID<<18)|((uint32_t)AMUID<<8)|AUDIT_RESPONSE, 0); //transmit registration and do not wait for finish	
			
		}
		else if((CANIDT4 >> 3)== READ_RECEIPT && !registered )
     eec:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     ef0:	89 cf       	rjmp	.-238    	; 0xe04 <__vector_18+0xf4>
	

	CANPAGE = (4 << 4);
	CANSTMOB &= ~(1 << RXOK);	//unset the RXOK bit to clear the interrupt.
	LED_off();
}
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	df 91       	pop	r29
     ef8:	cf 91       	pop	r28
     efa:	ff 91       	pop	r31
     efc:	ef 91       	pop	r30
     efe:	bf 91       	pop	r27
     f00:	af 91       	pop	r26
     f02:	9f 91       	pop	r25
     f04:	8f 91       	pop	r24
     f06:	7f 91       	pop	r23
     f08:	6f 91       	pop	r22
     f0a:	5f 91       	pop	r21
     f0c:	4f 91       	pop	r20
     f0e:	3f 91       	pop	r19
     f10:	2f 91       	pop	r18
     f12:	1f 91       	pop	r17
     f14:	0f 91       	pop	r16
     f16:	ff 90       	pop	r15
     f18:	ef 90       	pop	r14
     f1a:	0f 90       	pop	r0
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	0f 90       	pop	r0
     f20:	1f 90       	pop	r1
     f22:	18 95       	reti

00000f24 <__vector_15>:

ISR(TIMER0_COMPA_vect)
{
     f24:	1f 92       	push	r1
     f26:	0f 92       	push	r0
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	0f 92       	push	r0
     f2c:	11 24       	eor	r1, r1
     f2e:	0f 93       	push	r16
     f30:	1f 93       	push	r17
     f32:	2f 93       	push	r18
     f34:	3f 93       	push	r19
     f36:	4f 93       	push	r20
     f38:	5f 93       	push	r21
     f3a:	6f 93       	push	r22
     f3c:	7f 93       	push	r23
     f3e:	8f 93       	push	r24
     f40:	9f 93       	push	r25
     f42:	af 93       	push	r26
     f44:	bf 93       	push	r27
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	ef 93       	push	r30
     f4c:	ff 93       	push	r31
	CellBalanceCounter++;
     f4e:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <CellBalanceCounter>
     f52:	8f 5f       	subi	r24, 0xFF	; 255
     f54:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <CellBalanceCounter>
	if(CellBalanceCounter<BALANCE_DUTY_CYCLE)	//for the beginning of the duty cycle, turn cell balancing on.
     f58:	90 91 4e 02 	lds	r25, 0x024E	; 0x80024e <CellBalanceCounter>
     f5c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <BALANCE_DUTY_CYCLE>
     f60:	98 17       	cp	r25, r24
     f62:	08 f0       	brcs	.+2      	; 0xf66 <__vector_15+0x42>
     f64:	44 c0       	rjmp	.+136    	; 0xfee <__vector_15+0xca>
	{
		LED_on();
     f66:	0e 94 93 02 	call	0x526	; 0x526 <LED_on>
		PORTB |= (((_cellsToBalance&CELL2)>>2)|((_cellsToBalance&CELL3)>>2)|((_cellsToBalance&CELL5)>>2)|((_cellsToBalance&CELL6)>>2));					//turn on discharge for cells 7..4, if they are specified in _cellsToBalance
     f6a:	8e b3       	in	r24, 0x1e	; 30
     f6c:	4e b3       	in	r20, 0x1e	; 30
     f6e:	6e b3       	in	r22, 0x1e	; 30
     f70:	2e b3       	in	r18, 0x1e	; 30
     f72:	e5 b1       	in	r30, 0x05	; 5
     f74:	48 70       	andi	r20, 0x08	; 8
     f76:	50 e0       	ldi	r21, 0x00	; 0
     f78:	55 95       	asr	r21
     f7a:	47 95       	ror	r20
     f7c:	55 95       	asr	r21
     f7e:	47 95       	ror	r20
     f80:	82 fb       	bst	r24, 2
     f82:	00 27       	eor	r16, r16
     f84:	00 f9       	bld	r16, 0
     f86:	10 e0       	ldi	r17, 0x00	; 0
     f88:	40 2b       	or	r20, r16
     f8a:	51 2b       	or	r21, r17
     f8c:	60 72       	andi	r22, 0x20	; 32
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	75 95       	asr	r23
     f92:	67 95       	ror	r22
     f94:	75 95       	asr	r23
     f96:	67 95       	ror	r22
     f98:	46 2b       	or	r20, r22
     f9a:	57 2b       	or	r21, r23
     f9c:	20 74       	andi	r18, 0x40	; 64
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	35 95       	asr	r19
     fa2:	27 95       	ror	r18
     fa4:	35 95       	asr	r19
     fa6:	27 95       	ror	r18
     fa8:	ca 01       	movw	r24, r20
     faa:	82 2b       	or	r24, r18
     fac:	93 2b       	or	r25, r19
     fae:	8e 2b       	or	r24, r30
     fb0:	85 b9       	out	0x05, r24	; 5
		PORTC |= (_cellsToBalance&CELL1)|(_cellsToBalance&CELL7);														//turn on discharge for cells 3 and 0, if their corresponding bits are specified in _cellsToBalance
     fb2:	9e b3       	in	r25, 0x1e	; 30
     fb4:	8e b3       	in	r24, 0x1e	; 30
     fb6:	28 b1       	in	r18, 0x08	; 8
     fb8:	80 78       	andi	r24, 0x80	; 128
     fba:	92 70       	andi	r25, 0x02	; 2
     fbc:	89 2b       	or	r24, r25
     fbe:	82 2b       	or	r24, r18
     fc0:	88 b9       	out	0x08, r24	; 8
		PORTD |= ((_cellsToBalance&CELL0)<<1)|((_cellsToBalance&CELL4)<<3);									//turn on discharge for cells 2 and 1, if their corresponding bits are on in _cellsToBalance
     fc2:	3e b3       	in	r19, 0x1e	; 30
     fc4:	8e b3       	in	r24, 0x1e	; 30
     fc6:	2b b1       	in	r18, 0x0b	; 11
     fc8:	80 71       	andi	r24, 0x10	; 16
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	31 70       	andi	r19, 0x01	; 1
     fda:	c3 2f       	mov	r28, r19
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	d3 2f       	mov	r29, r19
     fe0:	cc 0f       	add	r28, r28
     fe2:	dd 1f       	adc	r29, r29
     fe4:	c8 2b       	or	r28, r24
     fe6:	d9 2b       	or	r29, r25
     fe8:	c2 2b       	or	r28, r18
     fea:	cb b9       	out	0x0b, r28	; 11
     fec:	0b c0       	rjmp	.+22     	; 0x1004 <__vector_15+0xe0>
	}
	else			//otherwise, turn the cell balancing off.
	{
		PORTB &= ~((CELL2>>2)|(CELL3>>2)|(CELL5>>2)|(CELL6>>2));					//turn off discharge for cells 7..4, if they are specified in _cellsToBalance
     fee:	85 b1       	in	r24, 0x05	; 5
     ff0:	84 7e       	andi	r24, 0xE4	; 228
     ff2:	85 b9       	out	0x05, r24	; 5
		PORTC &= ~((CELL1)|(CELL7));														//turn off discharge for cells 3 and 0, if their corresponding bits are specified in _cellsToBalance
     ff4:	88 b1       	in	r24, 0x08	; 8
     ff6:	8d 77       	andi	r24, 0x7D	; 125
     ff8:	88 b9       	out	0x08, r24	; 8
		PORTD &= ~((CELL0<<1)|(CELL4<<3));									//turn off discharge for cells 2 and 1, if their corresponding bits are on in _cellsToBalance
     ffa:	8b b1       	in	r24, 0x0b	; 11
     ffc:	8d 77       	andi	r24, 0x7D	; 125
     ffe:	8b b9       	out	0x0b, r24	; 11
		LED_off();
    1000:	0e 94 96 02 	call	0x52c	; 0x52c <LED_off>
	}
	if(CellBalanceCounter >= 100)CellBalanceCounter = 0;
    1004:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <CellBalanceCounter>
    1008:	84 36       	cpi	r24, 0x64	; 100
    100a:	10 f0       	brcs	.+4      	; 0x1010 <__vector_15+0xec>
    100c:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <CellBalanceCounter>
														
    1010:	ff 91       	pop	r31
    1012:	ef 91       	pop	r30
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	bf 91       	pop	r27
    101a:	af 91       	pop	r26
    101c:	9f 91       	pop	r25
    101e:	8f 91       	pop	r24
    1020:	7f 91       	pop	r23
    1022:	6f 91       	pop	r22
    1024:	5f 91       	pop	r21
    1026:	4f 91       	pop	r20
    1028:	3f 91       	pop	r19
    102a:	2f 91       	pop	r18
    102c:	1f 91       	pop	r17
    102e:	0f 91       	pop	r16
    1030:	0f 90       	pop	r0
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	0f 90       	pop	r0
    1036:	1f 90       	pop	r1
    1038:	18 95       	reti

0000103a <__subsf3>:
    103a:	50 58       	subi	r21, 0x80	; 128

0000103c <__addsf3>:
    103c:	bb 27       	eor	r27, r27
    103e:	aa 27       	eor	r26, r26
    1040:	0e 94 35 08 	call	0x106a	; 0x106a <__addsf3x>
    1044:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__fp_round>
    1048:	0e 94 ff 08 	call	0x11fe	; 0x11fe <__fp_pscA>
    104c:	38 f0       	brcs	.+14     	; 0x105c <__addsf3+0x20>
    104e:	0e 94 06 09 	call	0x120c	; 0x120c <__fp_pscB>
    1052:	20 f0       	brcs	.+8      	; 0x105c <__addsf3+0x20>
    1054:	39 f4       	brne	.+14     	; 0x1064 <__addsf3+0x28>
    1056:	9f 3f       	cpi	r25, 0xFF	; 255
    1058:	19 f4       	brne	.+6      	; 0x1060 <__addsf3+0x24>
    105a:	26 f4       	brtc	.+8      	; 0x1064 <__addsf3+0x28>
    105c:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <__fp_nan>
    1060:	0e f4       	brtc	.+2      	; 0x1064 <__addsf3+0x28>
    1062:	e0 95       	com	r30
    1064:	e7 fb       	bst	r30, 7
    1066:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__fp_inf>

0000106a <__addsf3x>:
    106a:	e9 2f       	mov	r30, r25
    106c:	0e 94 1e 09 	call	0x123c	; 0x123c <__fp_split3>
    1070:	58 f3       	brcs	.-42     	; 0x1048 <__addsf3+0xc>
    1072:	ba 17       	cp	r27, r26
    1074:	62 07       	cpc	r22, r18
    1076:	73 07       	cpc	r23, r19
    1078:	84 07       	cpc	r24, r20
    107a:	95 07       	cpc	r25, r21
    107c:	20 f0       	brcs	.+8      	; 0x1086 <__addsf3x+0x1c>
    107e:	79 f4       	brne	.+30     	; 0x109e <__addsf3x+0x34>
    1080:	a6 f5       	brtc	.+104    	; 0x10ea <__addsf3x+0x80>
    1082:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__fp_zero>
    1086:	0e f4       	brtc	.+2      	; 0x108a <__addsf3x+0x20>
    1088:	e0 95       	com	r30
    108a:	0b 2e       	mov	r0, r27
    108c:	ba 2f       	mov	r27, r26
    108e:	a0 2d       	mov	r26, r0
    1090:	0b 01       	movw	r0, r22
    1092:	b9 01       	movw	r22, r18
    1094:	90 01       	movw	r18, r0
    1096:	0c 01       	movw	r0, r24
    1098:	ca 01       	movw	r24, r20
    109a:	a0 01       	movw	r20, r0
    109c:	11 24       	eor	r1, r1
    109e:	ff 27       	eor	r31, r31
    10a0:	59 1b       	sub	r21, r25
    10a2:	99 f0       	breq	.+38     	; 0x10ca <__addsf3x+0x60>
    10a4:	59 3f       	cpi	r21, 0xF9	; 249
    10a6:	50 f4       	brcc	.+20     	; 0x10bc <__addsf3x+0x52>
    10a8:	50 3e       	cpi	r21, 0xE0	; 224
    10aa:	68 f1       	brcs	.+90     	; 0x1106 <__stack+0x7>
    10ac:	1a 16       	cp	r1, r26
    10ae:	f0 40       	sbci	r31, 0x00	; 0
    10b0:	a2 2f       	mov	r26, r18
    10b2:	23 2f       	mov	r18, r19
    10b4:	34 2f       	mov	r19, r20
    10b6:	44 27       	eor	r20, r20
    10b8:	58 5f       	subi	r21, 0xF8	; 248
    10ba:	f3 cf       	rjmp	.-26     	; 0x10a2 <__addsf3x+0x38>
    10bc:	46 95       	lsr	r20
    10be:	37 95       	ror	r19
    10c0:	27 95       	ror	r18
    10c2:	a7 95       	ror	r26
    10c4:	f0 40       	sbci	r31, 0x00	; 0
    10c6:	53 95       	inc	r21
    10c8:	c9 f7       	brne	.-14     	; 0x10bc <__addsf3x+0x52>
    10ca:	7e f4       	brtc	.+30     	; 0x10ea <__addsf3x+0x80>
    10cc:	1f 16       	cp	r1, r31
    10ce:	ba 0b       	sbc	r27, r26
    10d0:	62 0b       	sbc	r22, r18
    10d2:	73 0b       	sbc	r23, r19
    10d4:	84 0b       	sbc	r24, r20
    10d6:	ba f0       	brmi	.+46     	; 0x1106 <__stack+0x7>
    10d8:	91 50       	subi	r25, 0x01	; 1
    10da:	a1 f0       	breq	.+40     	; 0x1104 <__stack+0x5>
    10dc:	ff 0f       	add	r31, r31
    10de:	bb 1f       	adc	r27, r27
    10e0:	66 1f       	adc	r22, r22
    10e2:	77 1f       	adc	r23, r23
    10e4:	88 1f       	adc	r24, r24
    10e6:	c2 f7       	brpl	.-16     	; 0x10d8 <__addsf3x+0x6e>
    10e8:	0e c0       	rjmp	.+28     	; 0x1106 <__stack+0x7>
    10ea:	ba 0f       	add	r27, r26
    10ec:	62 1f       	adc	r22, r18
    10ee:	73 1f       	adc	r23, r19
    10f0:	84 1f       	adc	r24, r20
    10f2:	48 f4       	brcc	.+18     	; 0x1106 <__stack+0x7>
    10f4:	87 95       	ror	r24
    10f6:	77 95       	ror	r23
    10f8:	67 95       	ror	r22
    10fa:	b7 95       	ror	r27
    10fc:	f7 95       	ror	r31
    10fe:	9e 3f       	cpi	r25, 0xFE	; 254
    1100:	08 f0       	brcs	.+2      	; 0x1104 <__stack+0x5>
    1102:	b0 cf       	rjmp	.-160    	; 0x1064 <__addsf3+0x28>
    1104:	93 95       	inc	r25
    1106:	88 0f       	add	r24, r24
    1108:	08 f0       	brcs	.+2      	; 0x110c <__stack+0xd>
    110a:	99 27       	eor	r25, r25
    110c:	ee 0f       	add	r30, r30
    110e:	97 95       	ror	r25
    1110:	87 95       	ror	r24
    1112:	08 95       	ret

00001114 <__fixunssfsi>:
    1114:	0e 94 26 09 	call	0x124c	; 0x124c <__fp_splitA>
    1118:	88 f0       	brcs	.+34     	; 0x113c <__fixunssfsi+0x28>
    111a:	9f 57       	subi	r25, 0x7F	; 127
    111c:	98 f0       	brcs	.+38     	; 0x1144 <__fixunssfsi+0x30>
    111e:	b9 2f       	mov	r27, r25
    1120:	99 27       	eor	r25, r25
    1122:	b7 51       	subi	r27, 0x17	; 23
    1124:	b0 f0       	brcs	.+44     	; 0x1152 <__fixunssfsi+0x3e>
    1126:	e1 f0       	breq	.+56     	; 0x1160 <__fixunssfsi+0x4c>
    1128:	66 0f       	add	r22, r22
    112a:	77 1f       	adc	r23, r23
    112c:	88 1f       	adc	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	1a f0       	brmi	.+6      	; 0x1138 <__fixunssfsi+0x24>
    1132:	ba 95       	dec	r27
    1134:	c9 f7       	brne	.-14     	; 0x1128 <__fixunssfsi+0x14>
    1136:	14 c0       	rjmp	.+40     	; 0x1160 <__fixunssfsi+0x4c>
    1138:	b1 30       	cpi	r27, 0x01	; 1
    113a:	91 f0       	breq	.+36     	; 0x1160 <__fixunssfsi+0x4c>
    113c:	0e 94 40 09 	call	0x1280	; 0x1280 <__fp_zero>
    1140:	b1 e0       	ldi	r27, 0x01	; 1
    1142:	08 95       	ret
    1144:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__fp_zero>
    1148:	67 2f       	mov	r22, r23
    114a:	78 2f       	mov	r23, r24
    114c:	88 27       	eor	r24, r24
    114e:	b8 5f       	subi	r27, 0xF8	; 248
    1150:	39 f0       	breq	.+14     	; 0x1160 <__fixunssfsi+0x4c>
    1152:	b9 3f       	cpi	r27, 0xF9	; 249
    1154:	cc f3       	brlt	.-14     	; 0x1148 <__fixunssfsi+0x34>
    1156:	86 95       	lsr	r24
    1158:	77 95       	ror	r23
    115a:	67 95       	ror	r22
    115c:	b3 95       	inc	r27
    115e:	d9 f7       	brne	.-10     	; 0x1156 <__fixunssfsi+0x42>
    1160:	3e f4       	brtc	.+14     	; 0x1170 <__fixunssfsi+0x5c>
    1162:	90 95       	com	r25
    1164:	80 95       	com	r24
    1166:	70 95       	com	r23
    1168:	61 95       	neg	r22
    116a:	7f 4f       	sbci	r23, 0xFF	; 255
    116c:	8f 4f       	sbci	r24, 0xFF	; 255
    116e:	9f 4f       	sbci	r25, 0xFF	; 255
    1170:	08 95       	ret

00001172 <__floatunsisf>:
    1172:	e8 94       	clt
    1174:	09 c0       	rjmp	.+18     	; 0x1188 <__floatsisf+0x12>

00001176 <__floatsisf>:
    1176:	97 fb       	bst	r25, 7
    1178:	3e f4       	brtc	.+14     	; 0x1188 <__floatsisf+0x12>
    117a:	90 95       	com	r25
    117c:	80 95       	com	r24
    117e:	70 95       	com	r23
    1180:	61 95       	neg	r22
    1182:	7f 4f       	sbci	r23, 0xFF	; 255
    1184:	8f 4f       	sbci	r24, 0xFF	; 255
    1186:	9f 4f       	sbci	r25, 0xFF	; 255
    1188:	99 23       	and	r25, r25
    118a:	a9 f0       	breq	.+42     	; 0x11b6 <__floatsisf+0x40>
    118c:	f9 2f       	mov	r31, r25
    118e:	96 e9       	ldi	r25, 0x96	; 150
    1190:	bb 27       	eor	r27, r27
    1192:	93 95       	inc	r25
    1194:	f6 95       	lsr	r31
    1196:	87 95       	ror	r24
    1198:	77 95       	ror	r23
    119a:	67 95       	ror	r22
    119c:	b7 95       	ror	r27
    119e:	f1 11       	cpse	r31, r1
    11a0:	f8 cf       	rjmp	.-16     	; 0x1192 <__floatsisf+0x1c>
    11a2:	fa f4       	brpl	.+62     	; 0x11e2 <__floatsisf+0x6c>
    11a4:	bb 0f       	add	r27, r27
    11a6:	11 f4       	brne	.+4      	; 0x11ac <__floatsisf+0x36>
    11a8:	60 ff       	sbrs	r22, 0
    11aa:	1b c0       	rjmp	.+54     	; 0x11e2 <__floatsisf+0x6c>
    11ac:	6f 5f       	subi	r22, 0xFF	; 255
    11ae:	7f 4f       	sbci	r23, 0xFF	; 255
    11b0:	8f 4f       	sbci	r24, 0xFF	; 255
    11b2:	9f 4f       	sbci	r25, 0xFF	; 255
    11b4:	16 c0       	rjmp	.+44     	; 0x11e2 <__floatsisf+0x6c>
    11b6:	88 23       	and	r24, r24
    11b8:	11 f0       	breq	.+4      	; 0x11be <__floatsisf+0x48>
    11ba:	96 e9       	ldi	r25, 0x96	; 150
    11bc:	11 c0       	rjmp	.+34     	; 0x11e0 <__floatsisf+0x6a>
    11be:	77 23       	and	r23, r23
    11c0:	21 f0       	breq	.+8      	; 0x11ca <__floatsisf+0x54>
    11c2:	9e e8       	ldi	r25, 0x8E	; 142
    11c4:	87 2f       	mov	r24, r23
    11c6:	76 2f       	mov	r23, r22
    11c8:	05 c0       	rjmp	.+10     	; 0x11d4 <__floatsisf+0x5e>
    11ca:	66 23       	and	r22, r22
    11cc:	71 f0       	breq	.+28     	; 0x11ea <__floatsisf+0x74>
    11ce:	96 e8       	ldi	r25, 0x86	; 134
    11d0:	86 2f       	mov	r24, r22
    11d2:	70 e0       	ldi	r23, 0x00	; 0
    11d4:	60 e0       	ldi	r22, 0x00	; 0
    11d6:	2a f0       	brmi	.+10     	; 0x11e2 <__floatsisf+0x6c>
    11d8:	9a 95       	dec	r25
    11da:	66 0f       	add	r22, r22
    11dc:	77 1f       	adc	r23, r23
    11de:	88 1f       	adc	r24, r24
    11e0:	da f7       	brpl	.-10     	; 0x11d8 <__floatsisf+0x62>
    11e2:	88 0f       	add	r24, r24
    11e4:	96 95       	lsr	r25
    11e6:	87 95       	ror	r24
    11e8:	97 f9       	bld	r25, 7
    11ea:	08 95       	ret

000011ec <__fp_inf>:
    11ec:	97 f9       	bld	r25, 7
    11ee:	9f 67       	ori	r25, 0x7F	; 127
    11f0:	80 e8       	ldi	r24, 0x80	; 128
    11f2:	70 e0       	ldi	r23, 0x00	; 0
    11f4:	60 e0       	ldi	r22, 0x00	; 0
    11f6:	08 95       	ret

000011f8 <__fp_nan>:
    11f8:	9f ef       	ldi	r25, 0xFF	; 255
    11fa:	80 ec       	ldi	r24, 0xC0	; 192
    11fc:	08 95       	ret

000011fe <__fp_pscA>:
    11fe:	00 24       	eor	r0, r0
    1200:	0a 94       	dec	r0
    1202:	16 16       	cp	r1, r22
    1204:	17 06       	cpc	r1, r23
    1206:	18 06       	cpc	r1, r24
    1208:	09 06       	cpc	r0, r25
    120a:	08 95       	ret

0000120c <__fp_pscB>:
    120c:	00 24       	eor	r0, r0
    120e:	0a 94       	dec	r0
    1210:	12 16       	cp	r1, r18
    1212:	13 06       	cpc	r1, r19
    1214:	14 06       	cpc	r1, r20
    1216:	05 06       	cpc	r0, r21
    1218:	08 95       	ret

0000121a <__fp_round>:
    121a:	09 2e       	mov	r0, r25
    121c:	03 94       	inc	r0
    121e:	00 0c       	add	r0, r0
    1220:	11 f4       	brne	.+4      	; 0x1226 <__fp_round+0xc>
    1222:	88 23       	and	r24, r24
    1224:	52 f0       	brmi	.+20     	; 0x123a <__fp_round+0x20>
    1226:	bb 0f       	add	r27, r27
    1228:	40 f4       	brcc	.+16     	; 0x123a <__fp_round+0x20>
    122a:	bf 2b       	or	r27, r31
    122c:	11 f4       	brne	.+4      	; 0x1232 <__fp_round+0x18>
    122e:	60 ff       	sbrs	r22, 0
    1230:	04 c0       	rjmp	.+8      	; 0x123a <__fp_round+0x20>
    1232:	6f 5f       	subi	r22, 0xFF	; 255
    1234:	7f 4f       	sbci	r23, 0xFF	; 255
    1236:	8f 4f       	sbci	r24, 0xFF	; 255
    1238:	9f 4f       	sbci	r25, 0xFF	; 255
    123a:	08 95       	ret

0000123c <__fp_split3>:
    123c:	57 fd       	sbrc	r21, 7
    123e:	90 58       	subi	r25, 0x80	; 128
    1240:	44 0f       	add	r20, r20
    1242:	55 1f       	adc	r21, r21
    1244:	59 f0       	breq	.+22     	; 0x125c <__fp_splitA+0x10>
    1246:	5f 3f       	cpi	r21, 0xFF	; 255
    1248:	71 f0       	breq	.+28     	; 0x1266 <__fp_splitA+0x1a>
    124a:	47 95       	ror	r20

0000124c <__fp_splitA>:
    124c:	88 0f       	add	r24, r24
    124e:	97 fb       	bst	r25, 7
    1250:	99 1f       	adc	r25, r25
    1252:	61 f0       	breq	.+24     	; 0x126c <__fp_splitA+0x20>
    1254:	9f 3f       	cpi	r25, 0xFF	; 255
    1256:	79 f0       	breq	.+30     	; 0x1276 <__fp_splitA+0x2a>
    1258:	87 95       	ror	r24
    125a:	08 95       	ret
    125c:	12 16       	cp	r1, r18
    125e:	13 06       	cpc	r1, r19
    1260:	14 06       	cpc	r1, r20
    1262:	55 1f       	adc	r21, r21
    1264:	f2 cf       	rjmp	.-28     	; 0x124a <__fp_split3+0xe>
    1266:	46 95       	lsr	r20
    1268:	f1 df       	rcall	.-30     	; 0x124c <__fp_splitA>
    126a:	08 c0       	rjmp	.+16     	; 0x127c <__fp_splitA+0x30>
    126c:	16 16       	cp	r1, r22
    126e:	17 06       	cpc	r1, r23
    1270:	18 06       	cpc	r1, r24
    1272:	99 1f       	adc	r25, r25
    1274:	f1 cf       	rjmp	.-30     	; 0x1258 <__fp_splitA+0xc>
    1276:	86 95       	lsr	r24
    1278:	71 05       	cpc	r23, r1
    127a:	61 05       	cpc	r22, r1
    127c:	08 94       	sec
    127e:	08 95       	ret

00001280 <__fp_zero>:
    1280:	e8 94       	clt

00001282 <__fp_szero>:
    1282:	bb 27       	eor	r27, r27
    1284:	66 27       	eor	r22, r22
    1286:	77 27       	eor	r23, r23
    1288:	cb 01       	movw	r24, r22
    128a:	97 f9       	bld	r25, 7
    128c:	08 95       	ret

0000128e <__mulsf3>:
    128e:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__mulsf3x>
    1292:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__fp_round>
    1296:	0e 94 ff 08 	call	0x11fe	; 0x11fe <__fp_pscA>
    129a:	38 f0       	brcs	.+14     	; 0x12aa <__mulsf3+0x1c>
    129c:	0e 94 06 09 	call	0x120c	; 0x120c <__fp_pscB>
    12a0:	20 f0       	brcs	.+8      	; 0x12aa <__mulsf3+0x1c>
    12a2:	95 23       	and	r25, r21
    12a4:	11 f0       	breq	.+4      	; 0x12aa <__mulsf3+0x1c>
    12a6:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__fp_inf>
    12aa:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <__fp_nan>
    12ae:	11 24       	eor	r1, r1
    12b0:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__fp_szero>

000012b4 <__mulsf3x>:
    12b4:	0e 94 1e 09 	call	0x123c	; 0x123c <__fp_split3>
    12b8:	70 f3       	brcs	.-36     	; 0x1296 <__mulsf3+0x8>

000012ba <__mulsf3_pse>:
    12ba:	95 9f       	mul	r25, r21
    12bc:	c1 f3       	breq	.-16     	; 0x12ae <__mulsf3+0x20>
    12be:	95 0f       	add	r25, r21
    12c0:	50 e0       	ldi	r21, 0x00	; 0
    12c2:	55 1f       	adc	r21, r21
    12c4:	62 9f       	mul	r22, r18
    12c6:	f0 01       	movw	r30, r0
    12c8:	72 9f       	mul	r23, r18
    12ca:	bb 27       	eor	r27, r27
    12cc:	f0 0d       	add	r31, r0
    12ce:	b1 1d       	adc	r27, r1
    12d0:	63 9f       	mul	r22, r19
    12d2:	aa 27       	eor	r26, r26
    12d4:	f0 0d       	add	r31, r0
    12d6:	b1 1d       	adc	r27, r1
    12d8:	aa 1f       	adc	r26, r26
    12da:	64 9f       	mul	r22, r20
    12dc:	66 27       	eor	r22, r22
    12de:	b0 0d       	add	r27, r0
    12e0:	a1 1d       	adc	r26, r1
    12e2:	66 1f       	adc	r22, r22
    12e4:	82 9f       	mul	r24, r18
    12e6:	22 27       	eor	r18, r18
    12e8:	b0 0d       	add	r27, r0
    12ea:	a1 1d       	adc	r26, r1
    12ec:	62 1f       	adc	r22, r18
    12ee:	73 9f       	mul	r23, r19
    12f0:	b0 0d       	add	r27, r0
    12f2:	a1 1d       	adc	r26, r1
    12f4:	62 1f       	adc	r22, r18
    12f6:	83 9f       	mul	r24, r19
    12f8:	a0 0d       	add	r26, r0
    12fa:	61 1d       	adc	r22, r1
    12fc:	22 1f       	adc	r18, r18
    12fe:	74 9f       	mul	r23, r20
    1300:	33 27       	eor	r19, r19
    1302:	a0 0d       	add	r26, r0
    1304:	61 1d       	adc	r22, r1
    1306:	23 1f       	adc	r18, r19
    1308:	84 9f       	mul	r24, r20
    130a:	60 0d       	add	r22, r0
    130c:	21 1d       	adc	r18, r1
    130e:	82 2f       	mov	r24, r18
    1310:	76 2f       	mov	r23, r22
    1312:	6a 2f       	mov	r22, r26
    1314:	11 24       	eor	r1, r1
    1316:	9f 57       	subi	r25, 0x7F	; 127
    1318:	50 40       	sbci	r21, 0x00	; 0
    131a:	9a f0       	brmi	.+38     	; 0x1342 <__mulsf3_pse+0x88>
    131c:	f1 f0       	breq	.+60     	; 0x135a <__mulsf3_pse+0xa0>
    131e:	88 23       	and	r24, r24
    1320:	4a f0       	brmi	.+18     	; 0x1334 <__mulsf3_pse+0x7a>
    1322:	ee 0f       	add	r30, r30
    1324:	ff 1f       	adc	r31, r31
    1326:	bb 1f       	adc	r27, r27
    1328:	66 1f       	adc	r22, r22
    132a:	77 1f       	adc	r23, r23
    132c:	88 1f       	adc	r24, r24
    132e:	91 50       	subi	r25, 0x01	; 1
    1330:	50 40       	sbci	r21, 0x00	; 0
    1332:	a9 f7       	brne	.-22     	; 0x131e <__mulsf3_pse+0x64>
    1334:	9e 3f       	cpi	r25, 0xFE	; 254
    1336:	51 05       	cpc	r21, r1
    1338:	80 f0       	brcs	.+32     	; 0x135a <__mulsf3_pse+0xa0>
    133a:	0c 94 f6 08 	jmp	0x11ec	; 0x11ec <__fp_inf>
    133e:	0c 94 41 09 	jmp	0x1282	; 0x1282 <__fp_szero>
    1342:	5f 3f       	cpi	r21, 0xFF	; 255
    1344:	e4 f3       	brlt	.-8      	; 0x133e <__mulsf3_pse+0x84>
    1346:	98 3e       	cpi	r25, 0xE8	; 232
    1348:	d4 f3       	brlt	.-12     	; 0x133e <__mulsf3_pse+0x84>
    134a:	86 95       	lsr	r24
    134c:	77 95       	ror	r23
    134e:	67 95       	ror	r22
    1350:	b7 95       	ror	r27
    1352:	f7 95       	ror	r31
    1354:	e7 95       	ror	r30
    1356:	9f 5f       	subi	r25, 0xFF	; 255
    1358:	c1 f7       	brne	.-16     	; 0x134a <__mulsf3_pse+0x90>
    135a:	fe 2b       	or	r31, r30
    135c:	88 0f       	add	r24, r24
    135e:	91 1d       	adc	r25, r1
    1360:	96 95       	lsr	r25
    1362:	87 95       	ror	r24
    1364:	97 f9       	bld	r25, 7
    1366:	08 95       	ret

00001368 <__udivmodsi4>:
    1368:	a1 e2       	ldi	r26, 0x21	; 33
    136a:	1a 2e       	mov	r1, r26
    136c:	aa 1b       	sub	r26, r26
    136e:	bb 1b       	sub	r27, r27
    1370:	fd 01       	movw	r30, r26
    1372:	0d c0       	rjmp	.+26     	; 0x138e <__udivmodsi4_ep>

00001374 <__udivmodsi4_loop>:
    1374:	aa 1f       	adc	r26, r26
    1376:	bb 1f       	adc	r27, r27
    1378:	ee 1f       	adc	r30, r30
    137a:	ff 1f       	adc	r31, r31
    137c:	a2 17       	cp	r26, r18
    137e:	b3 07       	cpc	r27, r19
    1380:	e4 07       	cpc	r30, r20
    1382:	f5 07       	cpc	r31, r21
    1384:	20 f0       	brcs	.+8      	; 0x138e <__udivmodsi4_ep>
    1386:	a2 1b       	sub	r26, r18
    1388:	b3 0b       	sbc	r27, r19
    138a:	e4 0b       	sbc	r30, r20
    138c:	f5 0b       	sbc	r31, r21

0000138e <__udivmodsi4_ep>:
    138e:	66 1f       	adc	r22, r22
    1390:	77 1f       	adc	r23, r23
    1392:	88 1f       	adc	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	1a 94       	dec	r1
    1398:	69 f7       	brne	.-38     	; 0x1374 <__udivmodsi4_loop>
    139a:	60 95       	com	r22
    139c:	70 95       	com	r23
    139e:	80 95       	com	r24
    13a0:	90 95       	com	r25
    13a2:	9b 01       	movw	r18, r22
    13a4:	ac 01       	movw	r20, r24
    13a6:	bd 01       	movw	r22, r26
    13a8:	cf 01       	movw	r24, r30
    13aa:	08 95       	ret

000013ac <eeprom_read_word>:
    13ac:	a8 e1       	ldi	r26, 0x18	; 24
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	42 e0       	ldi	r20, 0x02	; 2
    13b2:	50 e0       	ldi	r21, 0x00	; 0
    13b4:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <eeprom_read_blraw>

000013b8 <eeprom_write_word>:
    13b8:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <eeprom_write_byte>
    13bc:	27 2f       	mov	r18, r23
    13be:	0c 94 f2 09 	jmp	0x13e4	; 0x13e4 <eeprom_write_r18>

000013c2 <eeprom_read_block>:
    13c2:	dc 01       	movw	r26, r24
    13c4:	cb 01       	movw	r24, r22

000013c6 <eeprom_read_blraw>:
    13c6:	fc 01       	movw	r30, r24
    13c8:	f9 99       	sbic	0x1f, 1	; 31
    13ca:	fe cf       	rjmp	.-4      	; 0x13c8 <eeprom_read_blraw+0x2>
    13cc:	06 c0       	rjmp	.+12     	; 0x13da <eeprom_read_blraw+0x14>
    13ce:	f2 bd       	out	0x22, r31	; 34
    13d0:	e1 bd       	out	0x21, r30	; 33
    13d2:	f8 9a       	sbi	0x1f, 0	; 31
    13d4:	31 96       	adiw	r30, 0x01	; 1
    13d6:	00 b4       	in	r0, 0x20	; 32
    13d8:	0d 92       	st	X+, r0
    13da:	41 50       	subi	r20, 0x01	; 1
    13dc:	50 40       	sbci	r21, 0x00	; 0
    13de:	b8 f7       	brcc	.-18     	; 0x13ce <eeprom_read_blraw+0x8>
    13e0:	08 95       	ret

000013e2 <eeprom_write_byte>:
    13e2:	26 2f       	mov	r18, r22

000013e4 <eeprom_write_r18>:
    13e4:	f9 99       	sbic	0x1f, 1	; 31
    13e6:	fe cf       	rjmp	.-4      	; 0x13e4 <eeprom_write_r18>
    13e8:	1f ba       	out	0x1f, r1	; 31
    13ea:	92 bd       	out	0x22, r25	; 34
    13ec:	81 bd       	out	0x21, r24	; 33
    13ee:	20 bd       	out	0x20, r18	; 32
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	fa 9a       	sbi	0x1f, 2	; 31
    13f6:	f9 9a       	sbi	0x1f, 1	; 31
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	01 96       	adiw	r24, 0x01	; 1
    13fc:	08 95       	ret

000013fe <_exit>:
    13fe:	f8 94       	cli

00001400 <__stop_program>:
    1400:	ff cf       	rjmp	.-2      	; 0x1400 <__stop_program>
